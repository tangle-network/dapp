{"version":3,"file":"9184.74e42f07.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAuGA","sources":["webpack://webb-monorepo/./node_modules/@polkadot/react-identicon/Identicon.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { ICON_DEFAULT_HOST, settings } from '@polkadot/ui-settings';\nimport { isHex, isU8a, u8aToHex } from '@polkadot/util';\nimport { decodeAddress, encodeAddress, ethereumEncode } from '@polkadot/util-crypto';\nimport { Beachball, Empty, Ethereum, Jdenticon, Polkadot } from './icons/index.js';\nimport { styled } from './styled.js';\nconst Fallback = Beachball;\nconst DEFAULT_SIZE = 64;\nconst Components = {\n    beachball: Beachball,\n    empty: Empty,\n    ethereum: Ethereum,\n    jdenticon: Jdenticon,\n    polkadot: Polkadot,\n    substrate: Jdenticon\n};\nclass BaseIcon extends React.PureComponent {\n    state = {\n        address: '',\n        publicKey: '0x'\n    };\n    static prefix = undefined;\n    static setDefaultPrefix(prefix) {\n        BaseIcon.prefix = prefix;\n    }\n    static getDerivedStateFromProps({ prefix = BaseIcon.prefix, theme, value }, prevState) {\n        if (theme === 'ethereum') {\n            const address = isU8a(value)\n                ? ethereumEncode(value)\n                : value || '';\n            return { address, publicKey: '' };\n        }\n        try {\n            const address = isU8a(value) || isHex(value)\n                ? encodeAddress(value, prefix)\n                : (value || '');\n            const publicKey = u8aToHex(decodeAddress(address, false, prefix));\n            return address === prevState.address\n                ? null\n                : {\n                    address,\n                    publicKey\n                };\n        }\n        catch {\n            return {\n                address: '',\n                publicKey: '0x'\n            };\n        }\n    }\n    render() {\n        const { address } = this.state;\n        const wrapped = this.getWrapped(this.state, this.props);\n        return !address\n            ? wrapped\n            : (_jsx(CopyToClipboard, { onCopy: this.onCopy, text: address, children: wrapped }));\n    }\n    getWrapped({ address, publicKey }, { Custom }) {\n        const { className = '', isAlternative, isHighlight, size = DEFAULT_SIZE, style = {}, theme = settings.icon } = this.props;\n        const Component = !address\n            ? Empty\n            : Custom || Components[theme === 'default' ? ICON_DEFAULT_HOST : theme] || Fallback;\n        return (_jsx(StyledDiv, { className: `ui--IdentityIcon  ${className}`, style: style, children: _jsx(Component, { address: address, className: isHighlight ? 'highlight' : '', isAlternative: isAlternative, publicKey: publicKey, size: size }) }, address));\n    }\n    onCopy = () => {\n        const { onCopy } = this.props;\n        const { address } = this.state;\n        if (address && onCopy) {\n            onCopy(address);\n        }\n    };\n}\nfunction Icon(props) {\n    return _jsx(BaseIcon, { ...props });\n}\nconst StyledDiv = styled.div `\n  cursor: copy;\n  display: inline-block;\n  line-height: 0;\n\n  > .container {\n    position: relative;\n\n    > div,\n    > svg {\n      position: relative;\n    }\n\n    &.highlight:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      border-radius: 50%;\n      box-shadow: 0 0 5px 2px #aaa;\n      content: '';\n    }\n  }\n`;\nexport const Identicon = React.memo(Icon);\n"],"names":[],"sourceRoot":""}