"use strict";(self.webpackChunk_webb_tools_webb_ui_components=self.webpackChunk_webb_tools_webb_ui_components||[]).push([[4328],{"../../node_modules/@polkadot/extension-dapp/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{web3Enable:()=>web3Enable});var console=__webpack_require__("../../node_modules/console-browserify/index.js");const win=window;win.injectedWeb3=win.injectedWeb3||{};let isWeb3Injected=web3IsInjected(),web3EnablePromise=null;function web3IsInjected(){return 0!==Object.values(win.injectedWeb3).filter((({connect,enable})=>!(!connect&&!enable))).length}function getWindowExtensions(originName){return Promise.all(Object.entries(win.injectedWeb3).map((([nameOrHash,{connect,enable,version}])=>Promise.resolve().then((()=>connect?connect(originName):enable?enable(originName).then((e=>function objectSpread(dest,...sources){for(let i=0,count=sources.length;i<count;i++){const src=sources[i];if(src)if("function"==typeof src.entries)for(const[key,value]of src.entries())dest[key]=value;else Object.assign(dest,src)}return dest}({name:nameOrHash,version:version||"unknown"},e))):Promise.reject(new Error("No connect(..) or enable(...) hook found")))).catch((({message})=>{console.error(`Error initializing ${nameOrHash}: ${message}`)}))))).then((exts=>exts.filter((e=>!!e))))}function web3Enable(originName,compatInits=[]){if(!originName)throw new Error("You must pass a name for your app to the web3Enable function");const initCompat=compatInits.length?Promise.all(compatInits.map((c=>c().catch((()=>!1))))):Promise.resolve([!0]);return web3EnablePromise=function documentReadyPromise(creator){return new Promise((resolve=>{"complete"===document.readyState?resolve(creator()):window.addEventListener("load",(()=>resolve(creator())))}))}((()=>initCompat.then((()=>getWindowExtensions(originName).then((values=>values.map((e=>(e.accounts.subscribe||(e.accounts.subscribe=cb=>(e.accounts.get().then(cb).catch(console.error),()=>{})),e))))).catch((()=>[])).then((values=>{const names=values.map((({name,version})=>`${name}/${version}`));return isWeb3Injected=web3IsInjected(),console.info(`web3Enable: Enabled ${values.length} extension${1!==values.length?"s":""}: ${names.join(", ")}`),values})))))),web3EnablePromise}}}]);