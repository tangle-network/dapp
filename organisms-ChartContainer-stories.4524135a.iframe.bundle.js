"use strict";(self.webpackChunk_webb_tools_webb_ui_components=self.webpackChunk_webb_tools_webb_ui_components||[]).push([[3694],{"./src/stories/organisms/ChartContainer.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{TVL:()=>TVL,Volume:()=>Volume,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/next/dist/compiled/react/index.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/recharts/es6/component/ResponsiveContainer.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/recharts/es6/chart/AreaChart.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/recharts/es6/cartesian/XAxis.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("../../node_modules/recharts/es6/component/Tooltip.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("../../node_modules/recharts/es6/cartesian/Area.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("../../node_modules/recharts/es6/chart/BarChart.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("../../node_modules/recharts/es6/cartesian/Bar.js"),_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Design System/Organisms/ChartContainer",component:_components__WEBPACK_IMPORTED_MODULE_2__.atp},TVL=()=>{const[currentTvlValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(13.6),[tvlValue,setTvlValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),[tvlDate,setTVLDate]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),[isDarkMode]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),tvlData=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((()=>{const data=[];for(let i=0;i<200;i++)data.push({date:new Date(Date.now()+24*i*60*60*1e3),value:Math.floor(20*Math.random())+1});return data}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components__WEBPACK_IMPORTED_MODULE_2__.atp,{heading:"TVL",currentValue:currentTvlValue,value:tvlValue,date:tvlDate,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_3__.u,{width:"100%",height:180,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_4__.Q,{data:tvlData,onMouseLeave:()=>{setTVLDate&&setTVLDate(null),setTvlValue&&setTvlValue(null)},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_5__.W,{dataKey:"date",tickFormatter:date=>new Date(date).toLocaleDateString("en-US",{day:"numeric"}),strokeOpacity:0,tick:{fontSize:"16px",fill:"#9CA0B0",fontWeight:400},tickMargin:16}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_6__.m,{contentStyle:{display:"none"},content:({active,payload})=>(active&&payload&&payload.length&&(setTvlValue&&setTvlValue(payload[0].payload.value),setTVLDate&&setTVLDate(payload[0].payload.date)),null)}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_7__.G,{dataKey:"value",stroke:isDarkMode?"#C6BBFA":"#624FBE",fillOpacity:0,strokeWidth:2})]})})})},Volume=()=>{const[currentVolumeValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(8.56),[volumeDate,setVolumeDate]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),[volumeValue,setVolumeValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),[volumeDataType,setVolumeDataType]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("week"),[isDarkMode]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),volumeData=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((()=>{const data=[];for(let i=0;i<200;i++)data.push({date:new Date(Date.now()+24*i*60*60*1e3),value:Math.floor(20*Math.random())+1});return data}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components__WEBPACK_IMPORTED_MODULE_2__.atp,{heading:"Volume 24H",currentValue:currentVolumeValue,value:volumeValue,date:volumeDate,filterType:"days",daysFilterType:volumeDataType,setDaysFilterType:setVolumeDataType,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_3__.u,{width:"100%",height:180,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_8__.E,{data:volumeData,onMouseLeave:()=>{setVolumeValue&&setVolumeValue(null),setVolumeDate&&setVolumeDate(null)},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_5__.W,{dataKey:"date",tickFormatter:date=>new Date(date).toLocaleDateString("en-US",{day:"numeric"}),strokeOpacity:0,tick:{fontSize:"16px",fill:"#9CA0B0",fontWeight:400},tickMargin:16}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_6__.m,{contentStyle:{display:"none"},content:({active,payload})=>(active&&payload&&payload.length&&(setVolumeValue&&setVolumeValue(payload[0].payload.value),setVolumeDate&&setVolumeDate(payload[0].payload.date)),null)}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_9__.y,{dataKey:"value",fill:isDarkMode?"#81B3F6":"#3D7BCE"})]})})})},__namedExportsOrder=["TVL","Volume"];TVL.parameters={...TVL.parameters,docs:{...TVL.parameters?.docs,source:{originalSource:"() => {\n  const [currentTvlValue] = useState(13.6);\n  const [tvlValue, setTvlValue] = useState(null);\n  const [tvlDate, setTVLDate] = useState(null);\n  const [isDarkMode] = useState(false);\n  const tvlData = useMemo(() => {\n    const data = [];\n    for (let i = 0; i < 200; i++) {\n      data.push({\n        date: new Date(Date.now() + i * 24 * 60 * 60 * 1000),\n        value: Math.floor(Math.random() * 20) + 1\n      });\n    }\n    return data;\n  }, []);\n  return <ChartContainer heading=\"TVL\" currentValue={currentTvlValue} value={tvlValue} date={tvlDate}>\n      <ResponsiveContainer width=\"100%\" height={180}>\n        <AreaChart data={tvlData} onMouseLeave={() => {\n        setTVLDate && setTVLDate(null);\n        setTvlValue && setTvlValue(null);\n      }}>\n          <XAxis dataKey=\"date\" tickFormatter={date => new Date(date).toLocaleDateString('en-US', {\n          day: 'numeric'\n        })} strokeOpacity={0} tick={{\n          fontSize: '16px',\n          fill: '#9CA0B0',\n          fontWeight: 400\n        }} tickMargin={16} />\n          <Tooltip contentStyle={{\n          display: 'none'\n        }} content={({\n          active,\n          payload\n        }) => {\n          if (active && payload && payload.length) {\n            setTvlValue && setTvlValue(payload[0].payload['value']);\n            setTVLDate && setTVLDate(payload[0].payload['date']);\n          }\n          return null;\n        }} />\n          <Area dataKey=\"value\" stroke={isDarkMode ? '#C6BBFA' : '#624FBE'} fillOpacity={0} strokeWidth={2} />\n        </AreaChart>\n      </ResponsiveContainer>\n    </ChartContainer>;\n}",...TVL.parameters?.docs?.source}}},Volume.parameters={...Volume.parameters,docs:{...Volume.parameters?.docs,source:{originalSource:"() => {\n  const [currentVolumeValue] = useState(8.56);\n  const [volumeDate, setVolumeDate] = useState(null);\n  const [volumeValue, setVolumeValue] = useState(null);\n  const [volumeDataType, setVolumeDataType] = useState('week');\n  const [isDarkMode] = useState(false);\n  const volumeData = useMemo(() => {\n    const data = [];\n    for (let i = 0; i < 200; i++) {\n      data.push({\n        date: new Date(Date.now() + i * 24 * 60 * 60 * 1000),\n        value: Math.floor(Math.random() * 20) + 1\n      });\n    }\n    return data;\n  }, []);\n  return <ChartContainer heading=\"Volume 24H\" currentValue={currentVolumeValue} value={volumeValue} date={volumeDate} filterType=\"days\" daysFilterType={volumeDataType} setDaysFilterType={setVolumeDataType}>\n      <ResponsiveContainer width=\"100%\" height={180}>\n        <BarChart data={volumeData} onMouseLeave={() => {\n        setVolumeValue && setVolumeValue(null);\n        setVolumeDate && setVolumeDate(null);\n      }}>\n          <XAxis dataKey=\"date\" tickFormatter={date => new Date(date).toLocaleDateString('en-US', {\n          day: 'numeric'\n        })} strokeOpacity={0} tick={{\n          fontSize: '16px',\n          fill: '#9CA0B0',\n          fontWeight: 400\n        }} tickMargin={16} />\n          <Tooltip contentStyle={{\n          display: 'none'\n        }} content={({\n          active,\n          payload\n        }) => {\n          if (active && payload && payload.length) {\n            setVolumeValue && setVolumeValue(payload[0].payload['value']);\n            setVolumeDate && setVolumeDate(payload[0].payload['date']);\n          }\n          return null;\n        }} />\n          <Bar dataKey=\"value\" fill={isDarkMode ? '#81B3F6' : '#3D7BCE'} />\n        </BarChart>\n      </ResponsiveContainer>\n    </ChartContainer>;\n}",...Volume.parameters?.docs?.source}}}}}]);