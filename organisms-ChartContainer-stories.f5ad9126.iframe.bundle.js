"use strict";(self.webpackChunkwebb_monorepo=self.webpackChunkwebb_monorepo||[]).push([[3694],{"./libs/webb-ui-components/src/stories/organisms/ChartContainer.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{TVL:()=>TVL,Volume:()=>Volume,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.array.push.js");var _TVL_parameters,_TVL_parameters_docs,_TVL_parameters1,_Volume_parameters,_Volume_parameters_docs,_Volume_parameters1,react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/recharts/es6/component/ResponsiveContainer.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/recharts/es6/chart/AreaChart.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/recharts/es6/cartesian/XAxis.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/recharts/es6/component/Tooltip.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/recharts/es6/cartesian/Area.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/recharts/es6/chart/BarChart.js"),_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/recharts/es6/cartesian/Bar.js"),_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./libs/webb-ui-components/src/components/index.ts"),__jsx=react__WEBPACK_IMPORTED_MODULE_1__.createElement;const __WEBPACK_DEFAULT_EXPORT__={title:"Design System/Organisms/ChartContainer",component:_components__WEBPACK_IMPORTED_MODULE_2__.ChartContainer};var TVL=function TVL(){var currentTvlValue=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(13.6)[0],_useState2=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),tvlValue=_useState2[0],setTvlValue=_useState2[1],_useState3=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),tvlDate=_useState3[0],setTVLDate=_useState3[1],isDarkMode=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1)[0],tvlData=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){for(var data=[],i=0;i<200;i++)data.push({date:new Date(Date.now()+24*i*60*60*1e3),value:Math.floor(20*Math.random())+1});return data}),[]);return __jsx(_components__WEBPACK_IMPORTED_MODULE_2__.ChartContainer,{heading:"TVL",currentValue:currentTvlValue,value:tvlValue,date:tvlDate},__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_3__.u,{width:"100%",height:180},__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_4__.Q,{data:tvlData,onMouseLeave:function onMouseLeave(){setTVLDate&&setTVLDate(null),setTvlValue&&setTvlValue(null)}},__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_5__.W,{dataKey:"date",tickFormatter:function tickFormatter(date){return new Date(date).toLocaleDateString("en-US",{day:"numeric"})},strokeOpacity:0,tick:{fontSize:"16px",fill:"#9CA0B0",fontWeight:400},tickMargin:16}),__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_6__.m,{contentStyle:{display:"none"},content:function content(_ref){var active=_ref.active,payload=_ref.payload;return active&&payload&&payload.length&&(setTvlValue&&setTvlValue(payload[0].payload.value),setTVLDate&&setTVLDate(payload[0].payload.date)),null}}),__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_7__.G,{dataKey:"value",stroke:isDarkMode?"#C6BBFA":"#624FBE",fillOpacity:0,strokeWidth:2}))))},Volume=function Volume(){var currentVolumeValue=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(8.56)[0],_useState6=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),volumeDate=_useState6[0],setVolumeDate=_useState6[1],_useState7=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null),volumeValue=_useState7[0],setVolumeValue=_useState7[1],_useState8=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("week"),volumeDataType=_useState8[0],setVolumeDataType=_useState8[1],isDarkMode=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1)[0],volumeData=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){for(var data=[],i=0;i<200;i++)data.push({date:new Date(Date.now()+24*i*60*60*1e3),value:Math.floor(20*Math.random())+1});return data}),[]);return __jsx(_components__WEBPACK_IMPORTED_MODULE_2__.ChartContainer,{heading:"Volume 24H",currentValue:currentVolumeValue,value:volumeValue,date:volumeDate,filterType:"days",daysFilterType:volumeDataType,setDaysFilterType:setVolumeDataType},__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_3__.u,{width:"100%",height:180},__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_8__.E,{data:volumeData,onMouseLeave:function onMouseLeave(){setVolumeValue&&setVolumeValue(null),setVolumeDate&&setVolumeDate(null)}},__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_5__.W,{dataKey:"date",tickFormatter:function tickFormatter(date){return new Date(date).toLocaleDateString("en-US",{day:"numeric"})},strokeOpacity:0,tick:{fontSize:"16px",fill:"#9CA0B0",fontWeight:400},tickMargin:16}),__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_6__.m,{contentStyle:{display:"none"},content:function content(_ref2){var active=_ref2.active,payload=_ref2.payload;return active&&payload&&payload.length&&(setVolumeValue&&setVolumeValue(payload[0].payload.value),setVolumeDate&&setVolumeDate(payload[0].payload.date)),null}}),__jsx(_barrel_optimize_names_Area_AreaChart_Bar_BarChart_ResponsiveContainer_Tooltip_XAxis_recharts__WEBPACK_IMPORTED_MODULE_9__.y,{dataKey:"value",fill:isDarkMode?"#81B3F6":"#3D7BCE"}))))};TVL.parameters={...TVL.parameters,docs:{...null===(_TVL_parameters=TVL.parameters)||void 0===_TVL_parameters?void 0:_TVL_parameters.docs,source:{originalSource:"() => {\n  const [currentTvlValue] = useState(13.6);\n  const [tvlValue, setTvlValue] = useState(null);\n  const [tvlDate, setTVLDate] = useState(null);\n  const [isDarkMode] = useState(false);\n  const tvlData = useMemo(() => {\n    const data = [];\n    for (let i = 0; i < 200; i++) {\n      data.push({\n        date: new Date(Date.now() + i * 24 * 60 * 60 * 1000),\n        value: Math.floor(Math.random() * 20) + 1\n      });\n    }\n    return data;\n  }, []);\n  return <ChartContainer heading=\"TVL\" currentValue={currentTvlValue} value={tvlValue} date={tvlDate}>\n      <ResponsiveContainer width=\"100%\" height={180}>\n        <AreaChart data={tvlData} onMouseLeave={() => {\n        setTVLDate && setTVLDate(null);\n        setTvlValue && setTvlValue(null);\n      }}>\n          <XAxis dataKey=\"date\" tickFormatter={date => new Date(date).toLocaleDateString('en-US', {\n          day: 'numeric'\n        })} strokeOpacity={0} tick={{\n          fontSize: '16px',\n          fill: '#9CA0B0',\n          fontWeight: 400\n        }} tickMargin={16} />\n          <Tooltip contentStyle={{\n          display: 'none'\n        }} content={({\n          active,\n          payload\n        }) => {\n          if (active && payload && payload.length) {\n            setTvlValue && setTvlValue(payload[0].payload['value']);\n            setTVLDate && setTVLDate(payload[0].payload['date']);\n          }\n          return null;\n        }} />\n          <Area dataKey=\"value\" stroke={isDarkMode ? '#C6BBFA' : '#624FBE'} fillOpacity={0} strokeWidth={2} />\n        </AreaChart>\n      </ResponsiveContainer>\n    </ChartContainer>;\n}",...null===(_TVL_parameters1=TVL.parameters)||void 0===_TVL_parameters1||null===(_TVL_parameters_docs=_TVL_parameters1.docs)||void 0===_TVL_parameters_docs?void 0:_TVL_parameters_docs.source}}},Volume.parameters={...Volume.parameters,docs:{...null===(_Volume_parameters=Volume.parameters)||void 0===_Volume_parameters?void 0:_Volume_parameters.docs,source:{originalSource:"() => {\n  const [currentVolumeValue] = useState(8.56);\n  const [volumeDate, setVolumeDate] = useState(null);\n  const [volumeValue, setVolumeValue] = useState(null);\n  const [volumeDataType, setVolumeDataType] = useState('week');\n  const [isDarkMode] = useState(false);\n  const volumeData = useMemo(() => {\n    const data = [];\n    for (let i = 0; i < 200; i++) {\n      data.push({\n        date: new Date(Date.now() + i * 24 * 60 * 60 * 1000),\n        value: Math.floor(Math.random() * 20) + 1\n      });\n    }\n    return data;\n  }, []);\n  return <ChartContainer heading=\"Volume 24H\" currentValue={currentVolumeValue} value={volumeValue} date={volumeDate} filterType=\"days\" daysFilterType={volumeDataType} setDaysFilterType={setVolumeDataType}>\n      <ResponsiveContainer width=\"100%\" height={180}>\n        <BarChart data={volumeData} onMouseLeave={() => {\n        setVolumeValue && setVolumeValue(null);\n        setVolumeDate && setVolumeDate(null);\n      }}>\n          <XAxis dataKey=\"date\" tickFormatter={date => new Date(date).toLocaleDateString('en-US', {\n          day: 'numeric'\n        })} strokeOpacity={0} tick={{\n          fontSize: '16px',\n          fill: '#9CA0B0',\n          fontWeight: 400\n        }} tickMargin={16} />\n          <Tooltip contentStyle={{\n          display: 'none'\n        }} content={({\n          active,\n          payload\n        }) => {\n          if (active && payload && payload.length) {\n            setVolumeValue && setVolumeValue(payload[0].payload['value']);\n            setVolumeDate && setVolumeDate(payload[0].payload['date']);\n          }\n          return null;\n        }} />\n          <Bar dataKey=\"value\" fill={isDarkMode ? '#81B3F6' : '#3D7BCE'} />\n        </BarChart>\n      </ResponsiveContainer>\n    </ChartContainer>;\n}",...null===(_Volume_parameters1=Volume.parameters)||void 0===_Volume_parameters1||null===(_Volume_parameters_docs=_Volume_parameters1.docs)||void 0===_Volume_parameters_docs?void 0:_Volume_parameters_docs.source}}};const __namedExportsOrder=["TVL","Volume"]}}]);