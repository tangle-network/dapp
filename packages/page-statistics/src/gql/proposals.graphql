query Proposals(
  # The number of proposals to return
  $perPage: Int!
  # The number of proposals to skip
  $offset: Int!
) {
  proposalItems(first: $perPage, offset: $offset) {
    nodes {
      ...ProposalListView
    }
    totalCount
    pageInfo {
      ...PageInfoMeta
    }
  }
}

query ProposalsCounter(
  #  Proposal counter id
  $id: String!
) {
  proposalCounter(id: $id) {
    id
    signedProposalsMap
    unSignedProposalsMap

    signedProposalsCount
    unSignedProposalsCount

    statusMap

    block {
      number
      timestamp
    }
  }
}



query ProposalsOverview($startRange: BigFloatFilter!, $endRange: BigFloatFilter!, $sessionId: String!) {
  session(id: $sessionId) {
    id
    proposerThreshold

    sessionProposers {
      totalCount
    }
    sessionValidators {
      totalCount
    }
  }
  openProposals: proposalItems(filter: { status: { equalTo: "Open" } }, orderBy: [BLOCK_NUMBER_DESC], first: 10) {
    nodes {
      ...ProposalListView
    }
    pageInfo {
      ...PageInfoMeta
    }
    totalCount
  }

  open: proposalTimelineStatuses(
    filter: { status: { equalTo: Open }, and: [{ blockNumber: $startRange }, { blockNumber: $endRange }] }
  ) {
    totalCount
  }

  signed: proposalTimelineStatuses(
    filter: { status: { equalTo: Signed }, and: [{ blockNumber: $startRange }, { blockNumber: $endRange }] }
  ) {
    totalCount
  }

  reject: proposalTimelineStatuses(
    filter: { status: { equalTo: Rejected }, and: [{ blockNumber: $startRange }, { blockNumber: $endRange }] }
  ) {
    totalCount
  }

  accepted: proposalTimelineStatuses(
    filter: { status: { equalTo: Accepted }, and: [{ blockNumber: $startRange }, { blockNumber: $endRange }] }
  ) {
    totalCount
  }
}


query ProposalVotes(
  # The number of votes to return
  $perPage: Int!
  # The number of votes to skip
  $offset: Int!
  # The proposal id
  $proposalId: String!

  $for: BooleanFilter
) {
  proposalVotes(filter: {
    proposalId: { equalTo: $proposalId }
    for: $for
  }
    orderBy: [BLOCK_NUMBER_DESC]
    first: $perPage
    offset: $offset
  ){
    nodes {
      ...ProposalsVoteListView
    }
    totalCount
    pageInfo {
      ...PageInfoMeta
    }
  }
}

query ProposalDetails(
  $id: String!
  # Session for votes status
  $targetSessionId: String!
) {
  session(id: $targetSessionId) {
    id
    sessionProposers {
      totalCount
    }
  }

  proposalItem(id: $id) {
    id
    data
    signature
    type
    status
    proposalTimelineStatuses {
      nodes {
        id
        status
        blockNumber
        timestamp
      }
    }

    votesFor: proposalVotesByProposalId(filter: { for: { equalTo: true } }) {
      totalCount
    }
    totalVotes: proposalVotesByProposalId {

      totalCount
    }

    block {
      timestamp
      number
    }
  }
}
