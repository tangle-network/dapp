/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import { BigNumberish, Signer } from 'ethers';

import { MerkleTreeWithHistoryMock } from './MerkleTreeWithHistoryMock';

export class MerkleTreeWithHistoryMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_treeLevels: BigNumberish, _hasher: string, overrides?: Overrides): Promise<MerkleTreeWithHistoryMock> {
    return super.deploy(_treeLevels, _hasher, overrides || {}) as Promise<MerkleTreeWithHistoryMock>;
  }
  getDeployTransaction(_treeLevels: BigNumberish, _hasher: string, overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(_treeLevels, _hasher, overrides || {});
  }
  attach(address: string): MerkleTreeWithHistoryMock {
    return super.attach(address) as MerkleTreeWithHistoryMock;
  }
  connect(signer: Signer): MerkleTreeWithHistoryMockFactory {
    return super.connect(signer) as MerkleTreeWithHistoryMockFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MerkleTreeWithHistoryMock {
    return new Contract(address, _abi, signerOrProvider) as MerkleTreeWithHistoryMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_treeLevels',
        type: 'uint32',
      },
      {
        internalType: 'contract IHasher',
        name: '_hasher',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'FIELD_SIZE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ROOT_HISTORY_SIZE',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ZERO_VALUE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'currentRootIndex',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'filledSubtrees',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getLastRoot',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IHasher',
        name: '_hasher',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: '_left',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: '_right',
        type: 'bytes32',
      },
    ],
    name: 'hashLeftRight',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasher',
    outputs: [
      {
        internalType: 'contract IHasher',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '_root',
        type: 'bytes32',
      },
    ],
    name: 'isKnownRoot',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'levels',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'nextIndex',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'roots',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'i',
        type: 'uint256',
      },
    ],
    name: 'zeros',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '_leaf',
        type: 'bytes32',
      },
    ],
    name: 'insert',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '';
