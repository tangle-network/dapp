/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Overrides } from '@ethersproject/contracts';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import { BigNumberish, Signer } from 'ethers';

import { MerkleTreeWithHistory } from './MerkleTreeWithHistory';

export class MerkleTreeWithHistoryFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_levels: BigNumberish, _hasher: string, overrides?: Overrides): Promise<MerkleTreeWithHistory> {
    return super.deploy(_levels, _hasher, overrides || {}) as Promise<MerkleTreeWithHistory>;
  }
  getDeployTransaction(_levels: BigNumberish, _hasher: string, overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(_levels, _hasher, overrides || {});
  }
  attach(address: string): MerkleTreeWithHistory {
    return super.attach(address) as MerkleTreeWithHistory;
  }
  connect(signer: Signer): MerkleTreeWithHistoryFactory {
    return super.connect(signer) as MerkleTreeWithHistoryFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MerkleTreeWithHistory {
    return new Contract(address, _abi, signerOrProvider) as MerkleTreeWithHistory;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_levels',
        type: 'uint32',
      },
      {
        internalType: 'contract IHasher',
        name: '_hasher',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'FIELD_SIZE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ROOT_HISTORY_SIZE',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ZERO_VALUE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'currentRootIndex',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'filledSubtrees',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasher',
    outputs: [
      {
        internalType: 'contract IHasher',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'levels',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'nextIndex',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'roots',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IHasher',
        name: '_hasher',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: '_left',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: '_right',
        type: 'bytes32',
      },
    ],
    name: 'hashLeftRight',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '_root',
        type: 'bytes32',
      },
    ],
    name: 'isKnownRoot',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getLastRoot',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'i',
        type: 'uint256',
      },
    ],
    name: 'zeros',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '';
