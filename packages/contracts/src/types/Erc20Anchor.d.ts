/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, PayableOverrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface Erc20AnchorInterface extends ethers.utils.Interface {
  functions: {
    'FIELD_SIZE()': FunctionFragment;
    'ROOT_HISTORY_SIZE()': FunctionFragment;
    'ZERO_VALUE()': FunctionFragment;
    'commitments(bytes32)': FunctionFragment;
    'currentRootIndex()': FunctionFragment;
    'denomination()': FunctionFragment;
    'deposit(bytes32)': FunctionFragment;
    'filledSubtrees(uint256)': FunctionFragment;
    'getLastRoot()': FunctionFragment;
    'hashLeftRight(address,bytes32,bytes32)': FunctionFragment;
    'hasher()': FunctionFragment;
    'isKnownRoot(bytes32)': FunctionFragment;
    'isSpent(bytes32)': FunctionFragment;
    'isSpentArray(bytes32[])': FunctionFragment;
    'levels()': FunctionFragment;
    'nextIndex()': FunctionFragment;
    'nullifierHashes(bytes32)': FunctionFragment;
    'roots(uint256)': FunctionFragment;
    'token()': FunctionFragment;
    'verifier()': FunctionFragment;
    'withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)': FunctionFragment;
    'zeros(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'FIELD_SIZE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ROOT_HISTORY_SIZE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ZERO_VALUE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'commitments', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'currentRootIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'denomination', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'filledSubtrees', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getLastRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hashLeftRight', values: [string, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'hasher', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isKnownRoot', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'isSpent', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'isSpentArray', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'levels', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nullifierHashes', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'roots', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'verifier', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BytesLike, BytesLike, BytesLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'zeros', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'FIELD_SIZE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ROOT_HISTORY_SIZE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ZERO_VALUE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commitments', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentRootIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'denomination', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'filledSubtrees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hashLeftRight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasher', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isKnownRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSpent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSpentArray', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'levels', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nullifierHashes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'zeros', data: BytesLike): Result;

  events: {
    'Deposit(bytes32,uint32,uint256)': EventFragment;
    'Withdrawal(address,bytes32,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawal'): EventFragment;
}

export class Erc20Anchor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Erc20AnchorInterface;

  functions: {
    FIELD_SIZE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'FIELD_SIZE()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ROOT_HISTORY_SIZE(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'ROOT_HISTORY_SIZE()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    ZERO_VALUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'ZERO_VALUE()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'commitments(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    currentRootIndex(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'currentRootIndex()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    denomination(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'denomination()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    deposit(_commitment: BytesLike, overrides?: PayableOverrides): Promise<ContractTransaction>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    'deposit(bytes32)'(_commitment: BytesLike, overrides?: PayableOverrides): Promise<ContractTransaction>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'filledSubtrees(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the last root
     */
    getLastRoot(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the last root
     */
    'getLastRoot()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    hashLeftRight(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    'hashLeftRight(address,bytes32,bytes32)'(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    hasher(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'hasher()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Whether the root is present in the root history
     */
    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Whether the root is present in the root history
     */
    'isKnownRoot(bytes32)'(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * whether a note is already spent
     */
    isSpent(
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * whether a note is already spent
     */
    'isSpent(bytes32)'(
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * whether an array of notes is already spent
     */
    isSpentArray(
      _nullifierHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      spent: boolean[];
      0: boolean[];
    }>;

    /**
     * whether an array of notes is already spent
     */
    'isSpentArray(bytes32[])'(
      _nullifierHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      spent: boolean[];
      0: boolean[];
    }>;

    levels(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'levels()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    nextIndex(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'nextIndex()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'nullifierHashes(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    roots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'roots(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'token()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    verifier(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'verifier()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    withdraw(
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    'withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)'(
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    zeros(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    'zeros(uint256)'(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  'FIELD_SIZE()'(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

  'ROOT_HISTORY_SIZE()'(overrides?: CallOverrides): Promise<number>;

  ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  'ZERO_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

  commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'commitments(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  currentRootIndex(overrides?: CallOverrides): Promise<number>;

  'currentRootIndex()'(overrides?: CallOverrides): Promise<number>;

  denomination(overrides?: CallOverrides): Promise<BigNumber>;

  'denomination()'(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
   * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
   */
  deposit(_commitment: BytesLike, overrides?: PayableOverrides): Promise<ContractTransaction>;

  /**
   * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
   * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
   */
  'deposit(bytes32)'(_commitment: BytesLike, overrides?: PayableOverrides): Promise<ContractTransaction>;

  filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'filledSubtrees(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the last root
   */
  getLastRoot(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the last root
   */
  'getLastRoot()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Hash 2 tree leaves, returns MiMC(_left, _right)
   */
  hashLeftRight(_hasher: string, _left: BytesLike, _right: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Hash 2 tree leaves, returns MiMC(_left, _right)
   */
  'hashLeftRight(address,bytes32,bytes32)'(
    _hasher: string,
    _left: BytesLike,
    _right: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hasher(overrides?: CallOverrides): Promise<string>;

  'hasher()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Whether the root is present in the root history
   */
  isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Whether the root is present in the root history
   */
  'isKnownRoot(bytes32)'(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * whether a note is already spent
   */
  isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * whether a note is already spent
   */
  'isSpent(bytes32)'(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * whether an array of notes is already spent
   */
  isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<boolean[]>;

  /**
   * whether an array of notes is already spent
   */
  'isSpentArray(bytes32[])'(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<boolean[]>;

  levels(overrides?: CallOverrides): Promise<number>;

  'levels()'(overrides?: CallOverrides): Promise<number>;

  nextIndex(overrides?: CallOverrides): Promise<number>;

  'nextIndex()'(overrides?: CallOverrides): Promise<number>;

  nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'nullifierHashes(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'roots(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  'token()'(overrides?: CallOverrides): Promise<string>;

  verifier(overrides?: CallOverrides): Promise<string>;

  'verifier()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
   */
  withdraw(
    _proof: BytesLike,
    _root: BytesLike,
    _nullifierHash: BytesLike,
    _recipient: string,
    _relayer: string,
    _fee: BigNumberish,
    _refund: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
   */
  'withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)'(
    _proof: BytesLike,
    _root: BytesLike,
    _nullifierHash: BytesLike,
    _recipient: string,
    _relayer: string,
    _fee: BigNumberish,
    _refund: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
   */
  zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
   */
  'zeros(uint256)'(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    'FIELD_SIZE()'(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

    'ROOT_HISTORY_SIZE()'(overrides?: CallOverrides): Promise<number>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    'ZERO_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'commitments(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    currentRootIndex(overrides?: CallOverrides): Promise<number>;

    'currentRootIndex()'(overrides?: CallOverrides): Promise<number>;

    denomination(overrides?: CallOverrides): Promise<BigNumber>;

    'denomination()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    deposit(_commitment: BytesLike, overrides?: CallOverrides): Promise<void>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    'deposit(bytes32)'(_commitment: BytesLike, overrides?: CallOverrides): Promise<void>;

    filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'filledSubtrees(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the last root
     */
    getLastRoot(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the last root
     */
    'getLastRoot()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    hashLeftRight(_hasher: string, _left: BytesLike, _right: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    'hashLeftRight(address,bytes32,bytes32)'(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hasher(overrides?: CallOverrides): Promise<string>;

    'hasher()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Whether the root is present in the root history
     */
    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Whether the root is present in the root history
     */
    'isKnownRoot(bytes32)'(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * whether a note is already spent
     */
    isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * whether a note is already spent
     */
    'isSpent(bytes32)'(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * whether an array of notes is already spent
     */
    isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<boolean[]>;

    /**
     * whether an array of notes is already spent
     */
    'isSpentArray(bytes32[])'(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<boolean[]>;

    levels(overrides?: CallOverrides): Promise<number>;

    'levels()'(overrides?: CallOverrides): Promise<number>;

    nextIndex(overrides?: CallOverrides): Promise<number>;

    'nextIndex()'(overrides?: CallOverrides): Promise<number>;

    nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'nullifierHashes(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'roots(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    'token()'(overrides?: CallOverrides): Promise<string>;

    verifier(overrides?: CallOverrides): Promise<string>;

    'verifier()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    withdraw(
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    'withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)'(
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    'zeros(uint256)'(i: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Deposit(commitment: BytesLike | null, leafIndex: null, timestamp: null): EventFilter;

    Withdrawal(to: null, nullifierHash: null, relayer: string | null, fee: null): EventFilter;
  };

  estimateGas: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    'FIELD_SIZE()'(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    'ROOT_HISTORY_SIZE()'(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    'ZERO_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'commitments(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    currentRootIndex(overrides?: CallOverrides): Promise<BigNumber>;

    'currentRootIndex()'(overrides?: CallOverrides): Promise<BigNumber>;

    denomination(overrides?: CallOverrides): Promise<BigNumber>;

    'denomination()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    deposit(_commitment: BytesLike, overrides?: PayableOverrides): Promise<BigNumber>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    'deposit(bytes32)'(_commitment: BytesLike, overrides?: PayableOverrides): Promise<BigNumber>;

    filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'filledSubtrees(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the last root
     */
    getLastRoot(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the last root
     */
    'getLastRoot()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    hashLeftRight(_hasher: string, _left: BytesLike, _right: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    'hashLeftRight(address,bytes32,bytes32)'(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasher(overrides?: CallOverrides): Promise<BigNumber>;

    'hasher()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Whether the root is present in the root history
     */
    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Whether the root is present in the root history
     */
    'isKnownRoot(bytes32)'(_root: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * whether a note is already spent
     */
    isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * whether a note is already spent
     */
    'isSpent(bytes32)'(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * whether an array of notes is already spent
     */
    isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * whether an array of notes is already spent
     */
    'isSpentArray(bytes32[])'(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    levels(overrides?: CallOverrides): Promise<BigNumber>;

    'levels()'(overrides?: CallOverrides): Promise<BigNumber>;

    nextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    'nextIndex()'(overrides?: CallOverrides): Promise<BigNumber>;

    nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'nullifierHashes(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'roots(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    'token()'(overrides?: CallOverrides): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    'verifier()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    withdraw(
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    'withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)'(
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    'zeros(uint256)'(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'FIELD_SIZE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'ROOT_HISTORY_SIZE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'ZERO_VALUE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'commitments(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRootIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'currentRootIndex()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    denomination(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'denomination()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    deposit(_commitment: BytesLike, overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    /**
     * Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.
     * @param _commitment the note commitment, which is PedersenHash(nullifier + secret)
     */
    'deposit(bytes32)'(_commitment: BytesLike, overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'filledSubtrees(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the last root
     */
    getLastRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the last root
     */
    'getLastRoot()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    hashLeftRight(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Hash 2 tree leaves, returns MiMC(_left, _right)
     */
    'hashLeftRight(address,bytes32,bytes32)'(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'hasher()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Whether the root is present in the root history
     */
    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Whether the root is present in the root history
     */
    'isKnownRoot(bytes32)'(_root: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * whether a note is already spent
     */
    isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * whether a note is already spent
     */
    'isSpent(bytes32)'(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * whether an array of notes is already spent
     */
    isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * whether an array of notes is already spent
     */
    'isSpentArray(bytes32[])'(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    levels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'levels()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nextIndex()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nullifierHashes(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'roots(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'token()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'verifier()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    withdraw(
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)
     */
    'withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)'(
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels
     */
    'zeros(uint256)'(i: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
