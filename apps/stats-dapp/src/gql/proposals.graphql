# Proposals listing query
query Proposals(
  # The number of proposals to return
  $perPage: Int!
  # The number of proposals to skip
  $offset: Int!
  $filter: ProposalItemFilter
) {
  # Listing proposals items
  proposalItems(filter: $filter, orderBy: [BLOCK_NUMBER_DESC], first: $perPage, offset: $offset) {
    nodes {
      ...ProposalListView
    }
    totalCount
    pageInfo {
      ...PageInfoMeta
    }
  }
}

query ProposalsCounter(
    #  Proposal counter id
    $id: String!
) {
    proposalCounter(id: $id) {
        id
        signedProposalsMap
        unSignedProposalsMap

        signedProposalsCount
        unSignedProposalsCount

        statusMap

        block {
            number
            timestamp
        }
    }
}

# Proposals over view query
query ProposalsOverview(
  # Starting block number value for the stats start
  $startRange: BigFloatFilter
  # Ending block number value for the stats start
  $endRange: BigFloatFilter
  # Session id for threshold and proposers stats
  $sessionId: String!
) {
  session(id: $sessionId) {
    id
    thresholds {
      ...ThresholdValue
    }

    sessionProposers {
      totalCount
    }
    sessionValidators {
      totalCount
    }
  }
  # Opn Proposals fetching only the recent 10 elements
  openProposals: proposalItems(filter: { status: { equalTo: "Open" } }, orderBy: [BLOCK_NUMBER_DESC], first: 10) {
    nodes {
      ...ProposalListView
    }
    pageInfo {
      ...PageInfoMeta
    }
    totalCount
  }
  # Open proposals count for a range for block numbers
  open: proposalTimelineStatuses(
    filter: { status: { equalTo: Open }, and: [{ blockNumber: $startRange }, { blockNumber: $endRange }] }
  ) {
    totalCount
  }
  # Signed proposals count for a range for block numbers
  signed: proposalTimelineStatuses(
    filter: { status: { equalTo: Signed }, and: [{ blockNumber: $startRange }, { blockNumber: $endRange }] }
  ) {
    totalCount
  }
  # Rejected proposals count for a range for block numbers
  reject: proposalTimelineStatuses(
    filter: { status: { equalTo: Rejected }, and: [{ blockNumber: $startRange }, { blockNumber: $endRange }] }
  ) {
    totalCount
  }
  # Accepted proposals count for a range for block numbers
  accepted: proposalTimelineStatuses(
    filter: { status: { equalTo: Accepted }, and: [{ blockNumber: $startRange }, { blockNumber: $endRange }] }
  ) {
    totalCount
  }
}

# Query votes for a prooser
query ProposalVotes(
  # The number of votes to return
  $perPage: Int!
  # The number of votes to skip
  $offset: Int!
  # The proposal id
  $proposalId: String!
  $for: AppEnumFe385C7221Filter
) {
  proposalVotes(
    filter: { proposalId: { equalTo: $proposalId }, voteStatus: $for }
    orderBy: [BLOCK_NUMBER_DESC]
    first: $perPage
    offset: $offset
  ) {
    nodes {
      ...ProposalsVoteListView
    }
    totalCount
    pageInfo {
      ...PageInfoMeta
    }
  }
}
# Proposals details query
query ProposalDetails(
  # Proposal id
  $id: String!
  # Session for votes status
  $targetSessionId: String!
) {
  session(id: $targetSessionId) {
    id
    sessionProposers {
      totalCount
    }
  }

  proposalItem(id: $id) {
    id
    data
    signature
    type
    status
    chainId
    proposalTimelineStatuses {
      nodes {
        id
        blockNumber
        status
        timestamp
      }
    }

    votesFor: proposalVotesByProposalId(filter: { voteStatus: { equalTo: FOR } }) {
      totalCount
    }
    against: proposalVotesByProposalId(filter: { voteStatus: { equalTo: AGAINST } }) {
      totalCount
    }
    abstain: proposalVotesByProposalId(filter: { voteStatus: { equalTo: ABSTAIN } }) {
      totalCount
    }
    totalVotes: proposalVotesByProposalId {
      totalCount
    }
    block {
      timestamp
      number
    }
  }
}

query ensureProposals($ids: [String!]!) {
  proposalItems(filter: { id: { in: $ids } }) {
    nodes {
      id
    }
  }
}
