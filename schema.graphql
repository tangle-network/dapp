# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"An object with a globally unique `ID`."
interface Node {
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
}

type Account implements Node {
    "Reads and enables pagination through a set of `Account`."
    accountsByCreatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "Reads and enables pagination through a set of `Block`."
    blocksByAccountCreatorIdAndCreateAtBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountBlocksByAccountCreatorIdAndCreateAtBlockIdManyToManyConnection!
    "Reads and enables pagination through a set of `Block`."
    blocksByExtrinsicSignerIdAndBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyConnection!
    "Reads a single `CountryCode` that is related to this `Account`."
    countryCode: CountryCode
    countryCodeId: String
    "Reads and enables pagination through a set of `CountryCode`."
    countryCodesByAccountCreatorIdAndCountryCodeId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: CountryCodeFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `CountryCode`."
        orderBy: [CountryCodesOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountCountryCodesByAccountCreatorIdAndCountryCodeIdManyToManyConnection!
    "Reads a single `Block` that is related to this `Account`."
    createAtBlock: Block
    createAtBlockId: String
    createdAt: String
    "Reads a single `Account` that is related to this `Account`."
    creator: Account
    creatorId: String
    display: String
    email: String
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection!
    "Reads and enables pagination through a set of `HeartBeat`."
    heartBeats(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: HeartBeatFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `HeartBeat`."
        orderBy: [HeartBeatsOrderBy!] = [PRIMARY_KEY_ASC]
    ): HeartBeatsConnection!
    id: String!
    image: String
    legal: String
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    pgpFingerprint: String
    "Reads and enables pagination through a set of `Proposer`."
    proposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Proposer`."
        orderBy: [ProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposersConnection!
    riot: String
    "Reads and enables pagination through a set of `Session`."
    sessionsByHeartBeatAccountIdAndSessionId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountSessionsByHeartBeatAccountIdAndSessionIdManyToManyConnection!
    twitter: String
    "Reads and enables pagination through a set of `Validator`."
    validators(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ValidatorFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Validator`."
        orderBy: [ValidatorsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ValidatorsConnection!
    web: String
}

type AccountAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: AccountDistinctCountAggregates
    keys: [String!]
}

"A connection to a list of `Block` values, with data from `Account`."
type AccountBlocksByAccountCreatorIdAndCreateAtBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Account`, and the cursor to aid in pagination."
    edges: [AccountBlocksByAccountCreatorIdAndCreateAtBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Account`."
type AccountBlocksByAccountCreatorIdAndCreateAtBlockIdManyToManyEdge {
    "Reads and enables pagination through a set of `Account`."
    accountsByCreateAtBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
}

"A connection to a list of `Block` values, with data from `Extrinsic`."
type AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Extrinsic`, and the cursor to aid in pagination."
    edges: [AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Extrinsic`."
type AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection!
    "The `Block` at the end of the edge."
    node: Block
}

"A connection to a list of `CountryCode` values, with data from `Account`."
type AccountCountryCodesByAccountCreatorIdAndCountryCodeIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: CountryCodeAggregates
    "A list of edges which contains the `CountryCode`, info from the `Account`, and the cursor to aid in pagination."
    edges: [AccountCountryCodesByAccountCreatorIdAndCountryCodeIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `CountryCode` for these aggregates."
        groupBy: [CountryCodesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: CountryCodesHavingInput
    ): [CountryCodeAggregates!]
    "A list of `CountryCode` objects."
    nodes: [CountryCode]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `CountryCode` you could get from the connection."
    totalCount: Int!
}

"A `CountryCode` edge in the connection, with data from `Account`."
type AccountCountryCodesByAccountCreatorIdAndCountryCodeIdManyToManyEdge {
    "Reads and enables pagination through a set of `Account`."
    accounts(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "A cursor for use in pagination."
    cursor: Cursor
    "The `CountryCode` at the end of the edge."
    node: CountryCode
}

type AccountDistinctCountAggregates {
    "Distinct count of countryCodeId across the matching connection"
    countryCodeId: BigInt
    "Distinct count of createAtBlockId across the matching connection"
    createAtBlockId: BigInt
    "Distinct count of createdAt across the matching connection"
    createdAt: BigInt
    "Distinct count of creatorId across the matching connection"
    creatorId: BigInt
    "Distinct count of display across the matching connection"
    display: BigInt
    "Distinct count of email across the matching connection"
    email: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of image across the matching connection"
    image: BigInt
    "Distinct count of legal across the matching connection"
    legal: BigInt
    "Distinct count of pgpFingerprint across the matching connection"
    pgpFingerprint: BigInt
    "Distinct count of riot across the matching connection"
    riot: BigInt
    "Distinct count of twitter across the matching connection"
    twitter: BigInt
    "Distinct count of web across the matching connection"
    web: BigInt
}

"A connection to a list of `Session` values, with data from `HeartBeat`."
type AccountSessionsByHeartBeatAccountIdAndSessionIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SessionAggregates
    "A list of edges which contains the `Session`, info from the `HeartBeat`, and the cursor to aid in pagination."
    edges: [AccountSessionsByHeartBeatAccountIdAndSessionIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Session` for these aggregates."
        groupBy: [SessionsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SessionsHavingInput
    ): [SessionAggregates!]
    "A list of `Session` objects."
    nodes: [Session]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Session` you could get from the connection."
    totalCount: Int!
}

"A `Session` edge in the connection, with data from `HeartBeat`."
type AccountSessionsByHeartBeatAccountIdAndSessionIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `HeartBeat`."
    heartBeats(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: HeartBeatFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `HeartBeat`."
        orderBy: [HeartBeatsOrderBy!] = [PRIMARY_KEY_ASC]
    ): HeartBeatsConnection!
    "The `Session` at the end of the edge."
    node: Session
}

"A connection to a list of `Account` values."
type AccountsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AccountAggregates
    "A list of edges which contains the `Account` and cursor to aid in pagination."
    edges: [AccountsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Account` for these aggregates."
        groupBy: [AccountsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AccountsHavingInput
    ): [AccountAggregates!]
    "A list of `Account` objects."
    nodes: [Account]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Account` you could get from the connection."
    totalCount: Int!
}

"A `Account` edge in the connection."
type AccountsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Account` at the end of the edge."
    node: Account
}

"A connection to a list of `Authority` values."
type AuthoritiesConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AuthorityAggregates
    "A list of edges which contains the `Authority` and cursor to aid in pagination."
    edges: [AuthoritiesEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Authority` for these aggregates."
        groupBy: [AuthoritiesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AuthoritiesHavingInput
    ): [AuthorityAggregates!]
    "A list of `Authority` objects."
    nodes: [Authority]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Authority` you could get from the connection."
    totalCount: Int!
}

"A `Authority` edge in the connection."
type AuthoritiesEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Authority` at the end of the edge."
    node: Authority
}

type Authority implements Node {
    "Reads a single `Block` that is related to this `Authority`."
    block: Block
    blockId: String!
    current: JSON
    id: String!
    next: JSON
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
}

type AuthorityAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: AuthorityDistinctCountAggregates
    keys: [String!]
}

type AuthorityDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of current across the matching connection"
    current: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of next across the matching connection"
    next: BigInt
}

type Block implements Node {
    "Reads and enables pagination through a set of `Account`."
    accountsByAccountCreateAtBlockIdAndCreatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockAccountsByAccountCreateAtBlockIdAndCreatorIdManyToManyConnection!
    "Reads and enables pagination through a set of `Account`."
    accountsByCreateAtBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "Reads and enables pagination through a set of `Account`."
    accountsByExtrinsicBlockIdAndSignerId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyConnection!
    "Reads and enables pagination through a set of `Authority`."
    authorities(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AuthorityFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Authority`."
        orderBy: [AuthoritiesOrderBy!] = [PRIMARY_KEY_ASC]
    ): AuthoritiesConnection!
    "Reads and enables pagination through a set of `CountryCode`."
    countryCodesByAccountCreateAtBlockIdAndCountryCodeId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: CountryCodeFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `CountryCode`."
        orderBy: [CountryCodesOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockCountryCodesByAccountCreateAtBlockIdAndCountryCodeIdManyToManyConnection!
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection!
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection!
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsicsByEventBlockIdAndExtrinsicId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyConnection!
    extrinsicsRoot: String
    hash: String
    id: String!
    "Reads and enables pagination through a set of `KeygenThreshold`."
    keygenThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: KeygenThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `KeygenThreshold`."
        orderBy: [KeygenThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): KeygenThresholdsConnection!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    number: BigFloat!
    parentHash: String
    "Reads and enables pagination through a set of `ProposalCounter`."
    proposalCounters(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalCounterFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalCounter`."
        orderBy: [ProposalCountersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalCountersConnection!
    "Reads and enables pagination through a set of `ProposalItem`."
    proposalItems(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalItem`."
        orderBy: [ProposalItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalItemsConnection!
    "Reads and enables pagination through a set of `ProposalItem`."
    proposalItemsByProposalVoteBlockIdAndProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalItem`."
        orderBy: [ProposalItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockProposalItemsByProposalVoteBlockIdAndProposalIdManyToManyConnection!
    "Reads and enables pagination through a set of `ProposalVote`."
    proposalVotes(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
    "Reads and enables pagination through a set of `ProposerThreshold`."
    proposerThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposerThreshold`."
        orderBy: [ProposerThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposerThresholdsConnection!
    "Reads and enables pagination through a set of `Proposer`."
    proposersByProposalVoteBlockIdAndVoterId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Proposer`."
        orderBy: [ProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockProposersByProposalVoteBlockIdAndVoterIdManyToManyConnection!
    "Reads and enables pagination through a set of `PublicKey`."
    publicKeys(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: PublicKeyFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `PublicKey`."
        orderBy: [PublicKeysOrderBy!] = [PRIMARY_KEY_ASC]
    ): PublicKeysConnection!
    "Reads and enables pagination through a set of `PublicKey`."
    publicKeysBySessionBlockIdAndPublicKeyId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: PublicKeyFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `PublicKey`."
        orderBy: [PublicKeysOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockPublicKeysBySessionBlockIdAndPublicKeyIdManyToManyConnection!
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection!
    "Reads and enables pagination through a set of `SignatureThreshold`."
    signatureThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SignatureThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SignatureThreshold`."
        orderBy: [SignatureThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SignatureThresholdsConnection!
    specVersion: String
    stateRoot: String
    timestamp: Datetime
    "Reads and enables pagination through a set of `UnsignedProposalsQueue`."
    unsignedProposalsQueues(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueue`."
        orderBy: [UnsignedProposalsQueuesOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueuesConnection!
}

"A connection to a list of `Account` values, with data from `Account`."
type BlockAccountsByAccountCreateAtBlockIdAndCreatorIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AccountAggregates
    "A list of edges which contains the `Account`, info from the `Account`, and the cursor to aid in pagination."
    edges: [BlockAccountsByAccountCreateAtBlockIdAndCreatorIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Account` for these aggregates."
        groupBy: [AccountsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AccountsHavingInput
    ): [AccountAggregates!]
    "A list of `Account` objects."
    nodes: [Account]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Account` you could get from the connection."
    totalCount: Int!
}

"A `Account` edge in the connection, with data from `Account`."
type BlockAccountsByAccountCreateAtBlockIdAndCreatorIdManyToManyEdge {
    "Reads and enables pagination through a set of `Account`."
    accountsByCreatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Account` at the end of the edge."
    node: Account
}

"A connection to a list of `Account` values, with data from `Extrinsic`."
type BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AccountAggregates
    "A list of edges which contains the `Account`, info from the `Extrinsic`, and the cursor to aid in pagination."
    edges: [BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Account` for these aggregates."
        groupBy: [AccountsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AccountsHavingInput
    ): [AccountAggregates!]
    "A list of `Account` objects."
    nodes: [Account]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Account` you could get from the connection."
    totalCount: Int!
}

"A `Account` edge in the connection, with data from `Extrinsic`."
type BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection!
    "The `Account` at the end of the edge."
    node: Account
}

type BlockAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: BlockAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: BlockDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: BlockMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: BlockMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: BlockStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: BlockStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: BlockSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: BlockVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: BlockVarianceSampleAggregates
}

type BlockAverageAggregates {
    "Mean average of number across the matching connection"
    number: BigFloat
}

"A connection to a list of `CountryCode` values, with data from `Account`."
type BlockCountryCodesByAccountCreateAtBlockIdAndCountryCodeIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: CountryCodeAggregates
    "A list of edges which contains the `CountryCode`, info from the `Account`, and the cursor to aid in pagination."
    edges: [BlockCountryCodesByAccountCreateAtBlockIdAndCountryCodeIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `CountryCode` for these aggregates."
        groupBy: [CountryCodesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: CountryCodesHavingInput
    ): [CountryCodeAggregates!]
    "A list of `CountryCode` objects."
    nodes: [CountryCode]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `CountryCode` you could get from the connection."
    totalCount: Int!
}

"A `CountryCode` edge in the connection, with data from `Account`."
type BlockCountryCodesByAccountCreateAtBlockIdAndCountryCodeIdManyToManyEdge {
    "Reads and enables pagination through a set of `Account`."
    accounts(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "A cursor for use in pagination."
    cursor: Cursor
    "The `CountryCode` at the end of the edge."
    node: CountryCode
}

type BlockDistinctCountAggregates {
    "Distinct count of extrinsicsRoot across the matching connection"
    extrinsicsRoot: BigInt
    "Distinct count of hash across the matching connection"
    hash: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of number across the matching connection"
    number: BigInt
    "Distinct count of parentHash across the matching connection"
    parentHash: BigInt
    "Distinct count of specVersion across the matching connection"
    specVersion: BigInt
    "Distinct count of stateRoot across the matching connection"
    stateRoot: BigInt
    "Distinct count of timestamp across the matching connection"
    timestamp: BigInt
}

"A connection to a list of `Extrinsic` values, with data from `Event`."
type BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ExtrinsicAggregates
    "A list of edges which contains the `Extrinsic`, info from the `Event`, and the cursor to aid in pagination."
    edges: [BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Extrinsic` for these aggregates."
        groupBy: [ExtrinsicsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ExtrinsicsHavingInput
    ): [ExtrinsicAggregates!]
    "A list of `Extrinsic` objects."
    nodes: [Extrinsic]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Extrinsic` you could get from the connection."
    totalCount: Int!
}

"A `Extrinsic` edge in the connection, with data from `Event`."
type BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection!
    "The `Extrinsic` at the end of the edge."
    node: Extrinsic
}

type BlockMaxAggregates {
    "Maximum of number across the matching connection"
    number: BigFloat
}

type BlockMinAggregates {
    "Minimum of number across the matching connection"
    number: BigFloat
}

"A connection to a list of `ProposalItem` values, with data from `ProposalVote`."
type BlockProposalItemsByProposalVoteBlockIdAndProposalIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalItemAggregates
    "A list of edges which contains the `ProposalItem`, info from the `ProposalVote`, and the cursor to aid in pagination."
    edges: [BlockProposalItemsByProposalVoteBlockIdAndProposalIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalItem` for these aggregates."
        groupBy: [ProposalItemsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalItemsHavingInput
    ): [ProposalItemAggregates!]
    "A list of `ProposalItem` objects."
    nodes: [ProposalItem]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalItem` you could get from the connection."
    totalCount: Int!
}

"A `ProposalItem` edge in the connection, with data from `ProposalVote`."
type BlockProposalItemsByProposalVoteBlockIdAndProposalIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalItem` at the end of the edge."
    node: ProposalItem
    "Reads and enables pagination through a set of `ProposalVote`."
    proposalVotesByProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
}

"A connection to a list of `Proposer` values, with data from `ProposalVote`."
type BlockProposersByProposalVoteBlockIdAndVoterIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposerAggregates
    "A list of edges which contains the `Proposer`, info from the `ProposalVote`, and the cursor to aid in pagination."
    edges: [BlockProposersByProposalVoteBlockIdAndVoterIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Proposer` for these aggregates."
        groupBy: [ProposersGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposersHavingInput
    ): [ProposerAggregates!]
    "A list of `Proposer` objects."
    nodes: [Proposer]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Proposer` you could get from the connection."
    totalCount: Int!
}

"A `Proposer` edge in the connection, with data from `ProposalVote`."
type BlockProposersByProposalVoteBlockIdAndVoterIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Proposer` at the end of the edge."
    node: Proposer
    "Reads and enables pagination through a set of `ProposalVote`."
    votes(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
}

"A connection to a list of `PublicKey` values, with data from `Session`."
type BlockPublicKeysBySessionBlockIdAndPublicKeyIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: PublicKeyAggregates
    "A list of edges which contains the `PublicKey`, info from the `Session`, and the cursor to aid in pagination."
    edges: [BlockPublicKeysBySessionBlockIdAndPublicKeyIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `PublicKey` for these aggregates."
        groupBy: [PublicKeysGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: PublicKeysHavingInput
    ): [PublicKeyAggregates!]
    "A list of `PublicKey` objects."
    nodes: [PublicKey]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `PublicKey` you could get from the connection."
    totalCount: Int!
}

"A `PublicKey` edge in the connection, with data from `Session`."
type BlockPublicKeysBySessionBlockIdAndPublicKeyIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `PublicKey` at the end of the edge."
    node: PublicKey
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection!
}

type BlockStddevPopulationAggregates {
    "Population standard deviation of number across the matching connection"
    number: BigFloat
}

type BlockStddevSampleAggregates {
    "Sample standard deviation of number across the matching connection"
    number: BigFloat
}

type BlockSumAggregates {
    "Sum of number across the matching connection"
    number: BigFloat!
}

type BlockVariancePopulationAggregates {
    "Population variance of number across the matching connection"
    number: BigFloat
}

type BlockVarianceSampleAggregates {
    "Sample variance of number across the matching connection"
    number: BigFloat
}

"A connection to a list of `Block` values."
type BlocksConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block` and cursor to aid in pagination."
    edges: [BlocksEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection."
type BlocksEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
}

type CountryCode implements Node {
    "Reads and enables pagination through a set of `Account`."
    accounts(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "Reads and enables pagination through a set of `Account`."
    accountsByAccountCountryCodeIdAndCreatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): CountryCodeAccountsByAccountCountryCodeIdAndCreatorIdManyToManyConnection!
    "Reads and enables pagination through a set of `Block`."
    blocksByAccountCountryCodeIdAndCreateAtBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): CountryCodeBlocksByAccountCountryCodeIdAndCreateAtBlockIdManyToManyConnection!
    code: String!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
}

"A connection to a list of `Account` values, with data from `Account`."
type CountryCodeAccountsByAccountCountryCodeIdAndCreatorIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AccountAggregates
    "A list of edges which contains the `Account`, info from the `Account`, and the cursor to aid in pagination."
    edges: [CountryCodeAccountsByAccountCountryCodeIdAndCreatorIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Account` for these aggregates."
        groupBy: [AccountsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AccountsHavingInput
    ): [AccountAggregates!]
    "A list of `Account` objects."
    nodes: [Account]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Account` you could get from the connection."
    totalCount: Int!
}

"A `Account` edge in the connection, with data from `Account`."
type CountryCodeAccountsByAccountCountryCodeIdAndCreatorIdManyToManyEdge {
    "Reads and enables pagination through a set of `Account`."
    accountsByCreatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Account` at the end of the edge."
    node: Account
}

type CountryCodeAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: CountryCodeDistinctCountAggregates
    keys: [String!]
}

"A connection to a list of `Block` values, with data from `Account`."
type CountryCodeBlocksByAccountCountryCodeIdAndCreateAtBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Account`, and the cursor to aid in pagination."
    edges: [CountryCodeBlocksByAccountCountryCodeIdAndCreateAtBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Account`."
type CountryCodeBlocksByAccountCountryCodeIdAndCreateAtBlockIdManyToManyEdge {
    "Reads and enables pagination through a set of `Account`."
    accountsByCreateAtBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
}

type CountryCodeDistinctCountAggregates {
    "Distinct count of code across the matching connection"
    code: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
}

"A connection to a list of `CountryCode` values."
type CountryCodesConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: CountryCodeAggregates
    "A list of edges which contains the `CountryCode` and cursor to aid in pagination."
    edges: [CountryCodesEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `CountryCode` for these aggregates."
        groupBy: [CountryCodesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: CountryCodesHavingInput
    ): [CountryCodeAggregates!]
    "A list of `CountryCode` objects."
    nodes: [CountryCode]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `CountryCode` you could get from the connection."
    totalCount: Int!
}

"A `CountryCode` edge in the connection."
type CountryCodesEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `CountryCode` at the end of the edge."
    node: CountryCode
}

type Event implements Node {
    arguments: String
    "Reads a single `Block` that is related to this `Event`."
    block: Block
    blockId: String!
    blockNumber: BigFloat!
    data: String
    docs: String
    "Reads a single `Extrinsic` that is related to this `Event`."
    extrinsic: Extrinsic
    extrinsicId: String
    id: String!
    index: Int!
    method: String
    module: String
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    timestamp: Datetime
}

type EventAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: EventAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: EventDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: EventMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: EventMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: EventStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: EventStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: EventSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: EventVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: EventVarianceSampleAggregates
}

type EventAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of index across the matching connection"
    index: BigFloat
}

type EventDistinctCountAggregates {
    "Distinct count of arguments across the matching connection"
    arguments: BigInt
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of data across the matching connection"
    data: BigInt
    "Distinct count of docs across the matching connection"
    docs: BigInt
    "Distinct count of extrinsicId across the matching connection"
    extrinsicId: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of index across the matching connection"
    index: BigInt
    "Distinct count of method across the matching connection"
    method: BigInt
    "Distinct count of module across the matching connection"
    module: BigInt
    "Distinct count of timestamp across the matching connection"
    timestamp: BigInt
}

type EventMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Maximum of index across the matching connection"
    index: Int
}

type EventMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Minimum of index across the matching connection"
    index: Int
}

type EventStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of index across the matching connection"
    index: BigFloat
}

type EventStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of index across the matching connection"
    index: BigFloat
}

type EventSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigFloat!
    "Sum of index across the matching connection"
    index: BigInt!
}

type EventVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of index across the matching connection"
    index: BigFloat
}

type EventVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of index across the matching connection"
    index: BigFloat
}

"A connection to a list of `Event` values."
type EventsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: EventAggregates
    "A list of edges which contains the `Event` and cursor to aid in pagination."
    edges: [EventsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Event` for these aggregates."
        groupBy: [EventsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: EventsHavingInput
    ): [EventAggregates!]
    "A list of `Event` objects."
    nodes: [Event]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Event` you could get from the connection."
    totalCount: Int!
}

"A `Event` edge in the connection."
type EventsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Event` at the end of the edge."
    node: Event
}

type Extrinsic implements Node {
    arguments: String
    "Reads a single `Block` that is related to this `Extrinsic`."
    block: Block
    blockId: String!
    blockNumber: BigFloat!
    "Reads and enables pagination through a set of `Block`."
    blocksByEventExtrinsicIdAndBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyConnection!
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection!
    hash: String!
    id: String!
    index: Int!
    isSigned: Boolean
    isSuccess: Boolean
    method: String
    module: String
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `Account` that is related to this `Extrinsic`."
    signer: Account
    signerId: String
}

type ExtrinsicAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ExtrinsicAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ExtrinsicDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ExtrinsicMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ExtrinsicMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ExtrinsicStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ExtrinsicStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ExtrinsicSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ExtrinsicVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ExtrinsicVarianceSampleAggregates
}

type ExtrinsicAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of index across the matching connection"
    index: BigFloat
}

"A connection to a list of `Block` values, with data from `Event`."
type ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Event`, and the cursor to aid in pagination."
    edges: [ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Event`."
type ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection!
    "The `Block` at the end of the edge."
    node: Block
}

type ExtrinsicDistinctCountAggregates {
    "Distinct count of arguments across the matching connection"
    arguments: BigInt
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of hash across the matching connection"
    hash: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of index across the matching connection"
    index: BigInt
    "Distinct count of isSigned across the matching connection"
    isSigned: BigInt
    "Distinct count of isSuccess across the matching connection"
    isSuccess: BigInt
    "Distinct count of method across the matching connection"
    method: BigInt
    "Distinct count of module across the matching connection"
    module: BigInt
    "Distinct count of signerId across the matching connection"
    signerId: BigInt
}

type ExtrinsicMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Maximum of index across the matching connection"
    index: Int
}

type ExtrinsicMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Minimum of index across the matching connection"
    index: Int
}

type ExtrinsicStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of index across the matching connection"
    index: BigFloat
}

type ExtrinsicStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of index across the matching connection"
    index: BigFloat
}

type ExtrinsicSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigFloat!
    "Sum of index across the matching connection"
    index: BigInt!
}

type ExtrinsicVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of index across the matching connection"
    index: BigFloat
}

type ExtrinsicVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of index across the matching connection"
    index: BigFloat
}

"A connection to a list of `Extrinsic` values."
type ExtrinsicsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ExtrinsicAggregates
    "A list of edges which contains the `Extrinsic` and cursor to aid in pagination."
    edges: [ExtrinsicsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Extrinsic` for these aggregates."
        groupBy: [ExtrinsicsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ExtrinsicsHavingInput
    ): [ExtrinsicAggregates!]
    "A list of `Extrinsic` objects."
    nodes: [Extrinsic]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Extrinsic` you could get from the connection."
    totalCount: Int!
}

"A `Extrinsic` edge in the connection."
type ExtrinsicsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Extrinsic` at the end of the edge."
    node: Extrinsic
}

type HeartBeat implements Node {
    "Reads a single `Account` that is related to this `HeartBeat`."
    account: Account
    accountId: String!
    blockNumber: BigFloat!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `Session` that is related to this `HeartBeat`."
    session: Session
    sessionId: String!
}

type HeartBeatAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: HeartBeatAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: HeartBeatDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: HeartBeatMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: HeartBeatMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: HeartBeatStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: HeartBeatStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: HeartBeatSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: HeartBeatVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: HeartBeatVarianceSampleAggregates
}

type HeartBeatAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type HeartBeatDistinctCountAggregates {
    "Distinct count of accountId across the matching connection"
    accountId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of sessionId across the matching connection"
    sessionId: BigInt
}

type HeartBeatMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type HeartBeatMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type HeartBeatStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type HeartBeatStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type HeartBeatSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigFloat!
}

type HeartBeatVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type HeartBeatVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

"A connection to a list of `HeartBeat` values."
type HeartBeatsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: HeartBeatAggregates
    "A list of edges which contains the `HeartBeat` and cursor to aid in pagination."
    edges: [HeartBeatsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `HeartBeat` for these aggregates."
        groupBy: [HeartBeatsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: HeartBeatsHavingInput
    ): [HeartBeatAggregates!]
    "A list of `HeartBeat` objects."
    nodes: [HeartBeat]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `HeartBeat` you could get from the connection."
    totalCount: Int!
}

"A `HeartBeat` edge in the connection."
type HeartBeatsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `HeartBeat` at the end of the edge."
    node: HeartBeat
}

type KeygenThreshold implements Node {
    "Reads a single `Block` that is related to this `KeygenThreshold`."
    block: Block
    blockId: String!
    current: Int
    id: String!
    next: Int
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    pending: Int
}

type KeygenThresholdAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: KeygenThresholdAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: KeygenThresholdDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: KeygenThresholdMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: KeygenThresholdMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: KeygenThresholdStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: KeygenThresholdStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: KeygenThresholdSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: KeygenThresholdVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: KeygenThresholdVarianceSampleAggregates
}

type KeygenThresholdAverageAggregates {
    "Mean average of current across the matching connection"
    current: BigFloat
    "Mean average of next across the matching connection"
    next: BigFloat
    "Mean average of pending across the matching connection"
    pending: BigFloat
}

type KeygenThresholdDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of current across the matching connection"
    current: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of next across the matching connection"
    next: BigInt
    "Distinct count of pending across the matching connection"
    pending: BigInt
}

type KeygenThresholdMaxAggregates {
    "Maximum of current across the matching connection"
    current: Int
    "Maximum of next across the matching connection"
    next: Int
    "Maximum of pending across the matching connection"
    pending: Int
}

type KeygenThresholdMinAggregates {
    "Minimum of current across the matching connection"
    current: Int
    "Minimum of next across the matching connection"
    next: Int
    "Minimum of pending across the matching connection"
    pending: Int
}

type KeygenThresholdStddevPopulationAggregates {
    "Population standard deviation of current across the matching connection"
    current: BigFloat
    "Population standard deviation of next across the matching connection"
    next: BigFloat
    "Population standard deviation of pending across the matching connection"
    pending: BigFloat
}

type KeygenThresholdStddevSampleAggregates {
    "Sample standard deviation of current across the matching connection"
    current: BigFloat
    "Sample standard deviation of next across the matching connection"
    next: BigFloat
    "Sample standard deviation of pending across the matching connection"
    pending: BigFloat
}

type KeygenThresholdSumAggregates {
    "Sum of current across the matching connection"
    current: BigInt!
    "Sum of next across the matching connection"
    next: BigInt!
    "Sum of pending across the matching connection"
    pending: BigInt!
}

type KeygenThresholdVariancePopulationAggregates {
    "Population variance of current across the matching connection"
    current: BigFloat
    "Population variance of next across the matching connection"
    next: BigFloat
    "Population variance of pending across the matching connection"
    pending: BigFloat
}

type KeygenThresholdVarianceSampleAggregates {
    "Sample variance of current across the matching connection"
    current: BigFloat
    "Sample variance of next across the matching connection"
    next: BigFloat
    "Sample variance of pending across the matching connection"
    pending: BigFloat
}

"A connection to a list of `KeygenThreshold` values."
type KeygenThresholdsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: KeygenThresholdAggregates
    "A list of edges which contains the `KeygenThreshold` and cursor to aid in pagination."
    edges: [KeygenThresholdsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `KeygenThreshold` for these aggregates."
        groupBy: [KeygenThresholdsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: KeygenThresholdsHavingInput
    ): [KeygenThresholdAggregates!]
    "A list of `KeygenThreshold` objects."
    nodes: [KeygenThreshold]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `KeygenThreshold` you could get from the connection."
    totalCount: Int!
}

"A `KeygenThreshold` edge in the connection."
type KeygenThresholdsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `KeygenThreshold` at the end of the edge."
    node: KeygenThreshold
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: Cursor
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: Cursor
}

type ProposalCounter implements Node {
    "Reads a single `Block` that is related to this `ProposalCounter`."
    block: Block
    blockId: String!
    blockNumber: Int!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    signedProposalsCount: Int!
    signedProposalsMap: JSON
    statusMap: JSON
    unSignedProposalsCount: Int!
    unSignedProposalsMap: JSON
}

type ProposalCounterAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposalCounterAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposalCounterDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposalCounterMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposalCounterMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposalCounterStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposalCounterStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposalCounterSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposalCounterVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposalCounterVarianceSampleAggregates
}

type ProposalCounterAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Mean average of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

type ProposalCounterDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of signedProposalsCount across the matching connection"
    signedProposalsCount: BigInt
    "Distinct count of signedProposalsMap across the matching connection"
    signedProposalsMap: BigInt
    "Distinct count of statusMap across the matching connection"
    statusMap: BigInt
    "Distinct count of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigInt
    "Distinct count of unSignedProposalsMap across the matching connection"
    unSignedProposalsMap: BigInt
}

type ProposalCounterMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
    "Maximum of signedProposalsCount across the matching connection"
    signedProposalsCount: Int
    "Maximum of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: Int
}

type ProposalCounterMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
    "Minimum of signedProposalsCount across the matching connection"
    signedProposalsCount: Int
    "Minimum of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: Int
}

type ProposalCounterStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Population standard deviation of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

type ProposalCounterStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Sample standard deviation of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

type ProposalCounterSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
    "Sum of signedProposalsCount across the matching connection"
    signedProposalsCount: BigInt!
    "Sum of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigInt!
}

type ProposalCounterVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Population variance of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

type ProposalCounterVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Sample variance of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

"A connection to a list of `ProposalCounter` values."
type ProposalCountersConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalCounterAggregates
    "A list of edges which contains the `ProposalCounter` and cursor to aid in pagination."
    edges: [ProposalCountersEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalCounter` for these aggregates."
        groupBy: [ProposalCountersGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalCountersHavingInput
    ): [ProposalCounterAggregates!]
    "A list of `ProposalCounter` objects."
    nodes: [ProposalCounter]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalCounter` you could get from the connection."
    totalCount: Int!
}

"A `ProposalCounter` edge in the connection."
type ProposalCountersEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalCounter` at the end of the edge."
    node: ProposalCounter
}

type ProposalItem implements Node {
    "Reads a single `Block` that is related to this `ProposalItem`."
    block: Block
    blockId: String!
    blockNumber: Int!
    "Reads and enables pagination through a set of `Block`."
    blocksByProposalVoteProposalIdAndBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalItemBlocksByProposalVoteProposalIdAndBlockIdManyToManyConnection!
    chainId: BigFloat
    data: String!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    nonce: Int!
    "Reads and enables pagination through a set of `ProposalTimelineStatus`."
    proposalTimelineStatuses(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalTimelineStatusFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalTimelineStatus`."
        orderBy: [ProposalTimelineStatusesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalTimelineStatusesConnection!
    "Reads and enables pagination through a set of `ProposalVote`."
    proposalVotesByProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
    "Reads and enables pagination through a set of `Proposer`."
    proposersByProposalVoteProposalIdAndVoterId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Proposer`."
        orderBy: [ProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalItemProposersByProposalVoteProposalIdAndVoterIdManyToManyConnection!
    removed: Boolean
    signature: String
    status: String!
    type: AppEnumB6165934C8!
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItemsByProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection!
    "Reads and enables pagination through a set of `UnsignedProposalsQueue`."
    unsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueue`."
        orderBy: [UnsignedProposalsQueuesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalItemUnsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueIdManyToManyConnection!
}

type ProposalItemAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposalItemAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposalItemDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposalItemMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposalItemMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposalItemStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposalItemStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposalItemSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposalItemVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposalItemVarianceSampleAggregates
}

type ProposalItemAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of chainId across the matching connection"
    chainId: BigFloat
    "Mean average of nonce across the matching connection"
    nonce: BigFloat
}

"A connection to a list of `Block` values, with data from `ProposalVote`."
type ProposalItemBlocksByProposalVoteProposalIdAndBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `ProposalVote`, and the cursor to aid in pagination."
    edges: [ProposalItemBlocksByProposalVoteProposalIdAndBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `ProposalVote`."
type ProposalItemBlocksByProposalVoteProposalIdAndBlockIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
    "Reads and enables pagination through a set of `ProposalVote`."
    proposalVotes(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
}

type ProposalItemDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of chainId across the matching connection"
    chainId: BigInt
    "Distinct count of data across the matching connection"
    data: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of nonce across the matching connection"
    nonce: BigInt
    "Distinct count of removed across the matching connection"
    removed: BigInt
    "Distinct count of signature across the matching connection"
    signature: BigInt
    "Distinct count of status across the matching connection"
    status: BigInt
    "Distinct count of type across the matching connection"
    type: BigInt
}

type ProposalItemMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
    "Maximum of chainId across the matching connection"
    chainId: BigFloat
    "Maximum of nonce across the matching connection"
    nonce: Int
}

type ProposalItemMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
    "Minimum of chainId across the matching connection"
    chainId: BigFloat
    "Minimum of nonce across the matching connection"
    nonce: Int
}

"A connection to a list of `Proposer` values, with data from `ProposalVote`."
type ProposalItemProposersByProposalVoteProposalIdAndVoterIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposerAggregates
    "A list of edges which contains the `Proposer`, info from the `ProposalVote`, and the cursor to aid in pagination."
    edges: [ProposalItemProposersByProposalVoteProposalIdAndVoterIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Proposer` for these aggregates."
        groupBy: [ProposersGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposersHavingInput
    ): [ProposerAggregates!]
    "A list of `Proposer` objects."
    nodes: [Proposer]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Proposer` you could get from the connection."
    totalCount: Int!
}

"A `Proposer` edge in the connection, with data from `ProposalVote`."
type ProposalItemProposersByProposalVoteProposalIdAndVoterIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Proposer` at the end of the edge."
    node: Proposer
    "Reads and enables pagination through a set of `ProposalVote`."
    votes(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
}

type ProposalItemStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of chainId across the matching connection"
    chainId: BigFloat
    "Population standard deviation of nonce across the matching connection"
    nonce: BigFloat
}

type ProposalItemStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of chainId across the matching connection"
    chainId: BigFloat
    "Sample standard deviation of nonce across the matching connection"
    nonce: BigFloat
}

type ProposalItemSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
    "Sum of chainId across the matching connection"
    chainId: BigFloat!
    "Sum of nonce across the matching connection"
    nonce: BigInt!
}

"A connection to a list of `UnsignedProposalsQueue` values, with data from `UnsignedProposalsQueueItem`."
type ProposalItemUnsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: UnsignedProposalsQueueAggregates
    "A list of edges which contains the `UnsignedProposalsQueue`, info from the `UnsignedProposalsQueueItem`, and the cursor to aid in pagination."
    edges: [ProposalItemUnsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `UnsignedProposalsQueue` for these aggregates."
        groupBy: [UnsignedProposalsQueuesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: UnsignedProposalsQueuesHavingInput
    ): [UnsignedProposalsQueueAggregates!]
    "A list of `UnsignedProposalsQueue` objects."
    nodes: [UnsignedProposalsQueue]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `UnsignedProposalsQueue` you could get from the connection."
    totalCount: Int!
}

"A `UnsignedProposalsQueue` edge in the connection, with data from `UnsignedProposalsQueueItem`."
type ProposalItemUnsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `UnsignedProposalsQueue` at the end of the edge."
    node: UnsignedProposalsQueue
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItemsByQueueId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection!
}

type ProposalItemVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of chainId across the matching connection"
    chainId: BigFloat
    "Population variance of nonce across the matching connection"
    nonce: BigFloat
}

type ProposalItemVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of chainId across the matching connection"
    chainId: BigFloat
    "Sample variance of nonce across the matching connection"
    nonce: BigFloat
}

"A connection to a list of `ProposalItem` values."
type ProposalItemsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalItemAggregates
    "A list of edges which contains the `ProposalItem` and cursor to aid in pagination."
    edges: [ProposalItemsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalItem` for these aggregates."
        groupBy: [ProposalItemsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalItemsHavingInput
    ): [ProposalItemAggregates!]
    "A list of `ProposalItem` objects."
    nodes: [ProposalItem]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalItem` you could get from the connection."
    totalCount: Int!
}

"A `ProposalItem` edge in the connection."
type ProposalItemsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalItem` at the end of the edge."
    node: ProposalItem
}

type ProposalTimelineStatus implements Node {
    blockNumber: BigFloat!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `ProposalItem` that is related to this `ProposalTimelineStatus`."
    proposalItem: ProposalItem
    proposalItemId: String!
    status: AppEnum155D64Ff70!
    timestamp: Datetime!
    txHash: String
}

type ProposalTimelineStatusAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposalTimelineStatusAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposalTimelineStatusDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposalTimelineStatusMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposalTimelineStatusMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposalTimelineStatusStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposalTimelineStatusStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposalTimelineStatusSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposalTimelineStatusVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposalTimelineStatusVarianceSampleAggregates
}

type ProposalTimelineStatusAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalTimelineStatusDistinctCountAggregates {
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of proposalItemId across the matching connection"
    proposalItemId: BigInt
    "Distinct count of status across the matching connection"
    status: BigInt
    "Distinct count of timestamp across the matching connection"
    timestamp: BigInt
    "Distinct count of txHash across the matching connection"
    txHash: BigInt
}

type ProposalTimelineStatusMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalTimelineStatusMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalTimelineStatusStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalTimelineStatusStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalTimelineStatusSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigFloat!
}

type ProposalTimelineStatusVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalTimelineStatusVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

"A connection to a list of `ProposalTimelineStatus` values."
type ProposalTimelineStatusesConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalTimelineStatusAggregates
    "A list of edges which contains the `ProposalTimelineStatus` and cursor to aid in pagination."
    edges: [ProposalTimelineStatusesEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalTimelineStatus` for these aggregates."
        groupBy: [ProposalTimelineStatusesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalTimelineStatusesHavingInput
    ): [ProposalTimelineStatusAggregates!]
    "A list of `ProposalTimelineStatus` objects."
    nodes: [ProposalTimelineStatus]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalTimelineStatus` you could get from the connection."
    totalCount: Int!
}

"A `ProposalTimelineStatus` edge in the connection."
type ProposalTimelineStatusesEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalTimelineStatus` at the end of the edge."
    node: ProposalTimelineStatus
}

type ProposalVote implements Node {
    "Reads a single `Block` that is related to this `ProposalVote`."
    block: Block
    blockId: String!
    blockNumber: BigFloat!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `ProposalItem` that is related to this `ProposalVote`."
    proposal: ProposalItem
    proposalId: String!
    voteStatus: AppEnumFe385C7221!
    "Reads a single `Proposer` that is related to this `ProposalVote`."
    voter: Proposer
    voterId: String!
}

type ProposalVoteAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposalVoteAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposalVoteDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposalVoteMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposalVoteMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposalVoteStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposalVoteStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposalVoteSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposalVoteVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposalVoteVarianceSampleAggregates
}

type ProposalVoteAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalVoteDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of proposalId across the matching connection"
    proposalId: BigInt
    "Distinct count of voteStatus across the matching connection"
    voteStatus: BigInt
    "Distinct count of voterId across the matching connection"
    voterId: BigInt
}

type ProposalVoteMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalVoteMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalVoteStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalVoteStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalVoteSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigFloat!
}

type ProposalVoteVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type ProposalVoteVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

"A connection to a list of `ProposalVote` values."
type ProposalVotesConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalVoteAggregates
    "A list of edges which contains the `ProposalVote` and cursor to aid in pagination."
    edges: [ProposalVotesEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalVote` for these aggregates."
        groupBy: [ProposalVotesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalVotesHavingInput
    ): [ProposalVoteAggregates!]
    "A list of `ProposalVote` objects."
    nodes: [ProposalVote]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalVote` you could get from the connection."
    totalCount: Int!
}

"A `ProposalVote` edge in the connection."
type ProposalVotesEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalVote` at the end of the edge."
    node: ProposalVote
}

type Proposer implements Node {
    "Reads a single `Account` that is related to this `Proposer`."
    account: Account
    accountId: String!
    "Reads and enables pagination through a set of `Block`."
    blocksByProposalVoteVoterIdAndBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposerBlocksByProposalVoteVoterIdAndBlockIdManyToManyConnection!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads and enables pagination through a set of `ProposalItem`."
    proposalItemsByProposalVoteVoterIdAndProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalItem`."
        orderBy: [ProposalItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposerProposalItemsByProposalVoteVoterIdAndProposalIdManyToManyConnection!
    "Reads and enables pagination through a set of `SessionProposer`."
    sessionProposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionProposer`."
        orderBy: [SessionProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionProposersConnection!
    "Reads and enables pagination through a set of `Session`."
    sessionsBySessionProposerProposerIdAndSessionId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposerSessionsBySessionProposerProposerIdAndSessionIdManyToManyConnection!
    "Reads and enables pagination through a set of `ProposalVote`."
    votes(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
}

type ProposerAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposerDistinctCountAggregates
    keys: [String!]
}

"A connection to a list of `Block` values, with data from `ProposalVote`."
type ProposerBlocksByProposalVoteVoterIdAndBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `ProposalVote`, and the cursor to aid in pagination."
    edges: [ProposerBlocksByProposalVoteVoterIdAndBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `ProposalVote`."
type ProposerBlocksByProposalVoteVoterIdAndBlockIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
    "Reads and enables pagination through a set of `ProposalVote`."
    proposalVotes(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
}

type ProposerDistinctCountAggregates {
    "Distinct count of accountId across the matching connection"
    accountId: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
}

"A connection to a list of `ProposalItem` values, with data from `ProposalVote`."
type ProposerProposalItemsByProposalVoteVoterIdAndProposalIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalItemAggregates
    "A list of edges which contains the `ProposalItem`, info from the `ProposalVote`, and the cursor to aid in pagination."
    edges: [ProposerProposalItemsByProposalVoteVoterIdAndProposalIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalItem` for these aggregates."
        groupBy: [ProposalItemsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalItemsHavingInput
    ): [ProposalItemAggregates!]
    "A list of `ProposalItem` objects."
    nodes: [ProposalItem]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalItem` you could get from the connection."
    totalCount: Int!
}

"A `ProposalItem` edge in the connection, with data from `ProposalVote`."
type ProposerProposalItemsByProposalVoteVoterIdAndProposalIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalItem` at the end of the edge."
    node: ProposalItem
    "Reads and enables pagination through a set of `ProposalVote`."
    proposalVotesByProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection!
}

"A connection to a list of `Session` values, with data from `SessionProposer`."
type ProposerSessionsBySessionProposerProposerIdAndSessionIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SessionAggregates
    "A list of edges which contains the `Session`, info from the `SessionProposer`, and the cursor to aid in pagination."
    edges: [ProposerSessionsBySessionProposerProposerIdAndSessionIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Session` for these aggregates."
        groupBy: [SessionsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SessionsHavingInput
    ): [SessionAggregates!]
    "A list of `Session` objects."
    nodes: [Session]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Session` you could get from the connection."
    totalCount: Int!
}

"A `Session` edge in the connection, with data from `SessionProposer`."
type ProposerSessionsBySessionProposerProposerIdAndSessionIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Session` at the end of the edge."
    node: Session
    "Reads and enables pagination through a set of `SessionProposer`."
    sessionProposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionProposer`."
        orderBy: [SessionProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionProposersConnection!
}

type ProposerThreshold implements Node {
    "Reads a single `Block` that is related to this `ProposerThreshold`."
    block: Block
    blockId: String!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    value: Int
}

type ProposerThresholdAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposerThresholdAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposerThresholdDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposerThresholdMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposerThresholdMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposerThresholdStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposerThresholdStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposerThresholdSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposerThresholdVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposerThresholdVarianceSampleAggregates
}

type ProposerThresholdAverageAggregates {
    "Mean average of value across the matching connection"
    value: BigFloat
}

type ProposerThresholdDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of value across the matching connection"
    value: BigInt
}

type ProposerThresholdMaxAggregates {
    "Maximum of value across the matching connection"
    value: Int
}

type ProposerThresholdMinAggregates {
    "Minimum of value across the matching connection"
    value: Int
}

type ProposerThresholdStddevPopulationAggregates {
    "Population standard deviation of value across the matching connection"
    value: BigFloat
}

type ProposerThresholdStddevSampleAggregates {
    "Sample standard deviation of value across the matching connection"
    value: BigFloat
}

type ProposerThresholdSumAggregates {
    "Sum of value across the matching connection"
    value: BigInt!
}

type ProposerThresholdVariancePopulationAggregates {
    "Population variance of value across the matching connection"
    value: BigFloat
}

type ProposerThresholdVarianceSampleAggregates {
    "Sample variance of value across the matching connection"
    value: BigFloat
}

"A connection to a list of `ProposerThreshold` values."
type ProposerThresholdsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposerThresholdAggregates
    "A list of edges which contains the `ProposerThreshold` and cursor to aid in pagination."
    edges: [ProposerThresholdsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposerThreshold` for these aggregates."
        groupBy: [ProposerThresholdsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposerThresholdsHavingInput
    ): [ProposerThresholdAggregates!]
    "A list of `ProposerThreshold` objects."
    nodes: [ProposerThreshold]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposerThreshold` you could get from the connection."
    totalCount: Int!
}

"A `ProposerThreshold` edge in the connection."
type ProposerThresholdsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposerThreshold` at the end of the edge."
    node: ProposerThreshold
}

"A connection to a list of `Proposer` values."
type ProposersConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposerAggregates
    "A list of edges which contains the `Proposer` and cursor to aid in pagination."
    edges: [ProposersEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Proposer` for these aggregates."
        groupBy: [ProposersGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposersHavingInput
    ): [ProposerAggregates!]
    "A list of `Proposer` objects."
    nodes: [Proposer]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Proposer` you could get from the connection."
    totalCount: Int!
}

"A `Proposer` edge in the connection."
type ProposersEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Proposer` at the end of the edge."
    node: Proposer
}

type PublicKey implements Node {
    "Reads a single `Block` that is related to this `PublicKey`."
    block: Block
    blockId: String!
    "Reads and enables pagination through a set of `Block`."
    blocksBySessionPublicKeyIdAndBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): PublicKeyBlocksBySessionPublicKeyIdAndBlockIdManyToManyConnection!
    compressed: String
    history: JSON!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection!
    uncompressed: String
}

type PublicKeyAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: PublicKeyDistinctCountAggregates
    keys: [String!]
}

"A connection to a list of `Block` values, with data from `Session`."
type PublicKeyBlocksBySessionPublicKeyIdAndBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Session`, and the cursor to aid in pagination."
    edges: [PublicKeyBlocksBySessionPublicKeyIdAndBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Session`."
type PublicKeyBlocksBySessionPublicKeyIdAndBlockIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection!
}

type PublicKeyDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of compressed across the matching connection"
    compressed: BigInt
    "Distinct count of history across the matching connection"
    history: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of uncompressed across the matching connection"
    uncompressed: BigInt
}

"A connection to a list of `PublicKey` values."
type PublicKeysConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: PublicKeyAggregates
    "A list of edges which contains the `PublicKey` and cursor to aid in pagination."
    edges: [PublicKeysEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `PublicKey` for these aggregates."
        groupBy: [PublicKeysGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: PublicKeysHavingInput
    ): [PublicKeyAggregates!]
    "A list of `PublicKey` objects."
    nodes: [PublicKey]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `PublicKey` you could get from the connection."
    totalCount: Int!
}

"A `PublicKey` edge in the connection."
type PublicKeysEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `PublicKey` at the end of the edge."
    node: PublicKey
}

"The root query type which gives access points into the data universe."
type Query implements Node {
    _metadata: _Metadata
    account(id: String!): Account
    "Reads a single `Account` using its globally unique `ID`."
    accountByNodeId(
        "The globally unique `ID` to be used in selecting a single `Account`."
        nodeId: ID!
    ): Account
    "Reads and enables pagination through a set of `Account`."
    accounts(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection
    "Reads and enables pagination through a set of `Authority`."
    authorities(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AuthorityFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Authority`."
        orderBy: [AuthoritiesOrderBy!] = [PRIMARY_KEY_ASC]
    ): AuthoritiesConnection
    authority(id: String!): Authority
    "Reads a single `Authority` using its globally unique `ID`."
    authorityByNodeId(
        "The globally unique `ID` to be used in selecting a single `Authority`."
        nodeId: ID!
    ): Authority
    block(id: String!): Block
    "Reads a single `Block` using its globally unique `ID`."
    blockByNodeId(
        "The globally unique `ID` to be used in selecting a single `Block`."
        nodeId: ID!
    ): Block
    "Reads and enables pagination through a set of `Block`."
    blocks(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlocksConnection
    countryCode(id: String!): CountryCode
    "Reads a single `CountryCode` using its globally unique `ID`."
    countryCodeByNodeId(
        "The globally unique `ID` to be used in selecting a single `CountryCode`."
        nodeId: ID!
    ): CountryCode
    "Reads and enables pagination through a set of `CountryCode`."
    countryCodes(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: CountryCodeFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `CountryCode`."
        orderBy: [CountryCodesOrderBy!] = [PRIMARY_KEY_ASC]
    ): CountryCodesConnection
    event(id: String!): Event
    "Reads a single `Event` using its globally unique `ID`."
    eventByNodeId(
        "The globally unique `ID` to be used in selecting a single `Event`."
        nodeId: ID!
    ): Event
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection
    extrinsic(id: String!): Extrinsic
    "Reads a single `Extrinsic` using its globally unique `ID`."
    extrinsicByNodeId(
        "The globally unique `ID` to be used in selecting a single `Extrinsic`."
        nodeId: ID!
    ): Extrinsic
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection
    heartBeat(id: String!): HeartBeat
    "Reads a single `HeartBeat` using its globally unique `ID`."
    heartBeatByNodeId(
        "The globally unique `ID` to be used in selecting a single `HeartBeat`."
        nodeId: ID!
    ): HeartBeat
    "Reads and enables pagination through a set of `HeartBeat`."
    heartBeats(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: HeartBeatFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `HeartBeat`."
        orderBy: [HeartBeatsOrderBy!] = [PRIMARY_KEY_ASC]
    ): HeartBeatsConnection
    keygenThreshold(id: String!): KeygenThreshold
    "Reads a single `KeygenThreshold` using its globally unique `ID`."
    keygenThresholdByNodeId(
        "The globally unique `ID` to be used in selecting a single `KeygenThreshold`."
        nodeId: ID!
    ): KeygenThreshold
    "Reads and enables pagination through a set of `KeygenThreshold`."
    keygenThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: KeygenThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `KeygenThreshold`."
        orderBy: [KeygenThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): KeygenThresholdsConnection
    "Fetches an object given its globally unique `ID`."
    node(
        "The globally unique `ID`."
        nodeId: ID!
    ): Node
    "The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`."
    nodeId: ID!
    proposalCounter(id: String!): ProposalCounter
    "Reads a single `ProposalCounter` using its globally unique `ID`."
    proposalCounterByNodeId(
        "The globally unique `ID` to be used in selecting a single `ProposalCounter`."
        nodeId: ID!
    ): ProposalCounter
    "Reads and enables pagination through a set of `ProposalCounter`."
    proposalCounters(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalCounterFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalCounter`."
        orderBy: [ProposalCountersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalCountersConnection
    proposalItem(id: String!): ProposalItem
    "Reads a single `ProposalItem` using its globally unique `ID`."
    proposalItemByNodeId(
        "The globally unique `ID` to be used in selecting a single `ProposalItem`."
        nodeId: ID!
    ): ProposalItem
    "Reads and enables pagination through a set of `ProposalItem`."
    proposalItems(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalItem`."
        orderBy: [ProposalItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalItemsConnection
    proposalTimelineStatus(id: String!): ProposalTimelineStatus
    "Reads a single `ProposalTimelineStatus` using its globally unique `ID`."
    proposalTimelineStatusByNodeId(
        "The globally unique `ID` to be used in selecting a single `ProposalTimelineStatus`."
        nodeId: ID!
    ): ProposalTimelineStatus
    "Reads and enables pagination through a set of `ProposalTimelineStatus`."
    proposalTimelineStatuses(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalTimelineStatusFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalTimelineStatus`."
        orderBy: [ProposalTimelineStatusesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalTimelineStatusesConnection
    proposalVote(id: String!): ProposalVote
    "Reads a single `ProposalVote` using its globally unique `ID`."
    proposalVoteByNodeId(
        "The globally unique `ID` to be used in selecting a single `ProposalVote`."
        nodeId: ID!
    ): ProposalVote
    "Reads and enables pagination through a set of `ProposalVote`."
    proposalVotes(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalVoteFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalVote`."
        orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalVotesConnection
    proposer(id: String!): Proposer
    "Reads a single `Proposer` using its globally unique `ID`."
    proposerByNodeId(
        "The globally unique `ID` to be used in selecting a single `Proposer`."
        nodeId: ID!
    ): Proposer
    proposerThreshold(id: String!): ProposerThreshold
    "Reads a single `ProposerThreshold` using its globally unique `ID`."
    proposerThresholdByNodeId(
        "The globally unique `ID` to be used in selecting a single `ProposerThreshold`."
        nodeId: ID!
    ): ProposerThreshold
    "Reads and enables pagination through a set of `ProposerThreshold`."
    proposerThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposerThreshold`."
        orderBy: [ProposerThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposerThresholdsConnection
    "Reads and enables pagination through a set of `Proposer`."
    proposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Proposer`."
        orderBy: [ProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposersConnection
    publicKey(id: String!): PublicKey
    "Reads a single `PublicKey` using its globally unique `ID`."
    publicKeyByNodeId(
        "The globally unique `ID` to be used in selecting a single `PublicKey`."
        nodeId: ID!
    ): PublicKey
    "Reads and enables pagination through a set of `PublicKey`."
    publicKeys(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: PublicKeyFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `PublicKey`."
        orderBy: [PublicKeysOrderBy!] = [PRIMARY_KEY_ASC]
    ): PublicKeysConnection
    """

    Exposes the root query type nested one level down. This is helpful for Relay 1
    which can only query top level fields if they are in a particular form.
    """
    query: Query!
    session(id: String!): Session
    "Reads a single `Session` using its globally unique `ID`."
    sessionByNodeId(
        "The globally unique `ID` to be used in selecting a single `Session`."
        nodeId: ID!
    ): Session
    sessionProposer(id: String!): SessionProposer
    "Reads a single `SessionProposer` using its globally unique `ID`."
    sessionProposerByNodeId(
        "The globally unique `ID` to be used in selecting a single `SessionProposer`."
        nodeId: ID!
    ): SessionProposer
    "Reads and enables pagination through a set of `SessionProposer`."
    sessionProposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionProposer`."
        orderBy: [SessionProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionProposersConnection
    sessionValidator(id: String!): SessionValidator
    "Reads a single `SessionValidator` using its globally unique `ID`."
    sessionValidatorByNodeId(
        "The globally unique `ID` to be used in selecting a single `SessionValidator`."
        nodeId: ID!
    ): SessionValidator
    "Reads and enables pagination through a set of `SessionValidator`."
    sessionValidators(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionValidatorFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionValidator`."
        orderBy: [SessionValidatorsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionValidatorsConnection
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection
    signatureThreshold(id: String!): SignatureThreshold
    "Reads a single `SignatureThreshold` using its globally unique `ID`."
    signatureThresholdByNodeId(
        "The globally unique `ID` to be used in selecting a single `SignatureThreshold`."
        nodeId: ID!
    ): SignatureThreshold
    "Reads and enables pagination through a set of `SignatureThreshold`."
    signatureThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SignatureThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SignatureThreshold`."
        orderBy: [SignatureThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SignatureThresholdsConnection
    threshold(id: String!): Threshold
    "Reads a single `Threshold` using its globally unique `ID`."
    thresholdByNodeId(
        "The globally unique `ID` to be used in selecting a single `Threshold`."
        nodeId: ID!
    ): Threshold
    "Reads and enables pagination through a set of `Threshold`."
    thresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Threshold`."
        orderBy: [ThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ThresholdsConnection
    unsignedProposalsQueue(id: String!): UnsignedProposalsQueue
    "Reads a single `UnsignedProposalsQueue` using its globally unique `ID`."
    unsignedProposalsQueueByNodeId(
        "The globally unique `ID` to be used in selecting a single `UnsignedProposalsQueue`."
        nodeId: ID!
    ): UnsignedProposalsQueue
    unsignedProposalsQueueItem(id: String!): UnsignedProposalsQueueItem
    "Reads a single `UnsignedProposalsQueueItem` using its globally unique `ID`."
    unsignedProposalsQueueItemByNodeId(
        "The globally unique `ID` to be used in selecting a single `UnsignedProposalsQueueItem`."
        nodeId: ID!
    ): UnsignedProposalsQueueItem
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItems(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection
    "Reads and enables pagination through a set of `UnsignedProposalsQueue`."
    unsignedProposalsQueues(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueue`."
        orderBy: [UnsignedProposalsQueuesOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueuesConnection
    validator(id: String!): Validator
    "Reads a single `Validator` using its globally unique `ID`."
    validatorByNodeId(
        "The globally unique `ID` to be used in selecting a single `Validator`."
        nodeId: ID!
    ): Validator
    "Reads and enables pagination through a set of `Validator`."
    validators(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ValidatorFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Validator`."
        orderBy: [ValidatorsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ValidatorsConnection
}

type Session implements Node {
    "Reads and enables pagination through a set of `Account`."
    accountsByHeartBeatSessionIdAndAccountId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionAccountsByHeartBeatSessionIdAndAccountIdManyToManyConnection!
    "Reads a single `Block` that is related to this `Session`."
    block: Block
    blockId: String!
    blockNumber: Int!
    "Reads and enables pagination through a set of `HeartBeat`."
    heartBeats(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: HeartBeatFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `HeartBeat`."
        orderBy: [HeartBeatsOrderBy!] = [PRIMARY_KEY_ASC]
    ): HeartBeatsConnection!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads and enables pagination through a set of `Proposer`."
    proposersBySessionProposerSessionIdAndProposerId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Proposer`."
        orderBy: [ProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionProposersBySessionProposerSessionIdAndProposerIdManyToManyConnection!
    "Reads a single `PublicKey` that is related to this `Session`."
    publicKey: PublicKey
    publicKeyId: String
    "Reads and enables pagination through a set of `SessionProposer`."
    sessionProposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionProposer`."
        orderBy: [SessionProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionProposersConnection!
    "Reads and enables pagination through a set of `SessionValidator`."
    sessionValidators(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionValidatorFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionValidator`."
        orderBy: [SessionValidatorsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionValidatorsConnection!
    "Reads and enables pagination through a set of `Threshold`."
    thresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Threshold`."
        orderBy: [ThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ThresholdsConnection!
    "Reads and enables pagination through a set of `Validator`."
    validatorsBySessionValidatorSessionIdAndValidatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ValidatorFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Validator`."
        orderBy: [ValidatorsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionValidatorsBySessionValidatorSessionIdAndValidatorIdManyToManyConnection!
}

"A connection to a list of `Account` values, with data from `HeartBeat`."
type SessionAccountsByHeartBeatSessionIdAndAccountIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AccountAggregates
    "A list of edges which contains the `Account`, info from the `HeartBeat`, and the cursor to aid in pagination."
    edges: [SessionAccountsByHeartBeatSessionIdAndAccountIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Account` for these aggregates."
        groupBy: [AccountsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AccountsHavingInput
    ): [AccountAggregates!]
    "A list of `Account` objects."
    nodes: [Account]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Account` you could get from the connection."
    totalCount: Int!
}

"A `Account` edge in the connection, with data from `HeartBeat`."
type SessionAccountsByHeartBeatSessionIdAndAccountIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `HeartBeat`."
    heartBeats(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: HeartBeatFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `HeartBeat`."
        orderBy: [HeartBeatsOrderBy!] = [PRIMARY_KEY_ASC]
    ): HeartBeatsConnection!
    "The `Account` at the end of the edge."
    node: Account
}

type SessionAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: SessionAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: SessionDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: SessionMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: SessionMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: SessionStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: SessionStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: SessionSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: SessionVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: SessionVarianceSampleAggregates
}

type SessionAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type SessionDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of publicKeyId across the matching connection"
    publicKeyId: BigInt
}

type SessionMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
}

type SessionMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
}

type SessionProposer implements Node {
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `Proposer` that is related to this `SessionProposer`."
    proposer: Proposer
    proposerId: String!
    "Reads a single `Session` that is related to this `SessionProposer`."
    session: Session
    sessionId: String!
}

type SessionProposerAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: SessionProposerDistinctCountAggregates
    keys: [String!]
}

type SessionProposerDistinctCountAggregates {
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of proposerId across the matching connection"
    proposerId: BigInt
    "Distinct count of sessionId across the matching connection"
    sessionId: BigInt
}

"A connection to a list of `Proposer` values, with data from `SessionProposer`."
type SessionProposersBySessionProposerSessionIdAndProposerIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposerAggregates
    "A list of edges which contains the `Proposer`, info from the `SessionProposer`, and the cursor to aid in pagination."
    edges: [SessionProposersBySessionProposerSessionIdAndProposerIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Proposer` for these aggregates."
        groupBy: [ProposersGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposersHavingInput
    ): [ProposerAggregates!]
    "A list of `Proposer` objects."
    nodes: [Proposer]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Proposer` you could get from the connection."
    totalCount: Int!
}

"A `Proposer` edge in the connection, with data from `SessionProposer`."
type SessionProposersBySessionProposerSessionIdAndProposerIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Proposer` at the end of the edge."
    node: Proposer
    "Reads and enables pagination through a set of `SessionProposer`."
    sessionProposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionProposer`."
        orderBy: [SessionProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionProposersConnection!
}

"A connection to a list of `SessionProposer` values."
type SessionProposersConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SessionProposerAggregates
    "A list of edges which contains the `SessionProposer` and cursor to aid in pagination."
    edges: [SessionProposersEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `SessionProposer` for these aggregates."
        groupBy: [SessionProposersGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SessionProposersHavingInput
    ): [SessionProposerAggregates!]
    "A list of `SessionProposer` objects."
    nodes: [SessionProposer]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `SessionProposer` you could get from the connection."
    totalCount: Int!
}

"A `SessionProposer` edge in the connection."
type SessionProposersEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `SessionProposer` at the end of the edge."
    node: SessionProposer
}

type SessionStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type SessionStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type SessionSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
}

type SessionValidator implements Node {
    bestOrder: Int!
    blockNumber: BigFloat!
    id: String!
    isBest: Boolean!
    isNext: Boolean!
    isNextBest: Boolean!
    nextBestOrder: Int!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    reputation: Int!
    "Reads a single `Session` that is related to this `SessionValidator`."
    session: Session
    sessionId: String!
    uptime: Int!
    "Reads a single `Validator` that is related to this `SessionValidator`."
    validator: Validator
    validatorId: String!
}

type SessionValidatorAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: SessionValidatorAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: SessionValidatorDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: SessionValidatorMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: SessionValidatorMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: SessionValidatorStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: SessionValidatorStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: SessionValidatorSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: SessionValidatorVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: SessionValidatorVarianceSampleAggregates
}

type SessionValidatorAverageAggregates {
    "Mean average of bestOrder across the matching connection"
    bestOrder: BigFloat
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of nextBestOrder across the matching connection"
    nextBestOrder: BigFloat
    "Mean average of reputation across the matching connection"
    reputation: BigFloat
    "Mean average of uptime across the matching connection"
    uptime: BigFloat
}

type SessionValidatorDistinctCountAggregates {
    "Distinct count of bestOrder across the matching connection"
    bestOrder: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of isBest across the matching connection"
    isBest: BigInt
    "Distinct count of isNext across the matching connection"
    isNext: BigInt
    "Distinct count of isNextBest across the matching connection"
    isNextBest: BigInt
    "Distinct count of nextBestOrder across the matching connection"
    nextBestOrder: BigInt
    "Distinct count of reputation across the matching connection"
    reputation: BigInt
    "Distinct count of sessionId across the matching connection"
    sessionId: BigInt
    "Distinct count of uptime across the matching connection"
    uptime: BigInt
    "Distinct count of validatorId across the matching connection"
    validatorId: BigInt
}

type SessionValidatorMaxAggregates {
    "Maximum of bestOrder across the matching connection"
    bestOrder: Int
    "Maximum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Maximum of nextBestOrder across the matching connection"
    nextBestOrder: Int
    "Maximum of reputation across the matching connection"
    reputation: Int
    "Maximum of uptime across the matching connection"
    uptime: Int
}

type SessionValidatorMinAggregates {
    "Minimum of bestOrder across the matching connection"
    bestOrder: Int
    "Minimum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Minimum of nextBestOrder across the matching connection"
    nextBestOrder: Int
    "Minimum of reputation across the matching connection"
    reputation: Int
    "Minimum of uptime across the matching connection"
    uptime: Int
}

type SessionValidatorStddevPopulationAggregates {
    "Population standard deviation of bestOrder across the matching connection"
    bestOrder: BigFloat
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of nextBestOrder across the matching connection"
    nextBestOrder: BigFloat
    "Population standard deviation of reputation across the matching connection"
    reputation: BigFloat
    "Population standard deviation of uptime across the matching connection"
    uptime: BigFloat
}

type SessionValidatorStddevSampleAggregates {
    "Sample standard deviation of bestOrder across the matching connection"
    bestOrder: BigFloat
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of nextBestOrder across the matching connection"
    nextBestOrder: BigFloat
    "Sample standard deviation of reputation across the matching connection"
    reputation: BigFloat
    "Sample standard deviation of uptime across the matching connection"
    uptime: BigFloat
}

type SessionValidatorSumAggregates {
    "Sum of bestOrder across the matching connection"
    bestOrder: BigInt!
    "Sum of blockNumber across the matching connection"
    blockNumber: BigFloat!
    "Sum of nextBestOrder across the matching connection"
    nextBestOrder: BigInt!
    "Sum of reputation across the matching connection"
    reputation: BigInt!
    "Sum of uptime across the matching connection"
    uptime: BigInt!
}

type SessionValidatorVariancePopulationAggregates {
    "Population variance of bestOrder across the matching connection"
    bestOrder: BigFloat
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of nextBestOrder across the matching connection"
    nextBestOrder: BigFloat
    "Population variance of reputation across the matching connection"
    reputation: BigFloat
    "Population variance of uptime across the matching connection"
    uptime: BigFloat
}

type SessionValidatorVarianceSampleAggregates {
    "Sample variance of bestOrder across the matching connection"
    bestOrder: BigFloat
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of nextBestOrder across the matching connection"
    nextBestOrder: BigFloat
    "Sample variance of reputation across the matching connection"
    reputation: BigFloat
    "Sample variance of uptime across the matching connection"
    uptime: BigFloat
}

"A connection to a list of `Validator` values, with data from `SessionValidator`."
type SessionValidatorsBySessionValidatorSessionIdAndValidatorIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ValidatorAggregates
    "A list of edges which contains the `Validator`, info from the `SessionValidator`, and the cursor to aid in pagination."
    edges: [SessionValidatorsBySessionValidatorSessionIdAndValidatorIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Validator` for these aggregates."
        groupBy: [ValidatorsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ValidatorsHavingInput
    ): [ValidatorAggregates!]
    "A list of `Validator` objects."
    nodes: [Validator]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Validator` you could get from the connection."
    totalCount: Int!
}

"A `Validator` edge in the connection, with data from `SessionValidator`."
type SessionValidatorsBySessionValidatorSessionIdAndValidatorIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Validator` at the end of the edge."
    node: Validator
    "Reads and enables pagination through a set of `SessionValidator`."
    sessionValidators(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionValidatorFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionValidator`."
        orderBy: [SessionValidatorsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionValidatorsConnection!
}

"A connection to a list of `SessionValidator` values."
type SessionValidatorsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SessionValidatorAggregates
    "A list of edges which contains the `SessionValidator` and cursor to aid in pagination."
    edges: [SessionValidatorsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `SessionValidator` for these aggregates."
        groupBy: [SessionValidatorsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SessionValidatorsHavingInput
    ): [SessionValidatorAggregates!]
    "A list of `SessionValidator` objects."
    nodes: [SessionValidator]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `SessionValidator` you could get from the connection."
    totalCount: Int!
}

"A `SessionValidator` edge in the connection."
type SessionValidatorsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `SessionValidator` at the end of the edge."
    node: SessionValidator
}

type SessionVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type SessionVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

"A connection to a list of `Session` values."
type SessionsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SessionAggregates
    "A list of edges which contains the `Session` and cursor to aid in pagination."
    edges: [SessionsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Session` for these aggregates."
        groupBy: [SessionsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SessionsHavingInput
    ): [SessionAggregates!]
    "A list of `Session` objects."
    nodes: [Session]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Session` you could get from the connection."
    totalCount: Int!
}

"A `Session` edge in the connection."
type SessionsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Session` at the end of the edge."
    node: Session
}

type SignatureThreshold implements Node {
    "Reads a single `Block` that is related to this `SignatureThreshold`."
    block: Block
    blockId: String!
    current: Int
    id: String!
    next: Int
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    pending: Int
}

type SignatureThresholdAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: SignatureThresholdAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: SignatureThresholdDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: SignatureThresholdMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: SignatureThresholdMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: SignatureThresholdStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: SignatureThresholdStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: SignatureThresholdSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: SignatureThresholdVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: SignatureThresholdVarianceSampleAggregates
}

type SignatureThresholdAverageAggregates {
    "Mean average of current across the matching connection"
    current: BigFloat
    "Mean average of next across the matching connection"
    next: BigFloat
    "Mean average of pending across the matching connection"
    pending: BigFloat
}

type SignatureThresholdDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of current across the matching connection"
    current: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of next across the matching connection"
    next: BigInt
    "Distinct count of pending across the matching connection"
    pending: BigInt
}

type SignatureThresholdMaxAggregates {
    "Maximum of current across the matching connection"
    current: Int
    "Maximum of next across the matching connection"
    next: Int
    "Maximum of pending across the matching connection"
    pending: Int
}

type SignatureThresholdMinAggregates {
    "Minimum of current across the matching connection"
    current: Int
    "Minimum of next across the matching connection"
    next: Int
    "Minimum of pending across the matching connection"
    pending: Int
}

type SignatureThresholdStddevPopulationAggregates {
    "Population standard deviation of current across the matching connection"
    current: BigFloat
    "Population standard deviation of next across the matching connection"
    next: BigFloat
    "Population standard deviation of pending across the matching connection"
    pending: BigFloat
}

type SignatureThresholdStddevSampleAggregates {
    "Sample standard deviation of current across the matching connection"
    current: BigFloat
    "Sample standard deviation of next across the matching connection"
    next: BigFloat
    "Sample standard deviation of pending across the matching connection"
    pending: BigFloat
}

type SignatureThresholdSumAggregates {
    "Sum of current across the matching connection"
    current: BigInt!
    "Sum of next across the matching connection"
    next: BigInt!
    "Sum of pending across the matching connection"
    pending: BigInt!
}

type SignatureThresholdVariancePopulationAggregates {
    "Population variance of current across the matching connection"
    current: BigFloat
    "Population variance of next across the matching connection"
    next: BigFloat
    "Population variance of pending across the matching connection"
    pending: BigFloat
}

type SignatureThresholdVarianceSampleAggregates {
    "Sample variance of current across the matching connection"
    current: BigFloat
    "Sample variance of next across the matching connection"
    next: BigFloat
    "Sample variance of pending across the matching connection"
    pending: BigFloat
}

"A connection to a list of `SignatureThreshold` values."
type SignatureThresholdsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SignatureThresholdAggregates
    "A list of edges which contains the `SignatureThreshold` and cursor to aid in pagination."
    edges: [SignatureThresholdsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `SignatureThreshold` for these aggregates."
        groupBy: [SignatureThresholdsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SignatureThresholdsHavingInput
    ): [SignatureThresholdAggregates!]
    "A list of `SignatureThreshold` objects."
    nodes: [SignatureThreshold]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `SignatureThreshold` you could get from the connection."
    totalCount: Int!
}

"A `SignatureThreshold` edge in the connection."
type SignatureThresholdsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `SignatureThreshold` at the end of the edge."
    node: SignatureThreshold
}

type TableEstimate {
    estimate: Int
    table: String
}

type Threshold implements Node {
    current: Int!
    id: String!
    next: Int!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    pending: Int!
    "Reads a single `Session` that is related to this `Threshold`."
    session: Session
    sessionId: String!
    variant: AppEnum790A3Fe4Ce!
}

type ThresholdAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ThresholdAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ThresholdDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ThresholdMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ThresholdMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ThresholdStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ThresholdStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ThresholdSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ThresholdVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ThresholdVarianceSampleAggregates
}

type ThresholdAverageAggregates {
    "Mean average of current across the matching connection"
    current: BigFloat
    "Mean average of next across the matching connection"
    next: BigFloat
    "Mean average of pending across the matching connection"
    pending: BigFloat
}

type ThresholdDistinctCountAggregates {
    "Distinct count of current across the matching connection"
    current: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of next across the matching connection"
    next: BigInt
    "Distinct count of pending across the matching connection"
    pending: BigInt
    "Distinct count of sessionId across the matching connection"
    sessionId: BigInt
    "Distinct count of variant across the matching connection"
    variant: BigInt
}

type ThresholdMaxAggregates {
    "Maximum of current across the matching connection"
    current: Int
    "Maximum of next across the matching connection"
    next: Int
    "Maximum of pending across the matching connection"
    pending: Int
}

type ThresholdMinAggregates {
    "Minimum of current across the matching connection"
    current: Int
    "Minimum of next across the matching connection"
    next: Int
    "Minimum of pending across the matching connection"
    pending: Int
}

type ThresholdStddevPopulationAggregates {
    "Population standard deviation of current across the matching connection"
    current: BigFloat
    "Population standard deviation of next across the matching connection"
    next: BigFloat
    "Population standard deviation of pending across the matching connection"
    pending: BigFloat
}

type ThresholdStddevSampleAggregates {
    "Sample standard deviation of current across the matching connection"
    current: BigFloat
    "Sample standard deviation of next across the matching connection"
    next: BigFloat
    "Sample standard deviation of pending across the matching connection"
    pending: BigFloat
}

type ThresholdSumAggregates {
    "Sum of current across the matching connection"
    current: BigInt!
    "Sum of next across the matching connection"
    next: BigInt!
    "Sum of pending across the matching connection"
    pending: BigInt!
}

type ThresholdVariancePopulationAggregates {
    "Population variance of current across the matching connection"
    current: BigFloat
    "Population variance of next across the matching connection"
    next: BigFloat
    "Population variance of pending across the matching connection"
    pending: BigFloat
}

type ThresholdVarianceSampleAggregates {
    "Sample variance of current across the matching connection"
    current: BigFloat
    "Sample variance of next across the matching connection"
    next: BigFloat
    "Sample variance of pending across the matching connection"
    pending: BigFloat
}

"A connection to a list of `Threshold` values."
type ThresholdsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ThresholdAggregates
    "A list of edges which contains the `Threshold` and cursor to aid in pagination."
    edges: [ThresholdsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Threshold` for these aggregates."
        groupBy: [ThresholdsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ThresholdsHavingInput
    ): [ThresholdAggregates!]
    "A list of `Threshold` objects."
    nodes: [Threshold]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Threshold` you could get from the connection."
    totalCount: Int!
}

"A `Threshold` edge in the connection."
type ThresholdsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Threshold` at the end of the edge."
    node: Threshold
}

type UnsignedProposalsQueue implements Node {
    "Reads a single `Block` that is related to this `UnsignedProposalsQueue`."
    block: Block
    blockId: String!
    blockNumber: Int!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads and enables pagination through a set of `ProposalItem`."
    proposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalItem`."
        orderBy: [ProposalItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueProposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalIdManyToManyConnection!
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItemsByQueueId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection!
}

type UnsignedProposalsQueueAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: UnsignedProposalsQueueAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: UnsignedProposalsQueueDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: UnsignedProposalsQueueMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: UnsignedProposalsQueueMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: UnsignedProposalsQueueStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: UnsignedProposalsQueueStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: UnsignedProposalsQueueSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: UnsignedProposalsQueueVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: UnsignedProposalsQueueVarianceSampleAggregates
}

type UnsignedProposalsQueueAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
}

type UnsignedProposalsQueueItem implements Node {
    blockNumber: Int!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `ProposalItem` that is related to this `UnsignedProposalsQueueItem`."
    proposal: ProposalItem
    proposalId: String!
    "Reads a single `UnsignedProposalsQueue` that is related to this `UnsignedProposalsQueueItem`."
    queue: UnsignedProposalsQueue
    queueId: String!
}

type UnsignedProposalsQueueItemAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: UnsignedProposalsQueueItemAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: UnsignedProposalsQueueItemDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: UnsignedProposalsQueueItemMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: UnsignedProposalsQueueItemMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: UnsignedProposalsQueueItemStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: UnsignedProposalsQueueItemStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: UnsignedProposalsQueueItemSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: UnsignedProposalsQueueItemVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: UnsignedProposalsQueueItemVarianceSampleAggregates
}

type UnsignedProposalsQueueItemAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueItemDistinctCountAggregates {
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of proposalId across the matching connection"
    proposalId: BigInt
    "Distinct count of queueId across the matching connection"
    queueId: BigInt
}

type UnsignedProposalsQueueItemMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
}

type UnsignedProposalsQueueItemMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
}

type UnsignedProposalsQueueItemStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueItemStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueItemSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
}

type UnsignedProposalsQueueItemVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueItemVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

"A connection to a list of `UnsignedProposalsQueueItem` values."
type UnsignedProposalsQueueItemsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: UnsignedProposalsQueueItemAggregates
    "A list of edges which contains the `UnsignedProposalsQueueItem` and cursor to aid in pagination."
    edges: [UnsignedProposalsQueueItemsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `UnsignedProposalsQueueItem` for these aggregates."
        groupBy: [UnsignedProposalsQueueItemsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: UnsignedProposalsQueueItemsHavingInput
    ): [UnsignedProposalsQueueItemAggregates!]
    "A list of `UnsignedProposalsQueueItem` objects."
    nodes: [UnsignedProposalsQueueItem]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `UnsignedProposalsQueueItem` you could get from the connection."
    totalCount: Int!
}

"A `UnsignedProposalsQueueItem` edge in the connection."
type UnsignedProposalsQueueItemsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `UnsignedProposalsQueueItem` at the end of the edge."
    node: UnsignedProposalsQueueItem
}

type UnsignedProposalsQueueMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
}

type UnsignedProposalsQueueMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
}

"A connection to a list of `ProposalItem` values, with data from `UnsignedProposalsQueueItem`."
type UnsignedProposalsQueueProposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalItemAggregates
    "A list of edges which contains the `ProposalItem`, info from the `UnsignedProposalsQueueItem`, and the cursor to aid in pagination."
    edges: [UnsignedProposalsQueueProposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalItem` for these aggregates."
        groupBy: [ProposalItemsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalItemsHavingInput
    ): [ProposalItemAggregates!]
    "A list of `ProposalItem` objects."
    nodes: [ProposalItem]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalItem` you could get from the connection."
    totalCount: Int!
}

"A `ProposalItem` edge in the connection, with data from `UnsignedProposalsQueueItem`."
type UnsignedProposalsQueueProposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalItem` at the end of the edge."
    node: ProposalItem
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItemsByProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection!
}

type UnsignedProposalsQueueStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
}

type UnsignedProposalsQueueVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

"A connection to a list of `UnsignedProposalsQueue` values."
type UnsignedProposalsQueuesConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: UnsignedProposalsQueueAggregates
    "A list of edges which contains the `UnsignedProposalsQueue` and cursor to aid in pagination."
    edges: [UnsignedProposalsQueuesEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `UnsignedProposalsQueue` for these aggregates."
        groupBy: [UnsignedProposalsQueuesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: UnsignedProposalsQueuesHavingInput
    ): [UnsignedProposalsQueueAggregates!]
    "A list of `UnsignedProposalsQueue` objects."
    nodes: [UnsignedProposalsQueue]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `UnsignedProposalsQueue` you could get from the connection."
    totalCount: Int!
}

"A `UnsignedProposalsQueue` edge in the connection."
type UnsignedProposalsQueuesEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `UnsignedProposalsQueue` at the end of the edge."
    node: UnsignedProposalsQueue
}

type Validator implements Node {
    "Reads a single `Account` that is related to this `Validator`."
    account: Account
    accountId: String!
    authorityId: String!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads and enables pagination through a set of `SessionValidator`."
    sessionValidators(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionValidatorFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionValidator`."
        orderBy: [SessionValidatorsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionValidatorsConnection!
    "Reads and enables pagination through a set of `Session`."
    sessionsBySessionValidatorValidatorIdAndSessionId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ValidatorSessionsBySessionValidatorValidatorIdAndSessionIdManyToManyConnection!
}

type ValidatorAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ValidatorDistinctCountAggregates
    keys: [String!]
}

type ValidatorDistinctCountAggregates {
    "Distinct count of accountId across the matching connection"
    accountId: BigInt
    "Distinct count of authorityId across the matching connection"
    authorityId: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
}

"A connection to a list of `Session` values, with data from `SessionValidator`."
type ValidatorSessionsBySessionValidatorValidatorIdAndSessionIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SessionAggregates
    "A list of edges which contains the `Session`, info from the `SessionValidator`, and the cursor to aid in pagination."
    edges: [ValidatorSessionsBySessionValidatorValidatorIdAndSessionIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Session` for these aggregates."
        groupBy: [SessionsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SessionsHavingInput
    ): [SessionAggregates!]
    "A list of `Session` objects."
    nodes: [Session]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Session` you could get from the connection."
    totalCount: Int!
}

"A `Session` edge in the connection, with data from `SessionValidator`."
type ValidatorSessionsBySessionValidatorValidatorIdAndSessionIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Session` at the end of the edge."
    node: Session
    "Reads and enables pagination through a set of `SessionValidator`."
    sessionValidators(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionValidatorFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SessionValidator`."
        orderBy: [SessionValidatorsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionValidatorsConnection!
}

"A connection to a list of `Validator` values."
type ValidatorsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ValidatorAggregates
    "A list of edges which contains the `Validator` and cursor to aid in pagination."
    edges: [ValidatorsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Validator` for these aggregates."
        groupBy: [ValidatorsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ValidatorsHavingInput
    ): [ValidatorAggregates!]
    "A list of `Validator` objects."
    nodes: [Validator]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Validator` you could get from the connection."
    totalCount: Int!
}

"A `Validator` edge in the connection."
type ValidatorsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Validator` at the end of the edge."
    node: Validator
}

type _Metadata {
    chain: String
    dynamicDatasources: String
    genesisHash: String
    indexerHealthy: Boolean
    indexerNodeVersion: String
    lastProcessedHeight: Int
    lastProcessedTimestamp: Date
    queryNodeVersion: String
    rowCountEstimate: [TableEstimate]
    specName: String
    targetHeight: Int
}

"Grouping methods for `Account` for usage during aggregation."
enum AccountsGroupBy {
    COUNTRY_CODE_ID
    CREATED_AT
    CREATE_AT_BLOCK_ID
    CREATOR_ID
    DISPLAY
    EMAIL
    IMAGE
    LEGAL
    PGP_FINGERPRINT
    RIOT
    TWITTER
    WEB
}

"Methods to use when ordering `Account`."
enum AccountsOrderBy {
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_WEB_DESC
    ACCOUNTS_BY_CREATOR_ID_COUNT_ASC
    ACCOUNTS_BY_CREATOR_ID_COUNT_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_WEB_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_WEB_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_WEB_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_WEB_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_WEB_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_WEB_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_WEB_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_DISPLAY_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_DISPLAY_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_EMAIL_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_EMAIL_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_IMAGE_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_IMAGE_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_LEGAL_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_LEGAL_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_RIOT_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_RIOT_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_TWITTER_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_TWITTER_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_WEB_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_WEB_DESC
    COUNTRY_CODE_ID_ASC
    COUNTRY_CODE_ID_DESC
    CREATED_AT_ASC
    CREATED_AT_DESC
    CREATE_AT_BLOCK_ID_ASC
    CREATE_AT_BLOCK_ID_DESC
    CREATOR_ID_ASC
    CREATOR_ID_DESC
    DISPLAY_ASC
    DISPLAY_DESC
    EMAIL_ASC
    EMAIL_DESC
    EXTRINSICS_AVERAGE_ARGUMENTS_ASC
    EXTRINSICS_AVERAGE_ARGUMENTS_DESC
    EXTRINSICS_AVERAGE_BLOCK_ID_ASC
    EXTRINSICS_AVERAGE_BLOCK_ID_DESC
    EXTRINSICS_AVERAGE_BLOCK_NUMBER_ASC
    EXTRINSICS_AVERAGE_BLOCK_NUMBER_DESC
    EXTRINSICS_AVERAGE_HASH_ASC
    EXTRINSICS_AVERAGE_HASH_DESC
    EXTRINSICS_AVERAGE_ID_ASC
    EXTRINSICS_AVERAGE_ID_DESC
    EXTRINSICS_AVERAGE_INDEX_ASC
    EXTRINSICS_AVERAGE_INDEX_DESC
    EXTRINSICS_AVERAGE_IS_SIGNED_ASC
    EXTRINSICS_AVERAGE_IS_SIGNED_DESC
    EXTRINSICS_AVERAGE_IS_SUCCESS_ASC
    EXTRINSICS_AVERAGE_IS_SUCCESS_DESC
    EXTRINSICS_AVERAGE_METHOD_ASC
    EXTRINSICS_AVERAGE_METHOD_DESC
    EXTRINSICS_AVERAGE_MODULE_ASC
    EXTRINSICS_AVERAGE_MODULE_DESC
    EXTRINSICS_AVERAGE_SIGNER_ID_ASC
    EXTRINSICS_AVERAGE_SIGNER_ID_DESC
    EXTRINSICS_COUNT_ASC
    EXTRINSICS_COUNT_DESC
    EXTRINSICS_DISTINCT_COUNT_ARGUMENTS_ASC
    EXTRINSICS_DISTINCT_COUNT_ARGUMENTS_DESC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_ID_DESC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    EXTRINSICS_DISTINCT_COUNT_HASH_ASC
    EXTRINSICS_DISTINCT_COUNT_HASH_DESC
    EXTRINSICS_DISTINCT_COUNT_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_ID_DESC
    EXTRINSICS_DISTINCT_COUNT_INDEX_ASC
    EXTRINSICS_DISTINCT_COUNT_INDEX_DESC
    EXTRINSICS_DISTINCT_COUNT_IS_SIGNED_ASC
    EXTRINSICS_DISTINCT_COUNT_IS_SIGNED_DESC
    EXTRINSICS_DISTINCT_COUNT_IS_SUCCESS_ASC
    EXTRINSICS_DISTINCT_COUNT_IS_SUCCESS_DESC
    EXTRINSICS_DISTINCT_COUNT_METHOD_ASC
    EXTRINSICS_DISTINCT_COUNT_METHOD_DESC
    EXTRINSICS_DISTINCT_COUNT_MODULE_ASC
    EXTRINSICS_DISTINCT_COUNT_MODULE_DESC
    EXTRINSICS_DISTINCT_COUNT_SIGNER_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_SIGNER_ID_DESC
    EXTRINSICS_MAX_ARGUMENTS_ASC
    EXTRINSICS_MAX_ARGUMENTS_DESC
    EXTRINSICS_MAX_BLOCK_ID_ASC
    EXTRINSICS_MAX_BLOCK_ID_DESC
    EXTRINSICS_MAX_BLOCK_NUMBER_ASC
    EXTRINSICS_MAX_BLOCK_NUMBER_DESC
    EXTRINSICS_MAX_HASH_ASC
    EXTRINSICS_MAX_HASH_DESC
    EXTRINSICS_MAX_ID_ASC
    EXTRINSICS_MAX_ID_DESC
    EXTRINSICS_MAX_INDEX_ASC
    EXTRINSICS_MAX_INDEX_DESC
    EXTRINSICS_MAX_IS_SIGNED_ASC
    EXTRINSICS_MAX_IS_SIGNED_DESC
    EXTRINSICS_MAX_IS_SUCCESS_ASC
    EXTRINSICS_MAX_IS_SUCCESS_DESC
    EXTRINSICS_MAX_METHOD_ASC
    EXTRINSICS_MAX_METHOD_DESC
    EXTRINSICS_MAX_MODULE_ASC
    EXTRINSICS_MAX_MODULE_DESC
    EXTRINSICS_MAX_SIGNER_ID_ASC
    EXTRINSICS_MAX_SIGNER_ID_DESC
    EXTRINSICS_MIN_ARGUMENTS_ASC
    EXTRINSICS_MIN_ARGUMENTS_DESC
    EXTRINSICS_MIN_BLOCK_ID_ASC
    EXTRINSICS_MIN_BLOCK_ID_DESC
    EXTRINSICS_MIN_BLOCK_NUMBER_ASC
    EXTRINSICS_MIN_BLOCK_NUMBER_DESC
    EXTRINSICS_MIN_HASH_ASC
    EXTRINSICS_MIN_HASH_DESC
    EXTRINSICS_MIN_ID_ASC
    EXTRINSICS_MIN_ID_DESC
    EXTRINSICS_MIN_INDEX_ASC
    EXTRINSICS_MIN_INDEX_DESC
    EXTRINSICS_MIN_IS_SIGNED_ASC
    EXTRINSICS_MIN_IS_SIGNED_DESC
    EXTRINSICS_MIN_IS_SUCCESS_ASC
    EXTRINSICS_MIN_IS_SUCCESS_DESC
    EXTRINSICS_MIN_METHOD_ASC
    EXTRINSICS_MIN_METHOD_DESC
    EXTRINSICS_MIN_MODULE_ASC
    EXTRINSICS_MIN_MODULE_DESC
    EXTRINSICS_MIN_SIGNER_ID_ASC
    EXTRINSICS_MIN_SIGNER_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_ARGUMENTS_ASC
    EXTRINSICS_STDDEV_POPULATION_ARGUMENTS_DESC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    EXTRINSICS_STDDEV_POPULATION_HASH_ASC
    EXTRINSICS_STDDEV_POPULATION_HASH_DESC
    EXTRINSICS_STDDEV_POPULATION_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_INDEX_ASC
    EXTRINSICS_STDDEV_POPULATION_INDEX_DESC
    EXTRINSICS_STDDEV_POPULATION_IS_SIGNED_ASC
    EXTRINSICS_STDDEV_POPULATION_IS_SIGNED_DESC
    EXTRINSICS_STDDEV_POPULATION_IS_SUCCESS_ASC
    EXTRINSICS_STDDEV_POPULATION_IS_SUCCESS_DESC
    EXTRINSICS_STDDEV_POPULATION_METHOD_ASC
    EXTRINSICS_STDDEV_POPULATION_METHOD_DESC
    EXTRINSICS_STDDEV_POPULATION_MODULE_ASC
    EXTRINSICS_STDDEV_POPULATION_MODULE_DESC
    EXTRINSICS_STDDEV_POPULATION_SIGNER_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_SIGNER_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_ARGUMENTS_ASC
    EXTRINSICS_STDDEV_SAMPLE_ARGUMENTS_DESC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    EXTRINSICS_STDDEV_SAMPLE_HASH_ASC
    EXTRINSICS_STDDEV_SAMPLE_HASH_DESC
    EXTRINSICS_STDDEV_SAMPLE_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_INDEX_ASC
    EXTRINSICS_STDDEV_SAMPLE_INDEX_DESC
    EXTRINSICS_STDDEV_SAMPLE_IS_SIGNED_ASC
    EXTRINSICS_STDDEV_SAMPLE_IS_SIGNED_DESC
    EXTRINSICS_STDDEV_SAMPLE_IS_SUCCESS_ASC
    EXTRINSICS_STDDEV_SAMPLE_IS_SUCCESS_DESC
    EXTRINSICS_STDDEV_SAMPLE_METHOD_ASC
    EXTRINSICS_STDDEV_SAMPLE_METHOD_DESC
    EXTRINSICS_STDDEV_SAMPLE_MODULE_ASC
    EXTRINSICS_STDDEV_SAMPLE_MODULE_DESC
    EXTRINSICS_STDDEV_SAMPLE_SIGNER_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_SIGNER_ID_DESC
    EXTRINSICS_SUM_ARGUMENTS_ASC
    EXTRINSICS_SUM_ARGUMENTS_DESC
    EXTRINSICS_SUM_BLOCK_ID_ASC
    EXTRINSICS_SUM_BLOCK_ID_DESC
    EXTRINSICS_SUM_BLOCK_NUMBER_ASC
    EXTRINSICS_SUM_BLOCK_NUMBER_DESC
    EXTRINSICS_SUM_HASH_ASC
    EXTRINSICS_SUM_HASH_DESC
    EXTRINSICS_SUM_ID_ASC
    EXTRINSICS_SUM_ID_DESC
    EXTRINSICS_SUM_INDEX_ASC
    EXTRINSICS_SUM_INDEX_DESC
    EXTRINSICS_SUM_IS_SIGNED_ASC
    EXTRINSICS_SUM_IS_SIGNED_DESC
    EXTRINSICS_SUM_IS_SUCCESS_ASC
    EXTRINSICS_SUM_IS_SUCCESS_DESC
    EXTRINSICS_SUM_METHOD_ASC
    EXTRINSICS_SUM_METHOD_DESC
    EXTRINSICS_SUM_MODULE_ASC
    EXTRINSICS_SUM_MODULE_DESC
    EXTRINSICS_SUM_SIGNER_ID_ASC
    EXTRINSICS_SUM_SIGNER_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_ARGUMENTS_ASC
    EXTRINSICS_VARIANCE_POPULATION_ARGUMENTS_DESC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    EXTRINSICS_VARIANCE_POPULATION_HASH_ASC
    EXTRINSICS_VARIANCE_POPULATION_HASH_DESC
    EXTRINSICS_VARIANCE_POPULATION_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_INDEX_ASC
    EXTRINSICS_VARIANCE_POPULATION_INDEX_DESC
    EXTRINSICS_VARIANCE_POPULATION_IS_SIGNED_ASC
    EXTRINSICS_VARIANCE_POPULATION_IS_SIGNED_DESC
    EXTRINSICS_VARIANCE_POPULATION_IS_SUCCESS_ASC
    EXTRINSICS_VARIANCE_POPULATION_IS_SUCCESS_DESC
    EXTRINSICS_VARIANCE_POPULATION_METHOD_ASC
    EXTRINSICS_VARIANCE_POPULATION_METHOD_DESC
    EXTRINSICS_VARIANCE_POPULATION_MODULE_ASC
    EXTRINSICS_VARIANCE_POPULATION_MODULE_DESC
    EXTRINSICS_VARIANCE_POPULATION_SIGNER_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_SIGNER_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_ARGUMENTS_ASC
    EXTRINSICS_VARIANCE_SAMPLE_ARGUMENTS_DESC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    EXTRINSICS_VARIANCE_SAMPLE_HASH_ASC
    EXTRINSICS_VARIANCE_SAMPLE_HASH_DESC
    EXTRINSICS_VARIANCE_SAMPLE_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_INDEX_ASC
    EXTRINSICS_VARIANCE_SAMPLE_INDEX_DESC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SIGNED_ASC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SIGNED_DESC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SUCCESS_ASC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SUCCESS_DESC
    EXTRINSICS_VARIANCE_SAMPLE_METHOD_ASC
    EXTRINSICS_VARIANCE_SAMPLE_METHOD_DESC
    EXTRINSICS_VARIANCE_SAMPLE_MODULE_ASC
    EXTRINSICS_VARIANCE_SAMPLE_MODULE_DESC
    EXTRINSICS_VARIANCE_SAMPLE_SIGNER_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_SIGNER_ID_DESC
    HEART_BEATS_AVERAGE_ACCOUNT_ID_ASC
    HEART_BEATS_AVERAGE_ACCOUNT_ID_DESC
    HEART_BEATS_AVERAGE_BLOCK_NUMBER_ASC
    HEART_BEATS_AVERAGE_BLOCK_NUMBER_DESC
    HEART_BEATS_AVERAGE_ID_ASC
    HEART_BEATS_AVERAGE_ID_DESC
    HEART_BEATS_AVERAGE_SESSION_ID_ASC
    HEART_BEATS_AVERAGE_SESSION_ID_DESC
    HEART_BEATS_COUNT_ASC
    HEART_BEATS_COUNT_DESC
    HEART_BEATS_DISTINCT_COUNT_ACCOUNT_ID_ASC
    HEART_BEATS_DISTINCT_COUNT_ACCOUNT_ID_DESC
    HEART_BEATS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    HEART_BEATS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    HEART_BEATS_DISTINCT_COUNT_ID_ASC
    HEART_BEATS_DISTINCT_COUNT_ID_DESC
    HEART_BEATS_DISTINCT_COUNT_SESSION_ID_ASC
    HEART_BEATS_DISTINCT_COUNT_SESSION_ID_DESC
    HEART_BEATS_MAX_ACCOUNT_ID_ASC
    HEART_BEATS_MAX_ACCOUNT_ID_DESC
    HEART_BEATS_MAX_BLOCK_NUMBER_ASC
    HEART_BEATS_MAX_BLOCK_NUMBER_DESC
    HEART_BEATS_MAX_ID_ASC
    HEART_BEATS_MAX_ID_DESC
    HEART_BEATS_MAX_SESSION_ID_ASC
    HEART_BEATS_MAX_SESSION_ID_DESC
    HEART_BEATS_MIN_ACCOUNT_ID_ASC
    HEART_BEATS_MIN_ACCOUNT_ID_DESC
    HEART_BEATS_MIN_BLOCK_NUMBER_ASC
    HEART_BEATS_MIN_BLOCK_NUMBER_DESC
    HEART_BEATS_MIN_ID_ASC
    HEART_BEATS_MIN_ID_DESC
    HEART_BEATS_MIN_SESSION_ID_ASC
    HEART_BEATS_MIN_SESSION_ID_DESC
    HEART_BEATS_STDDEV_POPULATION_ACCOUNT_ID_ASC
    HEART_BEATS_STDDEV_POPULATION_ACCOUNT_ID_DESC
    HEART_BEATS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    HEART_BEATS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    HEART_BEATS_STDDEV_POPULATION_ID_ASC
    HEART_BEATS_STDDEV_POPULATION_ID_DESC
    HEART_BEATS_STDDEV_POPULATION_SESSION_ID_ASC
    HEART_BEATS_STDDEV_POPULATION_SESSION_ID_DESC
    HEART_BEATS_STDDEV_SAMPLE_ACCOUNT_ID_ASC
    HEART_BEATS_STDDEV_SAMPLE_ACCOUNT_ID_DESC
    HEART_BEATS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    HEART_BEATS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    HEART_BEATS_STDDEV_SAMPLE_ID_ASC
    HEART_BEATS_STDDEV_SAMPLE_ID_DESC
    HEART_BEATS_STDDEV_SAMPLE_SESSION_ID_ASC
    HEART_BEATS_STDDEV_SAMPLE_SESSION_ID_DESC
    HEART_BEATS_SUM_ACCOUNT_ID_ASC
    HEART_BEATS_SUM_ACCOUNT_ID_DESC
    HEART_BEATS_SUM_BLOCK_NUMBER_ASC
    HEART_BEATS_SUM_BLOCK_NUMBER_DESC
    HEART_BEATS_SUM_ID_ASC
    HEART_BEATS_SUM_ID_DESC
    HEART_BEATS_SUM_SESSION_ID_ASC
    HEART_BEATS_SUM_SESSION_ID_DESC
    HEART_BEATS_VARIANCE_POPULATION_ACCOUNT_ID_ASC
    HEART_BEATS_VARIANCE_POPULATION_ACCOUNT_ID_DESC
    HEART_BEATS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    HEART_BEATS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    HEART_BEATS_VARIANCE_POPULATION_ID_ASC
    HEART_BEATS_VARIANCE_POPULATION_ID_DESC
    HEART_BEATS_VARIANCE_POPULATION_SESSION_ID_ASC
    HEART_BEATS_VARIANCE_POPULATION_SESSION_ID_DESC
    HEART_BEATS_VARIANCE_SAMPLE_ACCOUNT_ID_ASC
    HEART_BEATS_VARIANCE_SAMPLE_ACCOUNT_ID_DESC
    HEART_BEATS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    HEART_BEATS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    HEART_BEATS_VARIANCE_SAMPLE_ID_ASC
    HEART_BEATS_VARIANCE_SAMPLE_ID_DESC
    HEART_BEATS_VARIANCE_SAMPLE_SESSION_ID_ASC
    HEART_BEATS_VARIANCE_SAMPLE_SESSION_ID_DESC
    ID_ASC
    ID_DESC
    IMAGE_ASC
    IMAGE_DESC
    LEGAL_ASC
    LEGAL_DESC
    NATURAL
    PGP_FINGERPRINT_ASC
    PGP_FINGERPRINT_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSERS_AVERAGE_ACCOUNT_ID_ASC
    PROPOSERS_AVERAGE_ACCOUNT_ID_DESC
    PROPOSERS_AVERAGE_ID_ASC
    PROPOSERS_AVERAGE_ID_DESC
    PROPOSERS_COUNT_ASC
    PROPOSERS_COUNT_DESC
    PROPOSERS_DISTINCT_COUNT_ACCOUNT_ID_ASC
    PROPOSERS_DISTINCT_COUNT_ACCOUNT_ID_DESC
    PROPOSERS_DISTINCT_COUNT_ID_ASC
    PROPOSERS_DISTINCT_COUNT_ID_DESC
    PROPOSERS_MAX_ACCOUNT_ID_ASC
    PROPOSERS_MAX_ACCOUNT_ID_DESC
    PROPOSERS_MAX_ID_ASC
    PROPOSERS_MAX_ID_DESC
    PROPOSERS_MIN_ACCOUNT_ID_ASC
    PROPOSERS_MIN_ACCOUNT_ID_DESC
    PROPOSERS_MIN_ID_ASC
    PROPOSERS_MIN_ID_DESC
    PROPOSERS_STDDEV_POPULATION_ACCOUNT_ID_ASC
    PROPOSERS_STDDEV_POPULATION_ACCOUNT_ID_DESC
    PROPOSERS_STDDEV_POPULATION_ID_ASC
    PROPOSERS_STDDEV_POPULATION_ID_DESC
    PROPOSERS_STDDEV_SAMPLE_ACCOUNT_ID_ASC
    PROPOSERS_STDDEV_SAMPLE_ACCOUNT_ID_DESC
    PROPOSERS_STDDEV_SAMPLE_ID_ASC
    PROPOSERS_STDDEV_SAMPLE_ID_DESC
    PROPOSERS_SUM_ACCOUNT_ID_ASC
    PROPOSERS_SUM_ACCOUNT_ID_DESC
    PROPOSERS_SUM_ID_ASC
    PROPOSERS_SUM_ID_DESC
    PROPOSERS_VARIANCE_POPULATION_ACCOUNT_ID_ASC
    PROPOSERS_VARIANCE_POPULATION_ACCOUNT_ID_DESC
    PROPOSERS_VARIANCE_POPULATION_ID_ASC
    PROPOSERS_VARIANCE_POPULATION_ID_DESC
    PROPOSERS_VARIANCE_SAMPLE_ACCOUNT_ID_ASC
    PROPOSERS_VARIANCE_SAMPLE_ACCOUNT_ID_DESC
    PROPOSERS_VARIANCE_SAMPLE_ID_ASC
    PROPOSERS_VARIANCE_SAMPLE_ID_DESC
    RIOT_ASC
    RIOT_DESC
    TWITTER_ASC
    TWITTER_DESC
    VALIDATORS_AVERAGE_ACCOUNT_ID_ASC
    VALIDATORS_AVERAGE_ACCOUNT_ID_DESC
    VALIDATORS_AVERAGE_AUTHORITY_ID_ASC
    VALIDATORS_AVERAGE_AUTHORITY_ID_DESC
    VALIDATORS_AVERAGE_ID_ASC
    VALIDATORS_AVERAGE_ID_DESC
    VALIDATORS_COUNT_ASC
    VALIDATORS_COUNT_DESC
    VALIDATORS_DISTINCT_COUNT_ACCOUNT_ID_ASC
    VALIDATORS_DISTINCT_COUNT_ACCOUNT_ID_DESC
    VALIDATORS_DISTINCT_COUNT_AUTHORITY_ID_ASC
    VALIDATORS_DISTINCT_COUNT_AUTHORITY_ID_DESC
    VALIDATORS_DISTINCT_COUNT_ID_ASC
    VALIDATORS_DISTINCT_COUNT_ID_DESC
    VALIDATORS_MAX_ACCOUNT_ID_ASC
    VALIDATORS_MAX_ACCOUNT_ID_DESC
    VALIDATORS_MAX_AUTHORITY_ID_ASC
    VALIDATORS_MAX_AUTHORITY_ID_DESC
    VALIDATORS_MAX_ID_ASC
    VALIDATORS_MAX_ID_DESC
    VALIDATORS_MIN_ACCOUNT_ID_ASC
    VALIDATORS_MIN_ACCOUNT_ID_DESC
    VALIDATORS_MIN_AUTHORITY_ID_ASC
    VALIDATORS_MIN_AUTHORITY_ID_DESC
    VALIDATORS_MIN_ID_ASC
    VALIDATORS_MIN_ID_DESC
    VALIDATORS_STDDEV_POPULATION_ACCOUNT_ID_ASC
    VALIDATORS_STDDEV_POPULATION_ACCOUNT_ID_DESC
    VALIDATORS_STDDEV_POPULATION_AUTHORITY_ID_ASC
    VALIDATORS_STDDEV_POPULATION_AUTHORITY_ID_DESC
    VALIDATORS_STDDEV_POPULATION_ID_ASC
    VALIDATORS_STDDEV_POPULATION_ID_DESC
    VALIDATORS_STDDEV_SAMPLE_ACCOUNT_ID_ASC
    VALIDATORS_STDDEV_SAMPLE_ACCOUNT_ID_DESC
    VALIDATORS_STDDEV_SAMPLE_AUTHORITY_ID_ASC
    VALIDATORS_STDDEV_SAMPLE_AUTHORITY_ID_DESC
    VALIDATORS_STDDEV_SAMPLE_ID_ASC
    VALIDATORS_STDDEV_SAMPLE_ID_DESC
    VALIDATORS_SUM_ACCOUNT_ID_ASC
    VALIDATORS_SUM_ACCOUNT_ID_DESC
    VALIDATORS_SUM_AUTHORITY_ID_ASC
    VALIDATORS_SUM_AUTHORITY_ID_DESC
    VALIDATORS_SUM_ID_ASC
    VALIDATORS_SUM_ID_DESC
    VALIDATORS_VARIANCE_POPULATION_ACCOUNT_ID_ASC
    VALIDATORS_VARIANCE_POPULATION_ACCOUNT_ID_DESC
    VALIDATORS_VARIANCE_POPULATION_AUTHORITY_ID_ASC
    VALIDATORS_VARIANCE_POPULATION_AUTHORITY_ID_DESC
    VALIDATORS_VARIANCE_POPULATION_ID_ASC
    VALIDATORS_VARIANCE_POPULATION_ID_DESC
    VALIDATORS_VARIANCE_SAMPLE_ACCOUNT_ID_ASC
    VALIDATORS_VARIANCE_SAMPLE_ACCOUNT_ID_DESC
    VALIDATORS_VARIANCE_SAMPLE_AUTHORITY_ID_ASC
    VALIDATORS_VARIANCE_SAMPLE_AUTHORITY_ID_DESC
    VALIDATORS_VARIANCE_SAMPLE_ID_ASC
    VALIDATORS_VARIANCE_SAMPLE_ID_DESC
    WEB_ASC
    WEB_DESC
}

"@enum\\n@enumName ProposalStatus"
enum AppEnum155D64Ff70 {
    Accepted
    Executed
    FailedToExecute
    Open
    Rejected
    Removed
    Signed
}

"@enum\\n@enumName ThresholdVariant"
enum AppEnum790A3Fe4Ce {
    KEY_GEN
    PROPOSER
    SIGNATURE
}

"@enum\\n@enumName ProposalType"
enum AppEnumB6165934C8 {
    AnchorCreateProposal
    AnchorUpdateProposal
    EvmProposal
    FeeRecipientUpdateProposal
    MaxDepositLimitUpdateProposal
    MinWithdrawalLimitUpdateProposal
    ProposerSetUpdateProposal
    RefreshVote
    RescueTokensProposal
    ResourceIdUpdateProposal
    SetTreasuryHandlerProposal
    SetVerifierProposal
    TokenAddProposal
    TokenRemoveProposal
    Unknown
    WrappingFeeUpdateProposal
}

"@enum\\n@enumName VoteType"
enum AppEnumFe385C7221 {
    ABSTAIN
    AGAINST
    FOR
}

"Grouping methods for `Authority` for usage during aggregation."
enum AuthoritiesGroupBy {
    BLOCK_ID
    CURRENT
    NEXT
}

"Methods to use when ordering `Authority`."
enum AuthoritiesOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    CURRENT_ASC
    CURRENT_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NEXT_ASC
    NEXT_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
}

"Grouping methods for `Block` for usage during aggregation."
enum BlocksGroupBy {
    EXTRINSICS_ROOT
    HASH
    PARENT_HASH
    SPEC_VERSION
    STATE_ROOT
    TIMESTAMP
    TIMESTAMP_TRUNCATED_TO_DAY
    TIMESTAMP_TRUNCATED_TO_HOUR
}

"Methods to use when ordering `Block`."
enum BlocksOrderBy {
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_WEB_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_COUNT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_COUNT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_WEB_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_WEB_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_WEB_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_WEB_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_WEB_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_WEB_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_WEB_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_DISPLAY_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_DISPLAY_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_EMAIL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_EMAIL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_IMAGE_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_IMAGE_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_LEGAL_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_LEGAL_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_PGP_FINGERPRINT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_PGP_FINGERPRINT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_RIOT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_RIOT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_TWITTER_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_TWITTER_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_WEB_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_WEB_DESC
    AUTHORITIES_AVERAGE_BLOCK_ID_ASC
    AUTHORITIES_AVERAGE_BLOCK_ID_DESC
    AUTHORITIES_AVERAGE_CURRENT_ASC
    AUTHORITIES_AVERAGE_CURRENT_DESC
    AUTHORITIES_AVERAGE_ID_ASC
    AUTHORITIES_AVERAGE_ID_DESC
    AUTHORITIES_AVERAGE_NEXT_ASC
    AUTHORITIES_AVERAGE_NEXT_DESC
    AUTHORITIES_COUNT_ASC
    AUTHORITIES_COUNT_DESC
    AUTHORITIES_DISTINCT_COUNT_BLOCK_ID_ASC
    AUTHORITIES_DISTINCT_COUNT_BLOCK_ID_DESC
    AUTHORITIES_DISTINCT_COUNT_CURRENT_ASC
    AUTHORITIES_DISTINCT_COUNT_CURRENT_DESC
    AUTHORITIES_DISTINCT_COUNT_ID_ASC
    AUTHORITIES_DISTINCT_COUNT_ID_DESC
    AUTHORITIES_DISTINCT_COUNT_NEXT_ASC
    AUTHORITIES_DISTINCT_COUNT_NEXT_DESC
    AUTHORITIES_MAX_BLOCK_ID_ASC
    AUTHORITIES_MAX_BLOCK_ID_DESC
    AUTHORITIES_MAX_CURRENT_ASC
    AUTHORITIES_MAX_CURRENT_DESC
    AUTHORITIES_MAX_ID_ASC
    AUTHORITIES_MAX_ID_DESC
    AUTHORITIES_MAX_NEXT_ASC
    AUTHORITIES_MAX_NEXT_DESC
    AUTHORITIES_MIN_BLOCK_ID_ASC
    AUTHORITIES_MIN_BLOCK_ID_DESC
    AUTHORITIES_MIN_CURRENT_ASC
    AUTHORITIES_MIN_CURRENT_DESC
    AUTHORITIES_MIN_ID_ASC
    AUTHORITIES_MIN_ID_DESC
    AUTHORITIES_MIN_NEXT_ASC
    AUTHORITIES_MIN_NEXT_DESC
    AUTHORITIES_STDDEV_POPULATION_BLOCK_ID_ASC
    AUTHORITIES_STDDEV_POPULATION_BLOCK_ID_DESC
    AUTHORITIES_STDDEV_POPULATION_CURRENT_ASC
    AUTHORITIES_STDDEV_POPULATION_CURRENT_DESC
    AUTHORITIES_STDDEV_POPULATION_ID_ASC
    AUTHORITIES_STDDEV_POPULATION_ID_DESC
    AUTHORITIES_STDDEV_POPULATION_NEXT_ASC
    AUTHORITIES_STDDEV_POPULATION_NEXT_DESC
    AUTHORITIES_STDDEV_SAMPLE_BLOCK_ID_ASC
    AUTHORITIES_STDDEV_SAMPLE_BLOCK_ID_DESC
    AUTHORITIES_STDDEV_SAMPLE_CURRENT_ASC
    AUTHORITIES_STDDEV_SAMPLE_CURRENT_DESC
    AUTHORITIES_STDDEV_SAMPLE_ID_ASC
    AUTHORITIES_STDDEV_SAMPLE_ID_DESC
    AUTHORITIES_STDDEV_SAMPLE_NEXT_ASC
    AUTHORITIES_STDDEV_SAMPLE_NEXT_DESC
    AUTHORITIES_SUM_BLOCK_ID_ASC
    AUTHORITIES_SUM_BLOCK_ID_DESC
    AUTHORITIES_SUM_CURRENT_ASC
    AUTHORITIES_SUM_CURRENT_DESC
    AUTHORITIES_SUM_ID_ASC
    AUTHORITIES_SUM_ID_DESC
    AUTHORITIES_SUM_NEXT_ASC
    AUTHORITIES_SUM_NEXT_DESC
    AUTHORITIES_VARIANCE_POPULATION_BLOCK_ID_ASC
    AUTHORITIES_VARIANCE_POPULATION_BLOCK_ID_DESC
    AUTHORITIES_VARIANCE_POPULATION_CURRENT_ASC
    AUTHORITIES_VARIANCE_POPULATION_CURRENT_DESC
    AUTHORITIES_VARIANCE_POPULATION_ID_ASC
    AUTHORITIES_VARIANCE_POPULATION_ID_DESC
    AUTHORITIES_VARIANCE_POPULATION_NEXT_ASC
    AUTHORITIES_VARIANCE_POPULATION_NEXT_DESC
    AUTHORITIES_VARIANCE_SAMPLE_BLOCK_ID_ASC
    AUTHORITIES_VARIANCE_SAMPLE_BLOCK_ID_DESC
    AUTHORITIES_VARIANCE_SAMPLE_CURRENT_ASC
    AUTHORITIES_VARIANCE_SAMPLE_CURRENT_DESC
    AUTHORITIES_VARIANCE_SAMPLE_ID_ASC
    AUTHORITIES_VARIANCE_SAMPLE_ID_DESC
    AUTHORITIES_VARIANCE_SAMPLE_NEXT_ASC
    AUTHORITIES_VARIANCE_SAMPLE_NEXT_DESC
    EVENTS_AVERAGE_ARGUMENTS_ASC
    EVENTS_AVERAGE_ARGUMENTS_DESC
    EVENTS_AVERAGE_BLOCK_ID_ASC
    EVENTS_AVERAGE_BLOCK_ID_DESC
    EVENTS_AVERAGE_BLOCK_NUMBER_ASC
    EVENTS_AVERAGE_BLOCK_NUMBER_DESC
    EVENTS_AVERAGE_DATA_ASC
    EVENTS_AVERAGE_DATA_DESC
    EVENTS_AVERAGE_DOCS_ASC
    EVENTS_AVERAGE_DOCS_DESC
    EVENTS_AVERAGE_EXTRINSIC_ID_ASC
    EVENTS_AVERAGE_EXTRINSIC_ID_DESC
    EVENTS_AVERAGE_ID_ASC
    EVENTS_AVERAGE_ID_DESC
    EVENTS_AVERAGE_INDEX_ASC
    EVENTS_AVERAGE_INDEX_DESC
    EVENTS_AVERAGE_METHOD_ASC
    EVENTS_AVERAGE_METHOD_DESC
    EVENTS_AVERAGE_MODULE_ASC
    EVENTS_AVERAGE_MODULE_DESC
    EVENTS_AVERAGE_TIMESTAMP_ASC
    EVENTS_AVERAGE_TIMESTAMP_DESC
    EVENTS_COUNT_ASC
    EVENTS_COUNT_DESC
    EVENTS_DISTINCT_COUNT_ARGUMENTS_ASC
    EVENTS_DISTINCT_COUNT_ARGUMENTS_DESC
    EVENTS_DISTINCT_COUNT_BLOCK_ID_ASC
    EVENTS_DISTINCT_COUNT_BLOCK_ID_DESC
    EVENTS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    EVENTS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    EVENTS_DISTINCT_COUNT_DATA_ASC
    EVENTS_DISTINCT_COUNT_DATA_DESC
    EVENTS_DISTINCT_COUNT_DOCS_ASC
    EVENTS_DISTINCT_COUNT_DOCS_DESC
    EVENTS_DISTINCT_COUNT_EXTRINSIC_ID_ASC
    EVENTS_DISTINCT_COUNT_EXTRINSIC_ID_DESC
    EVENTS_DISTINCT_COUNT_ID_ASC
    EVENTS_DISTINCT_COUNT_ID_DESC
    EVENTS_DISTINCT_COUNT_INDEX_ASC
    EVENTS_DISTINCT_COUNT_INDEX_DESC
    EVENTS_DISTINCT_COUNT_METHOD_ASC
    EVENTS_DISTINCT_COUNT_METHOD_DESC
    EVENTS_DISTINCT_COUNT_MODULE_ASC
    EVENTS_DISTINCT_COUNT_MODULE_DESC
    EVENTS_DISTINCT_COUNT_TIMESTAMP_ASC
    EVENTS_DISTINCT_COUNT_TIMESTAMP_DESC
    EVENTS_MAX_ARGUMENTS_ASC
    EVENTS_MAX_ARGUMENTS_DESC
    EVENTS_MAX_BLOCK_ID_ASC
    EVENTS_MAX_BLOCK_ID_DESC
    EVENTS_MAX_BLOCK_NUMBER_ASC
    EVENTS_MAX_BLOCK_NUMBER_DESC
    EVENTS_MAX_DATA_ASC
    EVENTS_MAX_DATA_DESC
    EVENTS_MAX_DOCS_ASC
    EVENTS_MAX_DOCS_DESC
    EVENTS_MAX_EXTRINSIC_ID_ASC
    EVENTS_MAX_EXTRINSIC_ID_DESC
    EVENTS_MAX_ID_ASC
    EVENTS_MAX_ID_DESC
    EVENTS_MAX_INDEX_ASC
    EVENTS_MAX_INDEX_DESC
    EVENTS_MAX_METHOD_ASC
    EVENTS_MAX_METHOD_DESC
    EVENTS_MAX_MODULE_ASC
    EVENTS_MAX_MODULE_DESC
    EVENTS_MAX_TIMESTAMP_ASC
    EVENTS_MAX_TIMESTAMP_DESC
    EVENTS_MIN_ARGUMENTS_ASC
    EVENTS_MIN_ARGUMENTS_DESC
    EVENTS_MIN_BLOCK_ID_ASC
    EVENTS_MIN_BLOCK_ID_DESC
    EVENTS_MIN_BLOCK_NUMBER_ASC
    EVENTS_MIN_BLOCK_NUMBER_DESC
    EVENTS_MIN_DATA_ASC
    EVENTS_MIN_DATA_DESC
    EVENTS_MIN_DOCS_ASC
    EVENTS_MIN_DOCS_DESC
    EVENTS_MIN_EXTRINSIC_ID_ASC
    EVENTS_MIN_EXTRINSIC_ID_DESC
    EVENTS_MIN_ID_ASC
    EVENTS_MIN_ID_DESC
    EVENTS_MIN_INDEX_ASC
    EVENTS_MIN_INDEX_DESC
    EVENTS_MIN_METHOD_ASC
    EVENTS_MIN_METHOD_DESC
    EVENTS_MIN_MODULE_ASC
    EVENTS_MIN_MODULE_DESC
    EVENTS_MIN_TIMESTAMP_ASC
    EVENTS_MIN_TIMESTAMP_DESC
    EVENTS_STDDEV_POPULATION_ARGUMENTS_ASC
    EVENTS_STDDEV_POPULATION_ARGUMENTS_DESC
    EVENTS_STDDEV_POPULATION_BLOCK_ID_ASC
    EVENTS_STDDEV_POPULATION_BLOCK_ID_DESC
    EVENTS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    EVENTS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    EVENTS_STDDEV_POPULATION_DATA_ASC
    EVENTS_STDDEV_POPULATION_DATA_DESC
    EVENTS_STDDEV_POPULATION_DOCS_ASC
    EVENTS_STDDEV_POPULATION_DOCS_DESC
    EVENTS_STDDEV_POPULATION_EXTRINSIC_ID_ASC
    EVENTS_STDDEV_POPULATION_EXTRINSIC_ID_DESC
    EVENTS_STDDEV_POPULATION_ID_ASC
    EVENTS_STDDEV_POPULATION_ID_DESC
    EVENTS_STDDEV_POPULATION_INDEX_ASC
    EVENTS_STDDEV_POPULATION_INDEX_DESC
    EVENTS_STDDEV_POPULATION_METHOD_ASC
    EVENTS_STDDEV_POPULATION_METHOD_DESC
    EVENTS_STDDEV_POPULATION_MODULE_ASC
    EVENTS_STDDEV_POPULATION_MODULE_DESC
    EVENTS_STDDEV_POPULATION_TIMESTAMP_ASC
    EVENTS_STDDEV_POPULATION_TIMESTAMP_DESC
    EVENTS_STDDEV_SAMPLE_ARGUMENTS_ASC
    EVENTS_STDDEV_SAMPLE_ARGUMENTS_DESC
    EVENTS_STDDEV_SAMPLE_BLOCK_ID_ASC
    EVENTS_STDDEV_SAMPLE_BLOCK_ID_DESC
    EVENTS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    EVENTS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    EVENTS_STDDEV_SAMPLE_DATA_ASC
    EVENTS_STDDEV_SAMPLE_DATA_DESC
    EVENTS_STDDEV_SAMPLE_DOCS_ASC
    EVENTS_STDDEV_SAMPLE_DOCS_DESC
    EVENTS_STDDEV_SAMPLE_EXTRINSIC_ID_ASC
    EVENTS_STDDEV_SAMPLE_EXTRINSIC_ID_DESC
    EVENTS_STDDEV_SAMPLE_ID_ASC
    EVENTS_STDDEV_SAMPLE_ID_DESC
    EVENTS_STDDEV_SAMPLE_INDEX_ASC
    EVENTS_STDDEV_SAMPLE_INDEX_DESC
    EVENTS_STDDEV_SAMPLE_METHOD_ASC
    EVENTS_STDDEV_SAMPLE_METHOD_DESC
    EVENTS_STDDEV_SAMPLE_MODULE_ASC
    EVENTS_STDDEV_SAMPLE_MODULE_DESC
    EVENTS_STDDEV_SAMPLE_TIMESTAMP_ASC
    EVENTS_STDDEV_SAMPLE_TIMESTAMP_DESC
    EVENTS_SUM_ARGUMENTS_ASC
    EVENTS_SUM_ARGUMENTS_DESC
    EVENTS_SUM_BLOCK_ID_ASC
    EVENTS_SUM_BLOCK_ID_DESC
    EVENTS_SUM_BLOCK_NUMBER_ASC
    EVENTS_SUM_BLOCK_NUMBER_DESC
    EVENTS_SUM_DATA_ASC
    EVENTS_SUM_DATA_DESC
    EVENTS_SUM_DOCS_ASC
    EVENTS_SUM_DOCS_DESC
    EVENTS_SUM_EXTRINSIC_ID_ASC
    EVENTS_SUM_EXTRINSIC_ID_DESC
    EVENTS_SUM_ID_ASC
    EVENTS_SUM_ID_DESC
    EVENTS_SUM_INDEX_ASC
    EVENTS_SUM_INDEX_DESC
    EVENTS_SUM_METHOD_ASC
    EVENTS_SUM_METHOD_DESC
    EVENTS_SUM_MODULE_ASC
    EVENTS_SUM_MODULE_DESC
    EVENTS_SUM_TIMESTAMP_ASC
    EVENTS_SUM_TIMESTAMP_DESC
    EVENTS_VARIANCE_POPULATION_ARGUMENTS_ASC
    EVENTS_VARIANCE_POPULATION_ARGUMENTS_DESC
    EVENTS_VARIANCE_POPULATION_BLOCK_ID_ASC
    EVENTS_VARIANCE_POPULATION_BLOCK_ID_DESC
    EVENTS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    EVENTS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    EVENTS_VARIANCE_POPULATION_DATA_ASC
    EVENTS_VARIANCE_POPULATION_DATA_DESC
    EVENTS_VARIANCE_POPULATION_DOCS_ASC
    EVENTS_VARIANCE_POPULATION_DOCS_DESC
    EVENTS_VARIANCE_POPULATION_EXTRINSIC_ID_ASC
    EVENTS_VARIANCE_POPULATION_EXTRINSIC_ID_DESC
    EVENTS_VARIANCE_POPULATION_ID_ASC
    EVENTS_VARIANCE_POPULATION_ID_DESC
    EVENTS_VARIANCE_POPULATION_INDEX_ASC
    EVENTS_VARIANCE_POPULATION_INDEX_DESC
    EVENTS_VARIANCE_POPULATION_METHOD_ASC
    EVENTS_VARIANCE_POPULATION_METHOD_DESC
    EVENTS_VARIANCE_POPULATION_MODULE_ASC
    EVENTS_VARIANCE_POPULATION_MODULE_DESC
    EVENTS_VARIANCE_POPULATION_TIMESTAMP_ASC
    EVENTS_VARIANCE_POPULATION_TIMESTAMP_DESC
    EVENTS_VARIANCE_SAMPLE_ARGUMENTS_ASC
    EVENTS_VARIANCE_SAMPLE_ARGUMENTS_DESC
    EVENTS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    EVENTS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    EVENTS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    EVENTS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    EVENTS_VARIANCE_SAMPLE_DATA_ASC
    EVENTS_VARIANCE_SAMPLE_DATA_DESC
    EVENTS_VARIANCE_SAMPLE_DOCS_ASC
    EVENTS_VARIANCE_SAMPLE_DOCS_DESC
    EVENTS_VARIANCE_SAMPLE_EXTRINSIC_ID_ASC
    EVENTS_VARIANCE_SAMPLE_EXTRINSIC_ID_DESC
    EVENTS_VARIANCE_SAMPLE_ID_ASC
    EVENTS_VARIANCE_SAMPLE_ID_DESC
    EVENTS_VARIANCE_SAMPLE_INDEX_ASC
    EVENTS_VARIANCE_SAMPLE_INDEX_DESC
    EVENTS_VARIANCE_SAMPLE_METHOD_ASC
    EVENTS_VARIANCE_SAMPLE_METHOD_DESC
    EVENTS_VARIANCE_SAMPLE_MODULE_ASC
    EVENTS_VARIANCE_SAMPLE_MODULE_DESC
    EVENTS_VARIANCE_SAMPLE_TIMESTAMP_ASC
    EVENTS_VARIANCE_SAMPLE_TIMESTAMP_DESC
    EXTRINSICS_AVERAGE_ARGUMENTS_ASC
    EXTRINSICS_AVERAGE_ARGUMENTS_DESC
    EXTRINSICS_AVERAGE_BLOCK_ID_ASC
    EXTRINSICS_AVERAGE_BLOCK_ID_DESC
    EXTRINSICS_AVERAGE_BLOCK_NUMBER_ASC
    EXTRINSICS_AVERAGE_BLOCK_NUMBER_DESC
    EXTRINSICS_AVERAGE_HASH_ASC
    EXTRINSICS_AVERAGE_HASH_DESC
    EXTRINSICS_AVERAGE_ID_ASC
    EXTRINSICS_AVERAGE_ID_DESC
    EXTRINSICS_AVERAGE_INDEX_ASC
    EXTRINSICS_AVERAGE_INDEX_DESC
    EXTRINSICS_AVERAGE_IS_SIGNED_ASC
    EXTRINSICS_AVERAGE_IS_SIGNED_DESC
    EXTRINSICS_AVERAGE_IS_SUCCESS_ASC
    EXTRINSICS_AVERAGE_IS_SUCCESS_DESC
    EXTRINSICS_AVERAGE_METHOD_ASC
    EXTRINSICS_AVERAGE_METHOD_DESC
    EXTRINSICS_AVERAGE_MODULE_ASC
    EXTRINSICS_AVERAGE_MODULE_DESC
    EXTRINSICS_AVERAGE_SIGNER_ID_ASC
    EXTRINSICS_AVERAGE_SIGNER_ID_DESC
    EXTRINSICS_COUNT_ASC
    EXTRINSICS_COUNT_DESC
    EXTRINSICS_DISTINCT_COUNT_ARGUMENTS_ASC
    EXTRINSICS_DISTINCT_COUNT_ARGUMENTS_DESC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_ID_DESC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    EXTRINSICS_DISTINCT_COUNT_HASH_ASC
    EXTRINSICS_DISTINCT_COUNT_HASH_DESC
    EXTRINSICS_DISTINCT_COUNT_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_ID_DESC
    EXTRINSICS_DISTINCT_COUNT_INDEX_ASC
    EXTRINSICS_DISTINCT_COUNT_INDEX_DESC
    EXTRINSICS_DISTINCT_COUNT_IS_SIGNED_ASC
    EXTRINSICS_DISTINCT_COUNT_IS_SIGNED_DESC
    EXTRINSICS_DISTINCT_COUNT_IS_SUCCESS_ASC
    EXTRINSICS_DISTINCT_COUNT_IS_SUCCESS_DESC
    EXTRINSICS_DISTINCT_COUNT_METHOD_ASC
    EXTRINSICS_DISTINCT_COUNT_METHOD_DESC
    EXTRINSICS_DISTINCT_COUNT_MODULE_ASC
    EXTRINSICS_DISTINCT_COUNT_MODULE_DESC
    EXTRINSICS_DISTINCT_COUNT_SIGNER_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_SIGNER_ID_DESC
    EXTRINSICS_MAX_ARGUMENTS_ASC
    EXTRINSICS_MAX_ARGUMENTS_DESC
    EXTRINSICS_MAX_BLOCK_ID_ASC
    EXTRINSICS_MAX_BLOCK_ID_DESC
    EXTRINSICS_MAX_BLOCK_NUMBER_ASC
    EXTRINSICS_MAX_BLOCK_NUMBER_DESC
    EXTRINSICS_MAX_HASH_ASC
    EXTRINSICS_MAX_HASH_DESC
    EXTRINSICS_MAX_ID_ASC
    EXTRINSICS_MAX_ID_DESC
    EXTRINSICS_MAX_INDEX_ASC
    EXTRINSICS_MAX_INDEX_DESC
    EXTRINSICS_MAX_IS_SIGNED_ASC
    EXTRINSICS_MAX_IS_SIGNED_DESC
    EXTRINSICS_MAX_IS_SUCCESS_ASC
    EXTRINSICS_MAX_IS_SUCCESS_DESC
    EXTRINSICS_MAX_METHOD_ASC
    EXTRINSICS_MAX_METHOD_DESC
    EXTRINSICS_MAX_MODULE_ASC
    EXTRINSICS_MAX_MODULE_DESC
    EXTRINSICS_MAX_SIGNER_ID_ASC
    EXTRINSICS_MAX_SIGNER_ID_DESC
    EXTRINSICS_MIN_ARGUMENTS_ASC
    EXTRINSICS_MIN_ARGUMENTS_DESC
    EXTRINSICS_MIN_BLOCK_ID_ASC
    EXTRINSICS_MIN_BLOCK_ID_DESC
    EXTRINSICS_MIN_BLOCK_NUMBER_ASC
    EXTRINSICS_MIN_BLOCK_NUMBER_DESC
    EXTRINSICS_MIN_HASH_ASC
    EXTRINSICS_MIN_HASH_DESC
    EXTRINSICS_MIN_ID_ASC
    EXTRINSICS_MIN_ID_DESC
    EXTRINSICS_MIN_INDEX_ASC
    EXTRINSICS_MIN_INDEX_DESC
    EXTRINSICS_MIN_IS_SIGNED_ASC
    EXTRINSICS_MIN_IS_SIGNED_DESC
    EXTRINSICS_MIN_IS_SUCCESS_ASC
    EXTRINSICS_MIN_IS_SUCCESS_DESC
    EXTRINSICS_MIN_METHOD_ASC
    EXTRINSICS_MIN_METHOD_DESC
    EXTRINSICS_MIN_MODULE_ASC
    EXTRINSICS_MIN_MODULE_DESC
    EXTRINSICS_MIN_SIGNER_ID_ASC
    EXTRINSICS_MIN_SIGNER_ID_DESC
    EXTRINSICS_ROOT_ASC
    EXTRINSICS_ROOT_DESC
    EXTRINSICS_STDDEV_POPULATION_ARGUMENTS_ASC
    EXTRINSICS_STDDEV_POPULATION_ARGUMENTS_DESC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    EXTRINSICS_STDDEV_POPULATION_HASH_ASC
    EXTRINSICS_STDDEV_POPULATION_HASH_DESC
    EXTRINSICS_STDDEV_POPULATION_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_INDEX_ASC
    EXTRINSICS_STDDEV_POPULATION_INDEX_DESC
    EXTRINSICS_STDDEV_POPULATION_IS_SIGNED_ASC
    EXTRINSICS_STDDEV_POPULATION_IS_SIGNED_DESC
    EXTRINSICS_STDDEV_POPULATION_IS_SUCCESS_ASC
    EXTRINSICS_STDDEV_POPULATION_IS_SUCCESS_DESC
    EXTRINSICS_STDDEV_POPULATION_METHOD_ASC
    EXTRINSICS_STDDEV_POPULATION_METHOD_DESC
    EXTRINSICS_STDDEV_POPULATION_MODULE_ASC
    EXTRINSICS_STDDEV_POPULATION_MODULE_DESC
    EXTRINSICS_STDDEV_POPULATION_SIGNER_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_SIGNER_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_ARGUMENTS_ASC
    EXTRINSICS_STDDEV_SAMPLE_ARGUMENTS_DESC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    EXTRINSICS_STDDEV_SAMPLE_HASH_ASC
    EXTRINSICS_STDDEV_SAMPLE_HASH_DESC
    EXTRINSICS_STDDEV_SAMPLE_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_INDEX_ASC
    EXTRINSICS_STDDEV_SAMPLE_INDEX_DESC
    EXTRINSICS_STDDEV_SAMPLE_IS_SIGNED_ASC
    EXTRINSICS_STDDEV_SAMPLE_IS_SIGNED_DESC
    EXTRINSICS_STDDEV_SAMPLE_IS_SUCCESS_ASC
    EXTRINSICS_STDDEV_SAMPLE_IS_SUCCESS_DESC
    EXTRINSICS_STDDEV_SAMPLE_METHOD_ASC
    EXTRINSICS_STDDEV_SAMPLE_METHOD_DESC
    EXTRINSICS_STDDEV_SAMPLE_MODULE_ASC
    EXTRINSICS_STDDEV_SAMPLE_MODULE_DESC
    EXTRINSICS_STDDEV_SAMPLE_SIGNER_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_SIGNER_ID_DESC
    EXTRINSICS_SUM_ARGUMENTS_ASC
    EXTRINSICS_SUM_ARGUMENTS_DESC
    EXTRINSICS_SUM_BLOCK_ID_ASC
    EXTRINSICS_SUM_BLOCK_ID_DESC
    EXTRINSICS_SUM_BLOCK_NUMBER_ASC
    EXTRINSICS_SUM_BLOCK_NUMBER_DESC
    EXTRINSICS_SUM_HASH_ASC
    EXTRINSICS_SUM_HASH_DESC
    EXTRINSICS_SUM_ID_ASC
    EXTRINSICS_SUM_ID_DESC
    EXTRINSICS_SUM_INDEX_ASC
    EXTRINSICS_SUM_INDEX_DESC
    EXTRINSICS_SUM_IS_SIGNED_ASC
    EXTRINSICS_SUM_IS_SIGNED_DESC
    EXTRINSICS_SUM_IS_SUCCESS_ASC
    EXTRINSICS_SUM_IS_SUCCESS_DESC
    EXTRINSICS_SUM_METHOD_ASC
    EXTRINSICS_SUM_METHOD_DESC
    EXTRINSICS_SUM_MODULE_ASC
    EXTRINSICS_SUM_MODULE_DESC
    EXTRINSICS_SUM_SIGNER_ID_ASC
    EXTRINSICS_SUM_SIGNER_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_ARGUMENTS_ASC
    EXTRINSICS_VARIANCE_POPULATION_ARGUMENTS_DESC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    EXTRINSICS_VARIANCE_POPULATION_HASH_ASC
    EXTRINSICS_VARIANCE_POPULATION_HASH_DESC
    EXTRINSICS_VARIANCE_POPULATION_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_INDEX_ASC
    EXTRINSICS_VARIANCE_POPULATION_INDEX_DESC
    EXTRINSICS_VARIANCE_POPULATION_IS_SIGNED_ASC
    EXTRINSICS_VARIANCE_POPULATION_IS_SIGNED_DESC
    EXTRINSICS_VARIANCE_POPULATION_IS_SUCCESS_ASC
    EXTRINSICS_VARIANCE_POPULATION_IS_SUCCESS_DESC
    EXTRINSICS_VARIANCE_POPULATION_METHOD_ASC
    EXTRINSICS_VARIANCE_POPULATION_METHOD_DESC
    EXTRINSICS_VARIANCE_POPULATION_MODULE_ASC
    EXTRINSICS_VARIANCE_POPULATION_MODULE_DESC
    EXTRINSICS_VARIANCE_POPULATION_SIGNER_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_SIGNER_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_ARGUMENTS_ASC
    EXTRINSICS_VARIANCE_SAMPLE_ARGUMENTS_DESC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    EXTRINSICS_VARIANCE_SAMPLE_HASH_ASC
    EXTRINSICS_VARIANCE_SAMPLE_HASH_DESC
    EXTRINSICS_VARIANCE_SAMPLE_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_INDEX_ASC
    EXTRINSICS_VARIANCE_SAMPLE_INDEX_DESC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SIGNED_ASC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SIGNED_DESC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SUCCESS_ASC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SUCCESS_DESC
    EXTRINSICS_VARIANCE_SAMPLE_METHOD_ASC
    EXTRINSICS_VARIANCE_SAMPLE_METHOD_DESC
    EXTRINSICS_VARIANCE_SAMPLE_MODULE_ASC
    EXTRINSICS_VARIANCE_SAMPLE_MODULE_DESC
    EXTRINSICS_VARIANCE_SAMPLE_SIGNER_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_SIGNER_ID_DESC
    HASH_ASC
    HASH_DESC
    ID_ASC
    ID_DESC
    KEYGEN_THRESHOLDS_AVERAGE_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_AVERAGE_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_AVERAGE_CURRENT_ASC
    KEYGEN_THRESHOLDS_AVERAGE_CURRENT_DESC
    KEYGEN_THRESHOLDS_AVERAGE_ID_ASC
    KEYGEN_THRESHOLDS_AVERAGE_ID_DESC
    KEYGEN_THRESHOLDS_AVERAGE_NEXT_ASC
    KEYGEN_THRESHOLDS_AVERAGE_NEXT_DESC
    KEYGEN_THRESHOLDS_AVERAGE_PENDING_ASC
    KEYGEN_THRESHOLDS_AVERAGE_PENDING_DESC
    KEYGEN_THRESHOLDS_COUNT_ASC
    KEYGEN_THRESHOLDS_COUNT_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_CURRENT_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_CURRENT_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_ID_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_ID_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_NEXT_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_NEXT_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_PENDING_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_PENDING_DESC
    KEYGEN_THRESHOLDS_MAX_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_MAX_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_MAX_CURRENT_ASC
    KEYGEN_THRESHOLDS_MAX_CURRENT_DESC
    KEYGEN_THRESHOLDS_MAX_ID_ASC
    KEYGEN_THRESHOLDS_MAX_ID_DESC
    KEYGEN_THRESHOLDS_MAX_NEXT_ASC
    KEYGEN_THRESHOLDS_MAX_NEXT_DESC
    KEYGEN_THRESHOLDS_MAX_PENDING_ASC
    KEYGEN_THRESHOLDS_MAX_PENDING_DESC
    KEYGEN_THRESHOLDS_MIN_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_MIN_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_MIN_CURRENT_ASC
    KEYGEN_THRESHOLDS_MIN_CURRENT_DESC
    KEYGEN_THRESHOLDS_MIN_ID_ASC
    KEYGEN_THRESHOLDS_MIN_ID_DESC
    KEYGEN_THRESHOLDS_MIN_NEXT_ASC
    KEYGEN_THRESHOLDS_MIN_NEXT_DESC
    KEYGEN_THRESHOLDS_MIN_PENDING_ASC
    KEYGEN_THRESHOLDS_MIN_PENDING_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_CURRENT_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_CURRENT_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_ID_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_ID_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_NEXT_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_NEXT_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_PENDING_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_PENDING_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_CURRENT_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_CURRENT_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_ID_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_ID_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_NEXT_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_NEXT_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_PENDING_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_PENDING_DESC
    KEYGEN_THRESHOLDS_SUM_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_SUM_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_SUM_CURRENT_ASC
    KEYGEN_THRESHOLDS_SUM_CURRENT_DESC
    KEYGEN_THRESHOLDS_SUM_ID_ASC
    KEYGEN_THRESHOLDS_SUM_ID_DESC
    KEYGEN_THRESHOLDS_SUM_NEXT_ASC
    KEYGEN_THRESHOLDS_SUM_NEXT_DESC
    KEYGEN_THRESHOLDS_SUM_PENDING_ASC
    KEYGEN_THRESHOLDS_SUM_PENDING_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_CURRENT_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_CURRENT_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_ID_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_ID_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_NEXT_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_NEXT_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_PENDING_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_PENDING_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_CURRENT_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_CURRENT_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_ID_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_ID_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_NEXT_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_NEXT_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_PENDING_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_PENDING_DESC
    NATURAL
    NUMBER_ASC
    NUMBER_DESC
    PARENT_HASH_ASC
    PARENT_HASH_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSAL_COUNTERS_AVERAGE_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_AVERAGE_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_AVERAGE_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_AVERAGE_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_AVERAGE_ID_ASC
    PROPOSAL_COUNTERS_AVERAGE_ID_DESC
    PROPOSAL_COUNTERS_AVERAGE_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_AVERAGE_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_AVERAGE_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_AVERAGE_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_AVERAGE_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_AVERAGE_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_AVERAGE_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_AVERAGE_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_AVERAGE_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_AVERAGE_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_COUNT_ASC
    PROPOSAL_COUNTERS_COUNT_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_ID_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_ID_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_MAX_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_MAX_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_MAX_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_MAX_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_MAX_ID_ASC
    PROPOSAL_COUNTERS_MAX_ID_DESC
    PROPOSAL_COUNTERS_MAX_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_MAX_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_MAX_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_MAX_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_MAX_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_MAX_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_MAX_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_MAX_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_MAX_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_MAX_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_MIN_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_MIN_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_MIN_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_MIN_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_MIN_ID_ASC
    PROPOSAL_COUNTERS_MIN_ID_DESC
    PROPOSAL_COUNTERS_MIN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_MIN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_MIN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_MIN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_MIN_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_MIN_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_MIN_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_MIN_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_MIN_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_MIN_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_ID_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_ID_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_ID_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_ID_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_SUM_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_SUM_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_SUM_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_SUM_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_SUM_ID_ASC
    PROPOSAL_COUNTERS_SUM_ID_DESC
    PROPOSAL_COUNTERS_SUM_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_SUM_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_SUM_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_SUM_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_SUM_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_SUM_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_SUM_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_SUM_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_SUM_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_SUM_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_ID_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_ID_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_ID_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_ID_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_ITEMS_AVERAGE_BLOCK_ID_ASC
    PROPOSAL_ITEMS_AVERAGE_BLOCK_ID_DESC
    PROPOSAL_ITEMS_AVERAGE_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_AVERAGE_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_AVERAGE_CHAIN_ID_ASC
    PROPOSAL_ITEMS_AVERAGE_CHAIN_ID_DESC
    PROPOSAL_ITEMS_AVERAGE_DATA_ASC
    PROPOSAL_ITEMS_AVERAGE_DATA_DESC
    PROPOSAL_ITEMS_AVERAGE_ID_ASC
    PROPOSAL_ITEMS_AVERAGE_ID_DESC
    PROPOSAL_ITEMS_AVERAGE_NONCE_ASC
    PROPOSAL_ITEMS_AVERAGE_NONCE_DESC
    PROPOSAL_ITEMS_AVERAGE_REMOVED_ASC
    PROPOSAL_ITEMS_AVERAGE_REMOVED_DESC
    PROPOSAL_ITEMS_AVERAGE_SIGNATURE_ASC
    PROPOSAL_ITEMS_AVERAGE_SIGNATURE_DESC
    PROPOSAL_ITEMS_AVERAGE_STATUS_ASC
    PROPOSAL_ITEMS_AVERAGE_STATUS_DESC
    PROPOSAL_ITEMS_AVERAGE_TYPE_ASC
    PROPOSAL_ITEMS_AVERAGE_TYPE_DESC
    PROPOSAL_ITEMS_COUNT_ASC
    PROPOSAL_ITEMS_COUNT_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_CHAIN_ID_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_CHAIN_ID_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_DATA_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_DATA_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_ID_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_ID_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_NONCE_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_NONCE_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_REMOVED_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_REMOVED_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_SIGNATURE_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_SIGNATURE_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_STATUS_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_STATUS_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_TYPE_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_TYPE_DESC
    PROPOSAL_ITEMS_MAX_BLOCK_ID_ASC
    PROPOSAL_ITEMS_MAX_BLOCK_ID_DESC
    PROPOSAL_ITEMS_MAX_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_MAX_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_MAX_CHAIN_ID_ASC
    PROPOSAL_ITEMS_MAX_CHAIN_ID_DESC
    PROPOSAL_ITEMS_MAX_DATA_ASC
    PROPOSAL_ITEMS_MAX_DATA_DESC
    PROPOSAL_ITEMS_MAX_ID_ASC
    PROPOSAL_ITEMS_MAX_ID_DESC
    PROPOSAL_ITEMS_MAX_NONCE_ASC
    PROPOSAL_ITEMS_MAX_NONCE_DESC
    PROPOSAL_ITEMS_MAX_REMOVED_ASC
    PROPOSAL_ITEMS_MAX_REMOVED_DESC
    PROPOSAL_ITEMS_MAX_SIGNATURE_ASC
    PROPOSAL_ITEMS_MAX_SIGNATURE_DESC
    PROPOSAL_ITEMS_MAX_STATUS_ASC
    PROPOSAL_ITEMS_MAX_STATUS_DESC
    PROPOSAL_ITEMS_MAX_TYPE_ASC
    PROPOSAL_ITEMS_MAX_TYPE_DESC
    PROPOSAL_ITEMS_MIN_BLOCK_ID_ASC
    PROPOSAL_ITEMS_MIN_BLOCK_ID_DESC
    PROPOSAL_ITEMS_MIN_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_MIN_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_MIN_CHAIN_ID_ASC
    PROPOSAL_ITEMS_MIN_CHAIN_ID_DESC
    PROPOSAL_ITEMS_MIN_DATA_ASC
    PROPOSAL_ITEMS_MIN_DATA_DESC
    PROPOSAL_ITEMS_MIN_ID_ASC
    PROPOSAL_ITEMS_MIN_ID_DESC
    PROPOSAL_ITEMS_MIN_NONCE_ASC
    PROPOSAL_ITEMS_MIN_NONCE_DESC
    PROPOSAL_ITEMS_MIN_REMOVED_ASC
    PROPOSAL_ITEMS_MIN_REMOVED_DESC
    PROPOSAL_ITEMS_MIN_SIGNATURE_ASC
    PROPOSAL_ITEMS_MIN_SIGNATURE_DESC
    PROPOSAL_ITEMS_MIN_STATUS_ASC
    PROPOSAL_ITEMS_MIN_STATUS_DESC
    PROPOSAL_ITEMS_MIN_TYPE_ASC
    PROPOSAL_ITEMS_MIN_TYPE_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_CHAIN_ID_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_CHAIN_ID_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_DATA_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_DATA_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_ID_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_ID_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_NONCE_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_NONCE_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_REMOVED_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_REMOVED_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_SIGNATURE_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_SIGNATURE_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_STATUS_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_STATUS_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_TYPE_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_TYPE_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_CHAIN_ID_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_CHAIN_ID_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_DATA_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_DATA_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_ID_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_ID_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_NONCE_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_NONCE_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_REMOVED_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_REMOVED_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_SIGNATURE_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_SIGNATURE_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_STATUS_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_STATUS_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_TYPE_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_TYPE_DESC
    PROPOSAL_ITEMS_SUM_BLOCK_ID_ASC
    PROPOSAL_ITEMS_SUM_BLOCK_ID_DESC
    PROPOSAL_ITEMS_SUM_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_SUM_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_SUM_CHAIN_ID_ASC
    PROPOSAL_ITEMS_SUM_CHAIN_ID_DESC
    PROPOSAL_ITEMS_SUM_DATA_ASC
    PROPOSAL_ITEMS_SUM_DATA_DESC
    PROPOSAL_ITEMS_SUM_ID_ASC
    PROPOSAL_ITEMS_SUM_ID_DESC
    PROPOSAL_ITEMS_SUM_NONCE_ASC
    PROPOSAL_ITEMS_SUM_NONCE_DESC
    PROPOSAL_ITEMS_SUM_REMOVED_ASC
    PROPOSAL_ITEMS_SUM_REMOVED_DESC
    PROPOSAL_ITEMS_SUM_SIGNATURE_ASC
    PROPOSAL_ITEMS_SUM_SIGNATURE_DESC
    PROPOSAL_ITEMS_SUM_STATUS_ASC
    PROPOSAL_ITEMS_SUM_STATUS_DESC
    PROPOSAL_ITEMS_SUM_TYPE_ASC
    PROPOSAL_ITEMS_SUM_TYPE_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_CHAIN_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_CHAIN_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_DATA_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_DATA_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_NONCE_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_NONCE_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_REMOVED_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_REMOVED_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_SIGNATURE_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_SIGNATURE_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_STATUS_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_STATUS_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_TYPE_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_TYPE_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_CHAIN_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_CHAIN_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_DATA_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_DATA_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_NONCE_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_NONCE_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_REMOVED_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_REMOVED_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_SIGNATURE_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_SIGNATURE_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_STATUS_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_STATUS_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_TYPE_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_TYPE_DESC
    PROPOSAL_VOTES_AVERAGE_BLOCK_ID_ASC
    PROPOSAL_VOTES_AVERAGE_BLOCK_ID_DESC
    PROPOSAL_VOTES_AVERAGE_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_AVERAGE_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_AVERAGE_ID_ASC
    PROPOSAL_VOTES_AVERAGE_ID_DESC
    PROPOSAL_VOTES_AVERAGE_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_AVERAGE_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_AVERAGE_VOTER_ID_ASC
    PROPOSAL_VOTES_AVERAGE_VOTER_ID_DESC
    PROPOSAL_VOTES_AVERAGE_VOTE_STATUS_ASC
    PROPOSAL_VOTES_AVERAGE_VOTE_STATUS_DESC
    PROPOSAL_VOTES_COUNT_ASC
    PROPOSAL_VOTES_COUNT_DESC
    PROPOSAL_VOTES_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSAL_VOTES_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSAL_VOTES_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_DISTINCT_COUNT_ID_ASC
    PROPOSAL_VOTES_DISTINCT_COUNT_ID_DESC
    PROPOSAL_VOTES_DISTINCT_COUNT_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_DISTINCT_COUNT_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_DISTINCT_COUNT_VOTER_ID_ASC
    PROPOSAL_VOTES_DISTINCT_COUNT_VOTER_ID_DESC
    PROPOSAL_VOTES_DISTINCT_COUNT_VOTE_STATUS_ASC
    PROPOSAL_VOTES_DISTINCT_COUNT_VOTE_STATUS_DESC
    PROPOSAL_VOTES_MAX_BLOCK_ID_ASC
    PROPOSAL_VOTES_MAX_BLOCK_ID_DESC
    PROPOSAL_VOTES_MAX_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_MAX_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_MAX_ID_ASC
    PROPOSAL_VOTES_MAX_ID_DESC
    PROPOSAL_VOTES_MAX_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_MAX_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_MAX_VOTER_ID_ASC
    PROPOSAL_VOTES_MAX_VOTER_ID_DESC
    PROPOSAL_VOTES_MAX_VOTE_STATUS_ASC
    PROPOSAL_VOTES_MAX_VOTE_STATUS_DESC
    PROPOSAL_VOTES_MIN_BLOCK_ID_ASC
    PROPOSAL_VOTES_MIN_BLOCK_ID_DESC
    PROPOSAL_VOTES_MIN_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_MIN_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_MIN_ID_ASC
    PROPOSAL_VOTES_MIN_ID_DESC
    PROPOSAL_VOTES_MIN_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_MIN_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_MIN_VOTER_ID_ASC
    PROPOSAL_VOTES_MIN_VOTER_ID_DESC
    PROPOSAL_VOTES_MIN_VOTE_STATUS_ASC
    PROPOSAL_VOTES_MIN_VOTE_STATUS_DESC
    PROPOSAL_VOTES_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSAL_VOTES_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSAL_VOTES_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_STDDEV_POPULATION_ID_ASC
    PROPOSAL_VOTES_STDDEV_POPULATION_ID_DESC
    PROPOSAL_VOTES_STDDEV_POPULATION_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_STDDEV_POPULATION_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_STDDEV_POPULATION_VOTER_ID_ASC
    PROPOSAL_VOTES_STDDEV_POPULATION_VOTER_ID_DESC
    PROPOSAL_VOTES_STDDEV_POPULATION_VOTE_STATUS_ASC
    PROPOSAL_VOTES_STDDEV_POPULATION_VOTE_STATUS_DESC
    PROPOSAL_VOTES_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_VOTES_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_VOTES_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_STDDEV_SAMPLE_ID_ASC
    PROPOSAL_VOTES_STDDEV_SAMPLE_ID_DESC
    PROPOSAL_VOTES_STDDEV_SAMPLE_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_STDDEV_SAMPLE_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_STDDEV_SAMPLE_VOTER_ID_ASC
    PROPOSAL_VOTES_STDDEV_SAMPLE_VOTER_ID_DESC
    PROPOSAL_VOTES_STDDEV_SAMPLE_VOTE_STATUS_ASC
    PROPOSAL_VOTES_STDDEV_SAMPLE_VOTE_STATUS_DESC
    PROPOSAL_VOTES_SUM_BLOCK_ID_ASC
    PROPOSAL_VOTES_SUM_BLOCK_ID_DESC
    PROPOSAL_VOTES_SUM_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_SUM_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_SUM_ID_ASC
    PROPOSAL_VOTES_SUM_ID_DESC
    PROPOSAL_VOTES_SUM_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_SUM_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_SUM_VOTER_ID_ASC
    PROPOSAL_VOTES_SUM_VOTER_ID_DESC
    PROPOSAL_VOTES_SUM_VOTE_STATUS_ASC
    PROPOSAL_VOTES_SUM_VOTE_STATUS_DESC
    PROPOSAL_VOTES_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSAL_VOTES_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSAL_VOTES_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_VARIANCE_POPULATION_ID_ASC
    PROPOSAL_VOTES_VARIANCE_POPULATION_ID_DESC
    PROPOSAL_VOTES_VARIANCE_POPULATION_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_VARIANCE_POPULATION_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_VARIANCE_POPULATION_VOTER_ID_ASC
    PROPOSAL_VOTES_VARIANCE_POPULATION_VOTER_ID_DESC
    PROPOSAL_VOTES_VARIANCE_POPULATION_VOTE_STATUS_ASC
    PROPOSAL_VOTES_VARIANCE_POPULATION_VOTE_STATUS_DESC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_ID_ASC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_ID_DESC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_VOTER_ID_ASC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_VOTER_ID_DESC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_VOTE_STATUS_ASC
    PROPOSAL_VOTES_VARIANCE_SAMPLE_VOTE_STATUS_DESC
    PROPOSER_THRESHOLDS_AVERAGE_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_AVERAGE_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_AVERAGE_ID_ASC
    PROPOSER_THRESHOLDS_AVERAGE_ID_DESC
    PROPOSER_THRESHOLDS_AVERAGE_VALUE_ASC
    PROPOSER_THRESHOLDS_AVERAGE_VALUE_DESC
    PROPOSER_THRESHOLDS_COUNT_ASC
    PROPOSER_THRESHOLDS_COUNT_DESC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_ID_ASC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_ID_DESC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_VALUE_ASC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_VALUE_DESC
    PROPOSER_THRESHOLDS_MAX_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_MAX_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_MAX_ID_ASC
    PROPOSER_THRESHOLDS_MAX_ID_DESC
    PROPOSER_THRESHOLDS_MAX_VALUE_ASC
    PROPOSER_THRESHOLDS_MAX_VALUE_DESC
    PROPOSER_THRESHOLDS_MIN_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_MIN_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_MIN_ID_ASC
    PROPOSER_THRESHOLDS_MIN_ID_DESC
    PROPOSER_THRESHOLDS_MIN_VALUE_ASC
    PROPOSER_THRESHOLDS_MIN_VALUE_DESC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_ID_ASC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_ID_DESC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_VALUE_ASC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_VALUE_DESC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_ID_ASC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_ID_DESC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_VALUE_ASC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_VALUE_DESC
    PROPOSER_THRESHOLDS_SUM_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_SUM_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_SUM_ID_ASC
    PROPOSER_THRESHOLDS_SUM_ID_DESC
    PROPOSER_THRESHOLDS_SUM_VALUE_ASC
    PROPOSER_THRESHOLDS_SUM_VALUE_DESC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_ID_ASC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_ID_DESC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_VALUE_ASC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_VALUE_DESC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_ID_ASC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_ID_DESC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_VALUE_ASC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_VALUE_DESC
    PUBLIC_KEYS_AVERAGE_BLOCK_ID_ASC
    PUBLIC_KEYS_AVERAGE_BLOCK_ID_DESC
    PUBLIC_KEYS_AVERAGE_COMPRESSED_ASC
    PUBLIC_KEYS_AVERAGE_COMPRESSED_DESC
    PUBLIC_KEYS_AVERAGE_HISTORY_ASC
    PUBLIC_KEYS_AVERAGE_HISTORY_DESC
    PUBLIC_KEYS_AVERAGE_ID_ASC
    PUBLIC_KEYS_AVERAGE_ID_DESC
    PUBLIC_KEYS_AVERAGE_UNCOMPRESSED_ASC
    PUBLIC_KEYS_AVERAGE_UNCOMPRESSED_DESC
    PUBLIC_KEYS_COUNT_ASC
    PUBLIC_KEYS_COUNT_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_BLOCK_ID_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_BLOCK_ID_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_COMPRESSED_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_COMPRESSED_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_HISTORY_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_HISTORY_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_ID_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_ID_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_UNCOMPRESSED_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_UNCOMPRESSED_DESC
    PUBLIC_KEYS_MAX_BLOCK_ID_ASC
    PUBLIC_KEYS_MAX_BLOCK_ID_DESC
    PUBLIC_KEYS_MAX_COMPRESSED_ASC
    PUBLIC_KEYS_MAX_COMPRESSED_DESC
    PUBLIC_KEYS_MAX_HISTORY_ASC
    PUBLIC_KEYS_MAX_HISTORY_DESC
    PUBLIC_KEYS_MAX_ID_ASC
    PUBLIC_KEYS_MAX_ID_DESC
    PUBLIC_KEYS_MAX_UNCOMPRESSED_ASC
    PUBLIC_KEYS_MAX_UNCOMPRESSED_DESC
    PUBLIC_KEYS_MIN_BLOCK_ID_ASC
    PUBLIC_KEYS_MIN_BLOCK_ID_DESC
    PUBLIC_KEYS_MIN_COMPRESSED_ASC
    PUBLIC_KEYS_MIN_COMPRESSED_DESC
    PUBLIC_KEYS_MIN_HISTORY_ASC
    PUBLIC_KEYS_MIN_HISTORY_DESC
    PUBLIC_KEYS_MIN_ID_ASC
    PUBLIC_KEYS_MIN_ID_DESC
    PUBLIC_KEYS_MIN_UNCOMPRESSED_ASC
    PUBLIC_KEYS_MIN_UNCOMPRESSED_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_BLOCK_ID_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_BLOCK_ID_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_COMPRESSED_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_COMPRESSED_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_HISTORY_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_HISTORY_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_ID_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_ID_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_UNCOMPRESSED_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_UNCOMPRESSED_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_COMPRESSED_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_COMPRESSED_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_HISTORY_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_HISTORY_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_ID_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_ID_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_UNCOMPRESSED_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_UNCOMPRESSED_DESC
    PUBLIC_KEYS_SUM_BLOCK_ID_ASC
    PUBLIC_KEYS_SUM_BLOCK_ID_DESC
    PUBLIC_KEYS_SUM_COMPRESSED_ASC
    PUBLIC_KEYS_SUM_COMPRESSED_DESC
    PUBLIC_KEYS_SUM_HISTORY_ASC
    PUBLIC_KEYS_SUM_HISTORY_DESC
    PUBLIC_KEYS_SUM_ID_ASC
    PUBLIC_KEYS_SUM_ID_DESC
    PUBLIC_KEYS_SUM_UNCOMPRESSED_ASC
    PUBLIC_KEYS_SUM_UNCOMPRESSED_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_COMPRESSED_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_COMPRESSED_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_HISTORY_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_HISTORY_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_ID_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_ID_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_UNCOMPRESSED_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_UNCOMPRESSED_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_COMPRESSED_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_COMPRESSED_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_HISTORY_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_HISTORY_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_ID_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_ID_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_UNCOMPRESSED_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_UNCOMPRESSED_DESC
    SESSIONS_AVERAGE_BLOCK_ID_ASC
    SESSIONS_AVERAGE_BLOCK_ID_DESC
    SESSIONS_AVERAGE_BLOCK_NUMBER_ASC
    SESSIONS_AVERAGE_BLOCK_NUMBER_DESC
    SESSIONS_AVERAGE_ID_ASC
    SESSIONS_AVERAGE_ID_DESC
    SESSIONS_AVERAGE_PUBLIC_KEY_ID_ASC
    SESSIONS_AVERAGE_PUBLIC_KEY_ID_DESC
    SESSIONS_COUNT_ASC
    SESSIONS_COUNT_DESC
    SESSIONS_DISTINCT_COUNT_BLOCK_ID_ASC
    SESSIONS_DISTINCT_COUNT_BLOCK_ID_DESC
    SESSIONS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    SESSIONS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    SESSIONS_DISTINCT_COUNT_ID_ASC
    SESSIONS_DISTINCT_COUNT_ID_DESC
    SESSIONS_DISTINCT_COUNT_PUBLIC_KEY_ID_ASC
    SESSIONS_DISTINCT_COUNT_PUBLIC_KEY_ID_DESC
    SESSIONS_MAX_BLOCK_ID_ASC
    SESSIONS_MAX_BLOCK_ID_DESC
    SESSIONS_MAX_BLOCK_NUMBER_ASC
    SESSIONS_MAX_BLOCK_NUMBER_DESC
    SESSIONS_MAX_ID_ASC
    SESSIONS_MAX_ID_DESC
    SESSIONS_MAX_PUBLIC_KEY_ID_ASC
    SESSIONS_MAX_PUBLIC_KEY_ID_DESC
    SESSIONS_MIN_BLOCK_ID_ASC
    SESSIONS_MIN_BLOCK_ID_DESC
    SESSIONS_MIN_BLOCK_NUMBER_ASC
    SESSIONS_MIN_BLOCK_NUMBER_DESC
    SESSIONS_MIN_ID_ASC
    SESSIONS_MIN_ID_DESC
    SESSIONS_MIN_PUBLIC_KEY_ID_ASC
    SESSIONS_MIN_PUBLIC_KEY_ID_DESC
    SESSIONS_STDDEV_POPULATION_BLOCK_ID_ASC
    SESSIONS_STDDEV_POPULATION_BLOCK_ID_DESC
    SESSIONS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    SESSIONS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    SESSIONS_STDDEV_POPULATION_ID_ASC
    SESSIONS_STDDEV_POPULATION_ID_DESC
    SESSIONS_STDDEV_POPULATION_PUBLIC_KEY_ID_ASC
    SESSIONS_STDDEV_POPULATION_PUBLIC_KEY_ID_DESC
    SESSIONS_STDDEV_SAMPLE_BLOCK_ID_ASC
    SESSIONS_STDDEV_SAMPLE_BLOCK_ID_DESC
    SESSIONS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    SESSIONS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    SESSIONS_STDDEV_SAMPLE_ID_ASC
    SESSIONS_STDDEV_SAMPLE_ID_DESC
    SESSIONS_STDDEV_SAMPLE_PUBLIC_KEY_ID_ASC
    SESSIONS_STDDEV_SAMPLE_PUBLIC_KEY_ID_DESC
    SESSIONS_SUM_BLOCK_ID_ASC
    SESSIONS_SUM_BLOCK_ID_DESC
    SESSIONS_SUM_BLOCK_NUMBER_ASC
    SESSIONS_SUM_BLOCK_NUMBER_DESC
    SESSIONS_SUM_ID_ASC
    SESSIONS_SUM_ID_DESC
    SESSIONS_SUM_PUBLIC_KEY_ID_ASC
    SESSIONS_SUM_PUBLIC_KEY_ID_DESC
    SESSIONS_VARIANCE_POPULATION_BLOCK_ID_ASC
    SESSIONS_VARIANCE_POPULATION_BLOCK_ID_DESC
    SESSIONS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    SESSIONS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    SESSIONS_VARIANCE_POPULATION_ID_ASC
    SESSIONS_VARIANCE_POPULATION_ID_DESC
    SESSIONS_VARIANCE_POPULATION_PUBLIC_KEY_ID_ASC
    SESSIONS_VARIANCE_POPULATION_PUBLIC_KEY_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    SESSIONS_VARIANCE_SAMPLE_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_PUBLIC_KEY_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_PUBLIC_KEY_ID_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_CURRENT_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_CURRENT_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_ID_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_ID_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_NEXT_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_NEXT_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_PENDING_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_PENDING_DESC
    SIGNATURE_THRESHOLDS_COUNT_ASC
    SIGNATURE_THRESHOLDS_COUNT_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_CURRENT_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_CURRENT_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_ID_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_ID_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_NEXT_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_NEXT_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_PENDING_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_PENDING_DESC
    SIGNATURE_THRESHOLDS_MAX_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_MAX_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_MAX_CURRENT_ASC
    SIGNATURE_THRESHOLDS_MAX_CURRENT_DESC
    SIGNATURE_THRESHOLDS_MAX_ID_ASC
    SIGNATURE_THRESHOLDS_MAX_ID_DESC
    SIGNATURE_THRESHOLDS_MAX_NEXT_ASC
    SIGNATURE_THRESHOLDS_MAX_NEXT_DESC
    SIGNATURE_THRESHOLDS_MAX_PENDING_ASC
    SIGNATURE_THRESHOLDS_MAX_PENDING_DESC
    SIGNATURE_THRESHOLDS_MIN_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_MIN_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_MIN_CURRENT_ASC
    SIGNATURE_THRESHOLDS_MIN_CURRENT_DESC
    SIGNATURE_THRESHOLDS_MIN_ID_ASC
    SIGNATURE_THRESHOLDS_MIN_ID_DESC
    SIGNATURE_THRESHOLDS_MIN_NEXT_ASC
    SIGNATURE_THRESHOLDS_MIN_NEXT_DESC
    SIGNATURE_THRESHOLDS_MIN_PENDING_ASC
    SIGNATURE_THRESHOLDS_MIN_PENDING_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_CURRENT_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_CURRENT_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_ID_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_ID_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_NEXT_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_NEXT_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_PENDING_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_PENDING_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_CURRENT_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_CURRENT_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_ID_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_ID_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_NEXT_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_NEXT_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_PENDING_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_PENDING_DESC
    SIGNATURE_THRESHOLDS_SUM_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_SUM_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_SUM_CURRENT_ASC
    SIGNATURE_THRESHOLDS_SUM_CURRENT_DESC
    SIGNATURE_THRESHOLDS_SUM_ID_ASC
    SIGNATURE_THRESHOLDS_SUM_ID_DESC
    SIGNATURE_THRESHOLDS_SUM_NEXT_ASC
    SIGNATURE_THRESHOLDS_SUM_NEXT_DESC
    SIGNATURE_THRESHOLDS_SUM_PENDING_ASC
    SIGNATURE_THRESHOLDS_SUM_PENDING_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_CURRENT_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_CURRENT_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_ID_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_ID_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_NEXT_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_NEXT_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_PENDING_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_PENDING_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_CURRENT_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_CURRENT_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_ID_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_ID_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_NEXT_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_NEXT_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_PENDING_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_PENDING_DESC
    SPEC_VERSION_ASC
    SPEC_VERSION_DESC
    STATE_ROOT_ASC
    STATE_ROOT_DESC
    TIMESTAMP_ASC
    TIMESTAMP_DESC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_COUNT_ASC
    UNSIGNED_PROPOSALS_QUEUES_COUNT_DESC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_MAX_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_MAX_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_MAX_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_MAX_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_MAX_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_MAX_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_MIN_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_MIN_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_MIN_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_MIN_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_MIN_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_MIN_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_SUM_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_SUM_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_SUM_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_SUM_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_SUM_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_SUM_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_ID_DESC
}

"Grouping methods for `CountryCode` for usage during aggregation."
enum CountryCodesGroupBy {
    CODE
}

"Methods to use when ordering `CountryCode`."
enum CountryCodesOrderBy {
    ACCOUNTS_AVERAGE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_AVERAGE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_AVERAGE_CREATED_AT_ASC
    ACCOUNTS_AVERAGE_CREATED_AT_DESC
    ACCOUNTS_AVERAGE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_AVERAGE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_AVERAGE_CREATOR_ID_ASC
    ACCOUNTS_AVERAGE_CREATOR_ID_DESC
    ACCOUNTS_AVERAGE_DISPLAY_ASC
    ACCOUNTS_AVERAGE_DISPLAY_DESC
    ACCOUNTS_AVERAGE_EMAIL_ASC
    ACCOUNTS_AVERAGE_EMAIL_DESC
    ACCOUNTS_AVERAGE_ID_ASC
    ACCOUNTS_AVERAGE_ID_DESC
    ACCOUNTS_AVERAGE_IMAGE_ASC
    ACCOUNTS_AVERAGE_IMAGE_DESC
    ACCOUNTS_AVERAGE_LEGAL_ASC
    ACCOUNTS_AVERAGE_LEGAL_DESC
    ACCOUNTS_AVERAGE_PGP_FINGERPRINT_ASC
    ACCOUNTS_AVERAGE_PGP_FINGERPRINT_DESC
    ACCOUNTS_AVERAGE_RIOT_ASC
    ACCOUNTS_AVERAGE_RIOT_DESC
    ACCOUNTS_AVERAGE_TWITTER_ASC
    ACCOUNTS_AVERAGE_TWITTER_DESC
    ACCOUNTS_AVERAGE_WEB_ASC
    ACCOUNTS_AVERAGE_WEB_DESC
    ACCOUNTS_COUNT_ASC
    ACCOUNTS_COUNT_DESC
    ACCOUNTS_DISTINCT_COUNT_COUNTRY_CODE_ID_ASC
    ACCOUNTS_DISTINCT_COUNT_COUNTRY_CODE_ID_DESC
    ACCOUNTS_DISTINCT_COUNT_CREATED_AT_ASC
    ACCOUNTS_DISTINCT_COUNT_CREATED_AT_DESC
    ACCOUNTS_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_DISTINCT_COUNT_CREATOR_ID_ASC
    ACCOUNTS_DISTINCT_COUNT_CREATOR_ID_DESC
    ACCOUNTS_DISTINCT_COUNT_DISPLAY_ASC
    ACCOUNTS_DISTINCT_COUNT_DISPLAY_DESC
    ACCOUNTS_DISTINCT_COUNT_EMAIL_ASC
    ACCOUNTS_DISTINCT_COUNT_EMAIL_DESC
    ACCOUNTS_DISTINCT_COUNT_ID_ASC
    ACCOUNTS_DISTINCT_COUNT_ID_DESC
    ACCOUNTS_DISTINCT_COUNT_IMAGE_ASC
    ACCOUNTS_DISTINCT_COUNT_IMAGE_DESC
    ACCOUNTS_DISTINCT_COUNT_LEGAL_ASC
    ACCOUNTS_DISTINCT_COUNT_LEGAL_DESC
    ACCOUNTS_DISTINCT_COUNT_PGP_FINGERPRINT_ASC
    ACCOUNTS_DISTINCT_COUNT_PGP_FINGERPRINT_DESC
    ACCOUNTS_DISTINCT_COUNT_RIOT_ASC
    ACCOUNTS_DISTINCT_COUNT_RIOT_DESC
    ACCOUNTS_DISTINCT_COUNT_TWITTER_ASC
    ACCOUNTS_DISTINCT_COUNT_TWITTER_DESC
    ACCOUNTS_DISTINCT_COUNT_WEB_ASC
    ACCOUNTS_DISTINCT_COUNT_WEB_DESC
    ACCOUNTS_MAX_COUNTRY_CODE_ID_ASC
    ACCOUNTS_MAX_COUNTRY_CODE_ID_DESC
    ACCOUNTS_MAX_CREATED_AT_ASC
    ACCOUNTS_MAX_CREATED_AT_DESC
    ACCOUNTS_MAX_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_MAX_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_MAX_CREATOR_ID_ASC
    ACCOUNTS_MAX_CREATOR_ID_DESC
    ACCOUNTS_MAX_DISPLAY_ASC
    ACCOUNTS_MAX_DISPLAY_DESC
    ACCOUNTS_MAX_EMAIL_ASC
    ACCOUNTS_MAX_EMAIL_DESC
    ACCOUNTS_MAX_ID_ASC
    ACCOUNTS_MAX_ID_DESC
    ACCOUNTS_MAX_IMAGE_ASC
    ACCOUNTS_MAX_IMAGE_DESC
    ACCOUNTS_MAX_LEGAL_ASC
    ACCOUNTS_MAX_LEGAL_DESC
    ACCOUNTS_MAX_PGP_FINGERPRINT_ASC
    ACCOUNTS_MAX_PGP_FINGERPRINT_DESC
    ACCOUNTS_MAX_RIOT_ASC
    ACCOUNTS_MAX_RIOT_DESC
    ACCOUNTS_MAX_TWITTER_ASC
    ACCOUNTS_MAX_TWITTER_DESC
    ACCOUNTS_MAX_WEB_ASC
    ACCOUNTS_MAX_WEB_DESC
    ACCOUNTS_MIN_COUNTRY_CODE_ID_ASC
    ACCOUNTS_MIN_COUNTRY_CODE_ID_DESC
    ACCOUNTS_MIN_CREATED_AT_ASC
    ACCOUNTS_MIN_CREATED_AT_DESC
    ACCOUNTS_MIN_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_MIN_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_MIN_CREATOR_ID_ASC
    ACCOUNTS_MIN_CREATOR_ID_DESC
    ACCOUNTS_MIN_DISPLAY_ASC
    ACCOUNTS_MIN_DISPLAY_DESC
    ACCOUNTS_MIN_EMAIL_ASC
    ACCOUNTS_MIN_EMAIL_DESC
    ACCOUNTS_MIN_ID_ASC
    ACCOUNTS_MIN_ID_DESC
    ACCOUNTS_MIN_IMAGE_ASC
    ACCOUNTS_MIN_IMAGE_DESC
    ACCOUNTS_MIN_LEGAL_ASC
    ACCOUNTS_MIN_LEGAL_DESC
    ACCOUNTS_MIN_PGP_FINGERPRINT_ASC
    ACCOUNTS_MIN_PGP_FINGERPRINT_DESC
    ACCOUNTS_MIN_RIOT_ASC
    ACCOUNTS_MIN_RIOT_DESC
    ACCOUNTS_MIN_TWITTER_ASC
    ACCOUNTS_MIN_TWITTER_DESC
    ACCOUNTS_MIN_WEB_ASC
    ACCOUNTS_MIN_WEB_DESC
    ACCOUNTS_STDDEV_POPULATION_COUNTRY_CODE_ID_ASC
    ACCOUNTS_STDDEV_POPULATION_COUNTRY_CODE_ID_DESC
    ACCOUNTS_STDDEV_POPULATION_CREATED_AT_ASC
    ACCOUNTS_STDDEV_POPULATION_CREATED_AT_DESC
    ACCOUNTS_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_STDDEV_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_STDDEV_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_STDDEV_POPULATION_DISPLAY_ASC
    ACCOUNTS_STDDEV_POPULATION_DISPLAY_DESC
    ACCOUNTS_STDDEV_POPULATION_EMAIL_ASC
    ACCOUNTS_STDDEV_POPULATION_EMAIL_DESC
    ACCOUNTS_STDDEV_POPULATION_ID_ASC
    ACCOUNTS_STDDEV_POPULATION_ID_DESC
    ACCOUNTS_STDDEV_POPULATION_IMAGE_ASC
    ACCOUNTS_STDDEV_POPULATION_IMAGE_DESC
    ACCOUNTS_STDDEV_POPULATION_LEGAL_ASC
    ACCOUNTS_STDDEV_POPULATION_LEGAL_DESC
    ACCOUNTS_STDDEV_POPULATION_PGP_FINGERPRINT_ASC
    ACCOUNTS_STDDEV_POPULATION_PGP_FINGERPRINT_DESC
    ACCOUNTS_STDDEV_POPULATION_RIOT_ASC
    ACCOUNTS_STDDEV_POPULATION_RIOT_DESC
    ACCOUNTS_STDDEV_POPULATION_TWITTER_ASC
    ACCOUNTS_STDDEV_POPULATION_TWITTER_DESC
    ACCOUNTS_STDDEV_POPULATION_WEB_ASC
    ACCOUNTS_STDDEV_POPULATION_WEB_DESC
    ACCOUNTS_STDDEV_SAMPLE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_STDDEV_SAMPLE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_STDDEV_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_STDDEV_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_STDDEV_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_STDDEV_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_STDDEV_SAMPLE_DISPLAY_ASC
    ACCOUNTS_STDDEV_SAMPLE_DISPLAY_DESC
    ACCOUNTS_STDDEV_SAMPLE_EMAIL_ASC
    ACCOUNTS_STDDEV_SAMPLE_EMAIL_DESC
    ACCOUNTS_STDDEV_SAMPLE_ID_ASC
    ACCOUNTS_STDDEV_SAMPLE_ID_DESC
    ACCOUNTS_STDDEV_SAMPLE_IMAGE_ASC
    ACCOUNTS_STDDEV_SAMPLE_IMAGE_DESC
    ACCOUNTS_STDDEV_SAMPLE_LEGAL_ASC
    ACCOUNTS_STDDEV_SAMPLE_LEGAL_DESC
    ACCOUNTS_STDDEV_SAMPLE_PGP_FINGERPRINT_ASC
    ACCOUNTS_STDDEV_SAMPLE_PGP_FINGERPRINT_DESC
    ACCOUNTS_STDDEV_SAMPLE_RIOT_ASC
    ACCOUNTS_STDDEV_SAMPLE_RIOT_DESC
    ACCOUNTS_STDDEV_SAMPLE_TWITTER_ASC
    ACCOUNTS_STDDEV_SAMPLE_TWITTER_DESC
    ACCOUNTS_STDDEV_SAMPLE_WEB_ASC
    ACCOUNTS_STDDEV_SAMPLE_WEB_DESC
    ACCOUNTS_SUM_COUNTRY_CODE_ID_ASC
    ACCOUNTS_SUM_COUNTRY_CODE_ID_DESC
    ACCOUNTS_SUM_CREATED_AT_ASC
    ACCOUNTS_SUM_CREATED_AT_DESC
    ACCOUNTS_SUM_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_SUM_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_SUM_CREATOR_ID_ASC
    ACCOUNTS_SUM_CREATOR_ID_DESC
    ACCOUNTS_SUM_DISPLAY_ASC
    ACCOUNTS_SUM_DISPLAY_DESC
    ACCOUNTS_SUM_EMAIL_ASC
    ACCOUNTS_SUM_EMAIL_DESC
    ACCOUNTS_SUM_ID_ASC
    ACCOUNTS_SUM_ID_DESC
    ACCOUNTS_SUM_IMAGE_ASC
    ACCOUNTS_SUM_IMAGE_DESC
    ACCOUNTS_SUM_LEGAL_ASC
    ACCOUNTS_SUM_LEGAL_DESC
    ACCOUNTS_SUM_PGP_FINGERPRINT_ASC
    ACCOUNTS_SUM_PGP_FINGERPRINT_DESC
    ACCOUNTS_SUM_RIOT_ASC
    ACCOUNTS_SUM_RIOT_DESC
    ACCOUNTS_SUM_TWITTER_ASC
    ACCOUNTS_SUM_TWITTER_DESC
    ACCOUNTS_SUM_WEB_ASC
    ACCOUNTS_SUM_WEB_DESC
    ACCOUNTS_VARIANCE_POPULATION_COUNTRY_CODE_ID_ASC
    ACCOUNTS_VARIANCE_POPULATION_COUNTRY_CODE_ID_DESC
    ACCOUNTS_VARIANCE_POPULATION_CREATED_AT_ASC
    ACCOUNTS_VARIANCE_POPULATION_CREATED_AT_DESC
    ACCOUNTS_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_VARIANCE_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_VARIANCE_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_VARIANCE_POPULATION_DISPLAY_ASC
    ACCOUNTS_VARIANCE_POPULATION_DISPLAY_DESC
    ACCOUNTS_VARIANCE_POPULATION_EMAIL_ASC
    ACCOUNTS_VARIANCE_POPULATION_EMAIL_DESC
    ACCOUNTS_VARIANCE_POPULATION_ID_ASC
    ACCOUNTS_VARIANCE_POPULATION_ID_DESC
    ACCOUNTS_VARIANCE_POPULATION_IMAGE_ASC
    ACCOUNTS_VARIANCE_POPULATION_IMAGE_DESC
    ACCOUNTS_VARIANCE_POPULATION_LEGAL_ASC
    ACCOUNTS_VARIANCE_POPULATION_LEGAL_DESC
    ACCOUNTS_VARIANCE_POPULATION_PGP_FINGERPRINT_ASC
    ACCOUNTS_VARIANCE_POPULATION_PGP_FINGERPRINT_DESC
    ACCOUNTS_VARIANCE_POPULATION_RIOT_ASC
    ACCOUNTS_VARIANCE_POPULATION_RIOT_DESC
    ACCOUNTS_VARIANCE_POPULATION_TWITTER_ASC
    ACCOUNTS_VARIANCE_POPULATION_TWITTER_DESC
    ACCOUNTS_VARIANCE_POPULATION_WEB_ASC
    ACCOUNTS_VARIANCE_POPULATION_WEB_DESC
    ACCOUNTS_VARIANCE_SAMPLE_COUNTRY_CODE_ID_ASC
    ACCOUNTS_VARIANCE_SAMPLE_COUNTRY_CODE_ID_DESC
    ACCOUNTS_VARIANCE_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_VARIANCE_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_VARIANCE_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_VARIANCE_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_VARIANCE_SAMPLE_DISPLAY_ASC
    ACCOUNTS_VARIANCE_SAMPLE_DISPLAY_DESC
    ACCOUNTS_VARIANCE_SAMPLE_EMAIL_ASC
    ACCOUNTS_VARIANCE_SAMPLE_EMAIL_DESC
    ACCOUNTS_VARIANCE_SAMPLE_ID_ASC
    ACCOUNTS_VARIANCE_SAMPLE_ID_DESC
    ACCOUNTS_VARIANCE_SAMPLE_IMAGE_ASC
    ACCOUNTS_VARIANCE_SAMPLE_IMAGE_DESC
    ACCOUNTS_VARIANCE_SAMPLE_LEGAL_ASC
    ACCOUNTS_VARIANCE_SAMPLE_LEGAL_DESC
    ACCOUNTS_VARIANCE_SAMPLE_PGP_FINGERPRINT_ASC
    ACCOUNTS_VARIANCE_SAMPLE_PGP_FINGERPRINT_DESC
    ACCOUNTS_VARIANCE_SAMPLE_RIOT_ASC
    ACCOUNTS_VARIANCE_SAMPLE_RIOT_DESC
    ACCOUNTS_VARIANCE_SAMPLE_TWITTER_ASC
    ACCOUNTS_VARIANCE_SAMPLE_TWITTER_DESC
    ACCOUNTS_VARIANCE_SAMPLE_WEB_ASC
    ACCOUNTS_VARIANCE_SAMPLE_WEB_DESC
    CODE_ASC
    CODE_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
}

"Grouping methods for `Event` for usage during aggregation."
enum EventsGroupBy {
    ARGUMENTS
    BLOCK_ID
    BLOCK_NUMBER
    DATA
    DOCS
    EXTRINSIC_ID
    INDEX
    METHOD
    MODULE
    TIMESTAMP
    TIMESTAMP_TRUNCATED_TO_DAY
    TIMESTAMP_TRUNCATED_TO_HOUR
}

"Methods to use when ordering `Event`."
enum EventsOrderBy {
    ARGUMENTS_ASC
    ARGUMENTS_DESC
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    DATA_ASC
    DATA_DESC
    DOCS_ASC
    DOCS_DESC
    EXTRINSIC_ID_ASC
    EXTRINSIC_ID_DESC
    ID_ASC
    ID_DESC
    INDEX_ASC
    INDEX_DESC
    METHOD_ASC
    METHOD_DESC
    MODULE_ASC
    MODULE_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    TIMESTAMP_ASC
    TIMESTAMP_DESC
}

"Grouping methods for `Extrinsic` for usage during aggregation."
enum ExtrinsicsGroupBy {
    ARGUMENTS
    BLOCK_ID
    BLOCK_NUMBER
    HASH
    INDEX
    IS_SIGNED
    IS_SUCCESS
    METHOD
    MODULE
    SIGNER_ID
}

"Methods to use when ordering `Extrinsic`."
enum ExtrinsicsOrderBy {
    ARGUMENTS_ASC
    ARGUMENTS_DESC
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    EVENTS_AVERAGE_ARGUMENTS_ASC
    EVENTS_AVERAGE_ARGUMENTS_DESC
    EVENTS_AVERAGE_BLOCK_ID_ASC
    EVENTS_AVERAGE_BLOCK_ID_DESC
    EVENTS_AVERAGE_BLOCK_NUMBER_ASC
    EVENTS_AVERAGE_BLOCK_NUMBER_DESC
    EVENTS_AVERAGE_DATA_ASC
    EVENTS_AVERAGE_DATA_DESC
    EVENTS_AVERAGE_DOCS_ASC
    EVENTS_AVERAGE_DOCS_DESC
    EVENTS_AVERAGE_EXTRINSIC_ID_ASC
    EVENTS_AVERAGE_EXTRINSIC_ID_DESC
    EVENTS_AVERAGE_ID_ASC
    EVENTS_AVERAGE_ID_DESC
    EVENTS_AVERAGE_INDEX_ASC
    EVENTS_AVERAGE_INDEX_DESC
    EVENTS_AVERAGE_METHOD_ASC
    EVENTS_AVERAGE_METHOD_DESC
    EVENTS_AVERAGE_MODULE_ASC
    EVENTS_AVERAGE_MODULE_DESC
    EVENTS_AVERAGE_TIMESTAMP_ASC
    EVENTS_AVERAGE_TIMESTAMP_DESC
    EVENTS_COUNT_ASC
    EVENTS_COUNT_DESC
    EVENTS_DISTINCT_COUNT_ARGUMENTS_ASC
    EVENTS_DISTINCT_COUNT_ARGUMENTS_DESC
    EVENTS_DISTINCT_COUNT_BLOCK_ID_ASC
    EVENTS_DISTINCT_COUNT_BLOCK_ID_DESC
    EVENTS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    EVENTS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    EVENTS_DISTINCT_COUNT_DATA_ASC
    EVENTS_DISTINCT_COUNT_DATA_DESC
    EVENTS_DISTINCT_COUNT_DOCS_ASC
    EVENTS_DISTINCT_COUNT_DOCS_DESC
    EVENTS_DISTINCT_COUNT_EXTRINSIC_ID_ASC
    EVENTS_DISTINCT_COUNT_EXTRINSIC_ID_DESC
    EVENTS_DISTINCT_COUNT_ID_ASC
    EVENTS_DISTINCT_COUNT_ID_DESC
    EVENTS_DISTINCT_COUNT_INDEX_ASC
    EVENTS_DISTINCT_COUNT_INDEX_DESC
    EVENTS_DISTINCT_COUNT_METHOD_ASC
    EVENTS_DISTINCT_COUNT_METHOD_DESC
    EVENTS_DISTINCT_COUNT_MODULE_ASC
    EVENTS_DISTINCT_COUNT_MODULE_DESC
    EVENTS_DISTINCT_COUNT_TIMESTAMP_ASC
    EVENTS_DISTINCT_COUNT_TIMESTAMP_DESC
    EVENTS_MAX_ARGUMENTS_ASC
    EVENTS_MAX_ARGUMENTS_DESC
    EVENTS_MAX_BLOCK_ID_ASC
    EVENTS_MAX_BLOCK_ID_DESC
    EVENTS_MAX_BLOCK_NUMBER_ASC
    EVENTS_MAX_BLOCK_NUMBER_DESC
    EVENTS_MAX_DATA_ASC
    EVENTS_MAX_DATA_DESC
    EVENTS_MAX_DOCS_ASC
    EVENTS_MAX_DOCS_DESC
    EVENTS_MAX_EXTRINSIC_ID_ASC
    EVENTS_MAX_EXTRINSIC_ID_DESC
    EVENTS_MAX_ID_ASC
    EVENTS_MAX_ID_DESC
    EVENTS_MAX_INDEX_ASC
    EVENTS_MAX_INDEX_DESC
    EVENTS_MAX_METHOD_ASC
    EVENTS_MAX_METHOD_DESC
    EVENTS_MAX_MODULE_ASC
    EVENTS_MAX_MODULE_DESC
    EVENTS_MAX_TIMESTAMP_ASC
    EVENTS_MAX_TIMESTAMP_DESC
    EVENTS_MIN_ARGUMENTS_ASC
    EVENTS_MIN_ARGUMENTS_DESC
    EVENTS_MIN_BLOCK_ID_ASC
    EVENTS_MIN_BLOCK_ID_DESC
    EVENTS_MIN_BLOCK_NUMBER_ASC
    EVENTS_MIN_BLOCK_NUMBER_DESC
    EVENTS_MIN_DATA_ASC
    EVENTS_MIN_DATA_DESC
    EVENTS_MIN_DOCS_ASC
    EVENTS_MIN_DOCS_DESC
    EVENTS_MIN_EXTRINSIC_ID_ASC
    EVENTS_MIN_EXTRINSIC_ID_DESC
    EVENTS_MIN_ID_ASC
    EVENTS_MIN_ID_DESC
    EVENTS_MIN_INDEX_ASC
    EVENTS_MIN_INDEX_DESC
    EVENTS_MIN_METHOD_ASC
    EVENTS_MIN_METHOD_DESC
    EVENTS_MIN_MODULE_ASC
    EVENTS_MIN_MODULE_DESC
    EVENTS_MIN_TIMESTAMP_ASC
    EVENTS_MIN_TIMESTAMP_DESC
    EVENTS_STDDEV_POPULATION_ARGUMENTS_ASC
    EVENTS_STDDEV_POPULATION_ARGUMENTS_DESC
    EVENTS_STDDEV_POPULATION_BLOCK_ID_ASC
    EVENTS_STDDEV_POPULATION_BLOCK_ID_DESC
    EVENTS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    EVENTS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    EVENTS_STDDEV_POPULATION_DATA_ASC
    EVENTS_STDDEV_POPULATION_DATA_DESC
    EVENTS_STDDEV_POPULATION_DOCS_ASC
    EVENTS_STDDEV_POPULATION_DOCS_DESC
    EVENTS_STDDEV_POPULATION_EXTRINSIC_ID_ASC
    EVENTS_STDDEV_POPULATION_EXTRINSIC_ID_DESC
    EVENTS_STDDEV_POPULATION_ID_ASC
    EVENTS_STDDEV_POPULATION_ID_DESC
    EVENTS_STDDEV_POPULATION_INDEX_ASC
    EVENTS_STDDEV_POPULATION_INDEX_DESC
    EVENTS_STDDEV_POPULATION_METHOD_ASC
    EVENTS_STDDEV_POPULATION_METHOD_DESC
    EVENTS_STDDEV_POPULATION_MODULE_ASC
    EVENTS_STDDEV_POPULATION_MODULE_DESC
    EVENTS_STDDEV_POPULATION_TIMESTAMP_ASC
    EVENTS_STDDEV_POPULATION_TIMESTAMP_DESC
    EVENTS_STDDEV_SAMPLE_ARGUMENTS_ASC
    EVENTS_STDDEV_SAMPLE_ARGUMENTS_DESC
    EVENTS_STDDEV_SAMPLE_BLOCK_ID_ASC
    EVENTS_STDDEV_SAMPLE_BLOCK_ID_DESC
    EVENTS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    EVENTS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    EVENTS_STDDEV_SAMPLE_DATA_ASC
    EVENTS_STDDEV_SAMPLE_DATA_DESC
    EVENTS_STDDEV_SAMPLE_DOCS_ASC
    EVENTS_STDDEV_SAMPLE_DOCS_DESC
    EVENTS_STDDEV_SAMPLE_EXTRINSIC_ID_ASC
    EVENTS_STDDEV_SAMPLE_EXTRINSIC_ID_DESC
    EVENTS_STDDEV_SAMPLE_ID_ASC
    EVENTS_STDDEV_SAMPLE_ID_DESC
    EVENTS_STDDEV_SAMPLE_INDEX_ASC
    EVENTS_STDDEV_SAMPLE_INDEX_DESC
    EVENTS_STDDEV_SAMPLE_METHOD_ASC
    EVENTS_STDDEV_SAMPLE_METHOD_DESC
    EVENTS_STDDEV_SAMPLE_MODULE_ASC
    EVENTS_STDDEV_SAMPLE_MODULE_DESC
    EVENTS_STDDEV_SAMPLE_TIMESTAMP_ASC
    EVENTS_STDDEV_SAMPLE_TIMESTAMP_DESC
    EVENTS_SUM_ARGUMENTS_ASC
    EVENTS_SUM_ARGUMENTS_DESC
    EVENTS_SUM_BLOCK_ID_ASC
    EVENTS_SUM_BLOCK_ID_DESC
    EVENTS_SUM_BLOCK_NUMBER_ASC
    EVENTS_SUM_BLOCK_NUMBER_DESC
    EVENTS_SUM_DATA_ASC
    EVENTS_SUM_DATA_DESC
    EVENTS_SUM_DOCS_ASC
    EVENTS_SUM_DOCS_DESC
    EVENTS_SUM_EXTRINSIC_ID_ASC
    EVENTS_SUM_EXTRINSIC_ID_DESC
    EVENTS_SUM_ID_ASC
    EVENTS_SUM_ID_DESC
    EVENTS_SUM_INDEX_ASC
    EVENTS_SUM_INDEX_DESC
    EVENTS_SUM_METHOD_ASC
    EVENTS_SUM_METHOD_DESC
    EVENTS_SUM_MODULE_ASC
    EVENTS_SUM_MODULE_DESC
    EVENTS_SUM_TIMESTAMP_ASC
    EVENTS_SUM_TIMESTAMP_DESC
    EVENTS_VARIANCE_POPULATION_ARGUMENTS_ASC
    EVENTS_VARIANCE_POPULATION_ARGUMENTS_DESC
    EVENTS_VARIANCE_POPULATION_BLOCK_ID_ASC
    EVENTS_VARIANCE_POPULATION_BLOCK_ID_DESC
    EVENTS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    EVENTS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    EVENTS_VARIANCE_POPULATION_DATA_ASC
    EVENTS_VARIANCE_POPULATION_DATA_DESC
    EVENTS_VARIANCE_POPULATION_DOCS_ASC
    EVENTS_VARIANCE_POPULATION_DOCS_DESC
    EVENTS_VARIANCE_POPULATION_EXTRINSIC_ID_ASC
    EVENTS_VARIANCE_POPULATION_EXTRINSIC_ID_DESC
    EVENTS_VARIANCE_POPULATION_ID_ASC
    EVENTS_VARIANCE_POPULATION_ID_DESC
    EVENTS_VARIANCE_POPULATION_INDEX_ASC
    EVENTS_VARIANCE_POPULATION_INDEX_DESC
    EVENTS_VARIANCE_POPULATION_METHOD_ASC
    EVENTS_VARIANCE_POPULATION_METHOD_DESC
    EVENTS_VARIANCE_POPULATION_MODULE_ASC
    EVENTS_VARIANCE_POPULATION_MODULE_DESC
    EVENTS_VARIANCE_POPULATION_TIMESTAMP_ASC
    EVENTS_VARIANCE_POPULATION_TIMESTAMP_DESC
    EVENTS_VARIANCE_SAMPLE_ARGUMENTS_ASC
    EVENTS_VARIANCE_SAMPLE_ARGUMENTS_DESC
    EVENTS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    EVENTS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    EVENTS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    EVENTS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    EVENTS_VARIANCE_SAMPLE_DATA_ASC
    EVENTS_VARIANCE_SAMPLE_DATA_DESC
    EVENTS_VARIANCE_SAMPLE_DOCS_ASC
    EVENTS_VARIANCE_SAMPLE_DOCS_DESC
    EVENTS_VARIANCE_SAMPLE_EXTRINSIC_ID_ASC
    EVENTS_VARIANCE_SAMPLE_EXTRINSIC_ID_DESC
    EVENTS_VARIANCE_SAMPLE_ID_ASC
    EVENTS_VARIANCE_SAMPLE_ID_DESC
    EVENTS_VARIANCE_SAMPLE_INDEX_ASC
    EVENTS_VARIANCE_SAMPLE_INDEX_DESC
    EVENTS_VARIANCE_SAMPLE_METHOD_ASC
    EVENTS_VARIANCE_SAMPLE_METHOD_DESC
    EVENTS_VARIANCE_SAMPLE_MODULE_ASC
    EVENTS_VARIANCE_SAMPLE_MODULE_DESC
    EVENTS_VARIANCE_SAMPLE_TIMESTAMP_ASC
    EVENTS_VARIANCE_SAMPLE_TIMESTAMP_DESC
    HASH_ASC
    HASH_DESC
    ID_ASC
    ID_DESC
    INDEX_ASC
    INDEX_DESC
    IS_SIGNED_ASC
    IS_SIGNED_DESC
    IS_SUCCESS_ASC
    IS_SUCCESS_DESC
    METHOD_ASC
    METHOD_DESC
    MODULE_ASC
    MODULE_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SIGNER_ID_ASC
    SIGNER_ID_DESC
}

"Grouping methods for `HeartBeat` for usage during aggregation."
enum HeartBeatsGroupBy {
    ACCOUNT_ID
    BLOCK_NUMBER
    SESSION_ID
}

"Methods to use when ordering `HeartBeat`."
enum HeartBeatsOrderBy {
    ACCOUNT_ID_ASC
    ACCOUNT_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SESSION_ID_ASC
    SESSION_ID_DESC
}

"Grouping methods for `KeygenThreshold` for usage during aggregation."
enum KeygenThresholdsGroupBy {
    BLOCK_ID
    CURRENT
    NEXT
    PENDING
}

"Methods to use when ordering `KeygenThreshold`."
enum KeygenThresholdsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    CURRENT_ASC
    CURRENT_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NEXT_ASC
    NEXT_DESC
    PENDING_ASC
    PENDING_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
}

"Grouping methods for `ProposalCounter` for usage during aggregation."
enum ProposalCountersGroupBy {
    BLOCK_ID
    BLOCK_NUMBER
    SIGNED_PROPOSALS_COUNT
    SIGNED_PROPOSALS_MAP
    STATUS_MAP
    UN_SIGNED_PROPOSALS_COUNT
    UN_SIGNED_PROPOSALS_MAP
}

"Methods to use when ordering `ProposalCounter`."
enum ProposalCountersOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SIGNED_PROPOSALS_COUNT_ASC
    SIGNED_PROPOSALS_COUNT_DESC
    SIGNED_PROPOSALS_MAP_ASC
    SIGNED_PROPOSALS_MAP_DESC
    STATUS_MAP_ASC
    STATUS_MAP_DESC
    UN_SIGNED_PROPOSALS_COUNT_ASC
    UN_SIGNED_PROPOSALS_COUNT_DESC
    UN_SIGNED_PROPOSALS_MAP_ASC
    UN_SIGNED_PROPOSALS_MAP_DESC
}

"Grouping methods for `ProposalItem` for usage during aggregation."
enum ProposalItemsGroupBy {
    BLOCK_ID
    BLOCK_NUMBER
    CHAIN_ID
    DATA
    NONCE
    REMOVED
    SIGNATURE
    STATUS
    TYPE
}

"Methods to use when ordering `ProposalItem`."
enum ProposalItemsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    CHAIN_ID_ASC
    CHAIN_ID_DESC
    DATA_ASC
    DATA_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NONCE_ASC
    NONCE_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_AVERAGE_TX_HASH_DESC
    PROPOSAL_TIMELINE_STATUSES_COUNT_ASC
    PROPOSAL_TIMELINE_STATUSES_COUNT_DESC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_DISTINCT_COUNT_TX_HASH_DESC
    PROPOSAL_TIMELINE_STATUSES_MAX_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_MAX_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_MAX_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_MAX_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_MAX_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_MAX_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_MAX_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_MAX_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_MAX_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_MAX_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_MAX_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_MAX_TX_HASH_DESC
    PROPOSAL_TIMELINE_STATUSES_MIN_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_MIN_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_MIN_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_MIN_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_MIN_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_MIN_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_MIN_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_MIN_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_MIN_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_MIN_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_MIN_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_MIN_TX_HASH_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_POPULATION_TX_HASH_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_STDDEV_SAMPLE_TX_HASH_DESC
    PROPOSAL_TIMELINE_STATUSES_SUM_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_SUM_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_SUM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_SUM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_SUM_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_SUM_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_SUM_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_SUM_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_SUM_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_SUM_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_SUM_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_SUM_TX_HASH_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_POPULATION_TX_HASH_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_PROPOSAL_ITEM_ID_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_PROPOSAL_ITEM_ID_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_STATUS_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_STATUS_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_TIMESTAMP_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_TIMESTAMP_DESC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_TX_HASH_ASC
    PROPOSAL_TIMELINE_STATUSES_VARIANCE_SAMPLE_TX_HASH_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_AVERAGE_VOTE_STATUS_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_COUNT_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_COUNT_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_DISTINCT_COUNT_VOTE_STATUS_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MAX_VOTE_STATUS_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_MIN_VOTE_STATUS_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_POPULATION_VOTE_STATUS_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_STDDEV_SAMPLE_VOTE_STATUS_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_SUM_VOTE_STATUS_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_POPULATION_VOTE_STATUS_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_PROPOSAL_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_PROPOSAL_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_VOTER_ID_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_VOTER_ID_DESC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_VOTE_STATUS_ASC
    PROPOSAL_VOTES_BY_PROPOSAL_ID_VARIANCE_SAMPLE_VOTE_STATUS_DESC
    REMOVED_ASC
    REMOVED_DESC
    SIGNATURE_ASC
    SIGNATURE_DESC
    STATUS_ASC
    STATUS_DESC
    TYPE_ASC
    TYPE_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_COUNT_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_COUNT_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_QUEUE_ID_DESC
}

"Grouping methods for `ProposalTimelineStatus` for usage during aggregation."
enum ProposalTimelineStatusesGroupBy {
    BLOCK_NUMBER
    PROPOSAL_ITEM_ID
    STATUS
    TIMESTAMP
    TIMESTAMP_TRUNCATED_TO_DAY
    TIMESTAMP_TRUNCATED_TO_HOUR
    TX_HASH
}

"Methods to use when ordering `ProposalTimelineStatus`."
enum ProposalTimelineStatusesOrderBy {
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSAL_ITEM_ID_ASC
    PROPOSAL_ITEM_ID_DESC
    STATUS_ASC
    STATUS_DESC
    TIMESTAMP_ASC
    TIMESTAMP_DESC
    TX_HASH_ASC
    TX_HASH_DESC
}

"Grouping methods for `ProposalVote` for usage during aggregation."
enum ProposalVotesGroupBy {
    BLOCK_ID
    BLOCK_NUMBER
    PROPOSAL_ID
    VOTER_ID
    VOTE_STATUS
}

"Methods to use when ordering `ProposalVote`."
enum ProposalVotesOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSAL_ID_ASC
    PROPOSAL_ID_DESC
    VOTER_ID_ASC
    VOTER_ID_DESC
    VOTE_STATUS_ASC
    VOTE_STATUS_DESC
}

"Grouping methods for `ProposerThreshold` for usage during aggregation."
enum ProposerThresholdsGroupBy {
    BLOCK_ID
    VALUE
}

"Methods to use when ordering `ProposerThreshold`."
enum ProposerThresholdsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    VALUE_ASC
    VALUE_DESC
}

"Grouping methods for `Proposer` for usage during aggregation."
enum ProposersGroupBy {
    ACCOUNT_ID
}

"Methods to use when ordering `Proposer`."
enum ProposersOrderBy {
    ACCOUNT_ID_ASC
    ACCOUNT_ID_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SESSION_PROPOSERS_AVERAGE_ID_ASC
    SESSION_PROPOSERS_AVERAGE_ID_DESC
    SESSION_PROPOSERS_AVERAGE_PROPOSER_ID_ASC
    SESSION_PROPOSERS_AVERAGE_PROPOSER_ID_DESC
    SESSION_PROPOSERS_AVERAGE_SESSION_ID_ASC
    SESSION_PROPOSERS_AVERAGE_SESSION_ID_DESC
    SESSION_PROPOSERS_COUNT_ASC
    SESSION_PROPOSERS_COUNT_DESC
    SESSION_PROPOSERS_DISTINCT_COUNT_ID_ASC
    SESSION_PROPOSERS_DISTINCT_COUNT_ID_DESC
    SESSION_PROPOSERS_DISTINCT_COUNT_PROPOSER_ID_ASC
    SESSION_PROPOSERS_DISTINCT_COUNT_PROPOSER_ID_DESC
    SESSION_PROPOSERS_DISTINCT_COUNT_SESSION_ID_ASC
    SESSION_PROPOSERS_DISTINCT_COUNT_SESSION_ID_DESC
    SESSION_PROPOSERS_MAX_ID_ASC
    SESSION_PROPOSERS_MAX_ID_DESC
    SESSION_PROPOSERS_MAX_PROPOSER_ID_ASC
    SESSION_PROPOSERS_MAX_PROPOSER_ID_DESC
    SESSION_PROPOSERS_MAX_SESSION_ID_ASC
    SESSION_PROPOSERS_MAX_SESSION_ID_DESC
    SESSION_PROPOSERS_MIN_ID_ASC
    SESSION_PROPOSERS_MIN_ID_DESC
    SESSION_PROPOSERS_MIN_PROPOSER_ID_ASC
    SESSION_PROPOSERS_MIN_PROPOSER_ID_DESC
    SESSION_PROPOSERS_MIN_SESSION_ID_ASC
    SESSION_PROPOSERS_MIN_SESSION_ID_DESC
    SESSION_PROPOSERS_STDDEV_POPULATION_ID_ASC
    SESSION_PROPOSERS_STDDEV_POPULATION_ID_DESC
    SESSION_PROPOSERS_STDDEV_POPULATION_PROPOSER_ID_ASC
    SESSION_PROPOSERS_STDDEV_POPULATION_PROPOSER_ID_DESC
    SESSION_PROPOSERS_STDDEV_POPULATION_SESSION_ID_ASC
    SESSION_PROPOSERS_STDDEV_POPULATION_SESSION_ID_DESC
    SESSION_PROPOSERS_STDDEV_SAMPLE_ID_ASC
    SESSION_PROPOSERS_STDDEV_SAMPLE_ID_DESC
    SESSION_PROPOSERS_STDDEV_SAMPLE_PROPOSER_ID_ASC
    SESSION_PROPOSERS_STDDEV_SAMPLE_PROPOSER_ID_DESC
    SESSION_PROPOSERS_STDDEV_SAMPLE_SESSION_ID_ASC
    SESSION_PROPOSERS_STDDEV_SAMPLE_SESSION_ID_DESC
    SESSION_PROPOSERS_SUM_ID_ASC
    SESSION_PROPOSERS_SUM_ID_DESC
    SESSION_PROPOSERS_SUM_PROPOSER_ID_ASC
    SESSION_PROPOSERS_SUM_PROPOSER_ID_DESC
    SESSION_PROPOSERS_SUM_SESSION_ID_ASC
    SESSION_PROPOSERS_SUM_SESSION_ID_DESC
    SESSION_PROPOSERS_VARIANCE_POPULATION_ID_ASC
    SESSION_PROPOSERS_VARIANCE_POPULATION_ID_DESC
    SESSION_PROPOSERS_VARIANCE_POPULATION_PROPOSER_ID_ASC
    SESSION_PROPOSERS_VARIANCE_POPULATION_PROPOSER_ID_DESC
    SESSION_PROPOSERS_VARIANCE_POPULATION_SESSION_ID_ASC
    SESSION_PROPOSERS_VARIANCE_POPULATION_SESSION_ID_DESC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_ID_ASC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_ID_DESC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_PROPOSER_ID_ASC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_PROPOSER_ID_DESC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_SESSION_ID_ASC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_SESSION_ID_DESC
    VOTES_AVERAGE_BLOCK_ID_ASC
    VOTES_AVERAGE_BLOCK_ID_DESC
    VOTES_AVERAGE_BLOCK_NUMBER_ASC
    VOTES_AVERAGE_BLOCK_NUMBER_DESC
    VOTES_AVERAGE_ID_ASC
    VOTES_AVERAGE_ID_DESC
    VOTES_AVERAGE_PROPOSAL_ID_ASC
    VOTES_AVERAGE_PROPOSAL_ID_DESC
    VOTES_AVERAGE_VOTER_ID_ASC
    VOTES_AVERAGE_VOTER_ID_DESC
    VOTES_AVERAGE_VOTE_STATUS_ASC
    VOTES_AVERAGE_VOTE_STATUS_DESC
    VOTES_COUNT_ASC
    VOTES_COUNT_DESC
    VOTES_DISTINCT_COUNT_BLOCK_ID_ASC
    VOTES_DISTINCT_COUNT_BLOCK_ID_DESC
    VOTES_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    VOTES_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    VOTES_DISTINCT_COUNT_ID_ASC
    VOTES_DISTINCT_COUNT_ID_DESC
    VOTES_DISTINCT_COUNT_PROPOSAL_ID_ASC
    VOTES_DISTINCT_COUNT_PROPOSAL_ID_DESC
    VOTES_DISTINCT_COUNT_VOTER_ID_ASC
    VOTES_DISTINCT_COUNT_VOTER_ID_DESC
    VOTES_DISTINCT_COUNT_VOTE_STATUS_ASC
    VOTES_DISTINCT_COUNT_VOTE_STATUS_DESC
    VOTES_MAX_BLOCK_ID_ASC
    VOTES_MAX_BLOCK_ID_DESC
    VOTES_MAX_BLOCK_NUMBER_ASC
    VOTES_MAX_BLOCK_NUMBER_DESC
    VOTES_MAX_ID_ASC
    VOTES_MAX_ID_DESC
    VOTES_MAX_PROPOSAL_ID_ASC
    VOTES_MAX_PROPOSAL_ID_DESC
    VOTES_MAX_VOTER_ID_ASC
    VOTES_MAX_VOTER_ID_DESC
    VOTES_MAX_VOTE_STATUS_ASC
    VOTES_MAX_VOTE_STATUS_DESC
    VOTES_MIN_BLOCK_ID_ASC
    VOTES_MIN_BLOCK_ID_DESC
    VOTES_MIN_BLOCK_NUMBER_ASC
    VOTES_MIN_BLOCK_NUMBER_DESC
    VOTES_MIN_ID_ASC
    VOTES_MIN_ID_DESC
    VOTES_MIN_PROPOSAL_ID_ASC
    VOTES_MIN_PROPOSAL_ID_DESC
    VOTES_MIN_VOTER_ID_ASC
    VOTES_MIN_VOTER_ID_DESC
    VOTES_MIN_VOTE_STATUS_ASC
    VOTES_MIN_VOTE_STATUS_DESC
    VOTES_STDDEV_POPULATION_BLOCK_ID_ASC
    VOTES_STDDEV_POPULATION_BLOCK_ID_DESC
    VOTES_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    VOTES_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    VOTES_STDDEV_POPULATION_ID_ASC
    VOTES_STDDEV_POPULATION_ID_DESC
    VOTES_STDDEV_POPULATION_PROPOSAL_ID_ASC
    VOTES_STDDEV_POPULATION_PROPOSAL_ID_DESC
    VOTES_STDDEV_POPULATION_VOTER_ID_ASC
    VOTES_STDDEV_POPULATION_VOTER_ID_DESC
    VOTES_STDDEV_POPULATION_VOTE_STATUS_ASC
    VOTES_STDDEV_POPULATION_VOTE_STATUS_DESC
    VOTES_STDDEV_SAMPLE_BLOCK_ID_ASC
    VOTES_STDDEV_SAMPLE_BLOCK_ID_DESC
    VOTES_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    VOTES_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    VOTES_STDDEV_SAMPLE_ID_ASC
    VOTES_STDDEV_SAMPLE_ID_DESC
    VOTES_STDDEV_SAMPLE_PROPOSAL_ID_ASC
    VOTES_STDDEV_SAMPLE_PROPOSAL_ID_DESC
    VOTES_STDDEV_SAMPLE_VOTER_ID_ASC
    VOTES_STDDEV_SAMPLE_VOTER_ID_DESC
    VOTES_STDDEV_SAMPLE_VOTE_STATUS_ASC
    VOTES_STDDEV_SAMPLE_VOTE_STATUS_DESC
    VOTES_SUM_BLOCK_ID_ASC
    VOTES_SUM_BLOCK_ID_DESC
    VOTES_SUM_BLOCK_NUMBER_ASC
    VOTES_SUM_BLOCK_NUMBER_DESC
    VOTES_SUM_ID_ASC
    VOTES_SUM_ID_DESC
    VOTES_SUM_PROPOSAL_ID_ASC
    VOTES_SUM_PROPOSAL_ID_DESC
    VOTES_SUM_VOTER_ID_ASC
    VOTES_SUM_VOTER_ID_DESC
    VOTES_SUM_VOTE_STATUS_ASC
    VOTES_SUM_VOTE_STATUS_DESC
    VOTES_VARIANCE_POPULATION_BLOCK_ID_ASC
    VOTES_VARIANCE_POPULATION_BLOCK_ID_DESC
    VOTES_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    VOTES_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    VOTES_VARIANCE_POPULATION_ID_ASC
    VOTES_VARIANCE_POPULATION_ID_DESC
    VOTES_VARIANCE_POPULATION_PROPOSAL_ID_ASC
    VOTES_VARIANCE_POPULATION_PROPOSAL_ID_DESC
    VOTES_VARIANCE_POPULATION_VOTER_ID_ASC
    VOTES_VARIANCE_POPULATION_VOTER_ID_DESC
    VOTES_VARIANCE_POPULATION_VOTE_STATUS_ASC
    VOTES_VARIANCE_POPULATION_VOTE_STATUS_DESC
    VOTES_VARIANCE_SAMPLE_BLOCK_ID_ASC
    VOTES_VARIANCE_SAMPLE_BLOCK_ID_DESC
    VOTES_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    VOTES_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    VOTES_VARIANCE_SAMPLE_ID_ASC
    VOTES_VARIANCE_SAMPLE_ID_DESC
    VOTES_VARIANCE_SAMPLE_PROPOSAL_ID_ASC
    VOTES_VARIANCE_SAMPLE_PROPOSAL_ID_DESC
    VOTES_VARIANCE_SAMPLE_VOTER_ID_ASC
    VOTES_VARIANCE_SAMPLE_VOTER_ID_DESC
    VOTES_VARIANCE_SAMPLE_VOTE_STATUS_ASC
    VOTES_VARIANCE_SAMPLE_VOTE_STATUS_DESC
}

"Grouping methods for `PublicKey` for usage during aggregation."
enum PublicKeysGroupBy {
    BLOCK_ID
    COMPRESSED
    HISTORY
}

"Methods to use when ordering `PublicKey`."
enum PublicKeysOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    COMPRESSED_ASC
    COMPRESSED_DESC
    HISTORY_ASC
    HISTORY_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SESSIONS_AVERAGE_BLOCK_ID_ASC
    SESSIONS_AVERAGE_BLOCK_ID_DESC
    SESSIONS_AVERAGE_BLOCK_NUMBER_ASC
    SESSIONS_AVERAGE_BLOCK_NUMBER_DESC
    SESSIONS_AVERAGE_ID_ASC
    SESSIONS_AVERAGE_ID_DESC
    SESSIONS_AVERAGE_PUBLIC_KEY_ID_ASC
    SESSIONS_AVERAGE_PUBLIC_KEY_ID_DESC
    SESSIONS_COUNT_ASC
    SESSIONS_COUNT_DESC
    SESSIONS_DISTINCT_COUNT_BLOCK_ID_ASC
    SESSIONS_DISTINCT_COUNT_BLOCK_ID_DESC
    SESSIONS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    SESSIONS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    SESSIONS_DISTINCT_COUNT_ID_ASC
    SESSIONS_DISTINCT_COUNT_ID_DESC
    SESSIONS_DISTINCT_COUNT_PUBLIC_KEY_ID_ASC
    SESSIONS_DISTINCT_COUNT_PUBLIC_KEY_ID_DESC
    SESSIONS_MAX_BLOCK_ID_ASC
    SESSIONS_MAX_BLOCK_ID_DESC
    SESSIONS_MAX_BLOCK_NUMBER_ASC
    SESSIONS_MAX_BLOCK_NUMBER_DESC
    SESSIONS_MAX_ID_ASC
    SESSIONS_MAX_ID_DESC
    SESSIONS_MAX_PUBLIC_KEY_ID_ASC
    SESSIONS_MAX_PUBLIC_KEY_ID_DESC
    SESSIONS_MIN_BLOCK_ID_ASC
    SESSIONS_MIN_BLOCK_ID_DESC
    SESSIONS_MIN_BLOCK_NUMBER_ASC
    SESSIONS_MIN_BLOCK_NUMBER_DESC
    SESSIONS_MIN_ID_ASC
    SESSIONS_MIN_ID_DESC
    SESSIONS_MIN_PUBLIC_KEY_ID_ASC
    SESSIONS_MIN_PUBLIC_KEY_ID_DESC
    SESSIONS_STDDEV_POPULATION_BLOCK_ID_ASC
    SESSIONS_STDDEV_POPULATION_BLOCK_ID_DESC
    SESSIONS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    SESSIONS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    SESSIONS_STDDEV_POPULATION_ID_ASC
    SESSIONS_STDDEV_POPULATION_ID_DESC
    SESSIONS_STDDEV_POPULATION_PUBLIC_KEY_ID_ASC
    SESSIONS_STDDEV_POPULATION_PUBLIC_KEY_ID_DESC
    SESSIONS_STDDEV_SAMPLE_BLOCK_ID_ASC
    SESSIONS_STDDEV_SAMPLE_BLOCK_ID_DESC
    SESSIONS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    SESSIONS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    SESSIONS_STDDEV_SAMPLE_ID_ASC
    SESSIONS_STDDEV_SAMPLE_ID_DESC
    SESSIONS_STDDEV_SAMPLE_PUBLIC_KEY_ID_ASC
    SESSIONS_STDDEV_SAMPLE_PUBLIC_KEY_ID_DESC
    SESSIONS_SUM_BLOCK_ID_ASC
    SESSIONS_SUM_BLOCK_ID_DESC
    SESSIONS_SUM_BLOCK_NUMBER_ASC
    SESSIONS_SUM_BLOCK_NUMBER_DESC
    SESSIONS_SUM_ID_ASC
    SESSIONS_SUM_ID_DESC
    SESSIONS_SUM_PUBLIC_KEY_ID_ASC
    SESSIONS_SUM_PUBLIC_KEY_ID_DESC
    SESSIONS_VARIANCE_POPULATION_BLOCK_ID_ASC
    SESSIONS_VARIANCE_POPULATION_BLOCK_ID_DESC
    SESSIONS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    SESSIONS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    SESSIONS_VARIANCE_POPULATION_ID_ASC
    SESSIONS_VARIANCE_POPULATION_ID_DESC
    SESSIONS_VARIANCE_POPULATION_PUBLIC_KEY_ID_ASC
    SESSIONS_VARIANCE_POPULATION_PUBLIC_KEY_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    SESSIONS_VARIANCE_SAMPLE_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_PUBLIC_KEY_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_PUBLIC_KEY_ID_DESC
    UNCOMPRESSED_ASC
    UNCOMPRESSED_DESC
}

"Grouping methods for `SessionProposer` for usage during aggregation."
enum SessionProposersGroupBy {
    PROPOSER_ID
    SESSION_ID
}

"Methods to use when ordering `SessionProposer`."
enum SessionProposersOrderBy {
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSER_ID_ASC
    PROPOSER_ID_DESC
    SESSION_ID_ASC
    SESSION_ID_DESC
}

"Grouping methods for `SessionValidator` for usage during aggregation."
enum SessionValidatorsGroupBy {
    BEST_ORDER
    BLOCK_NUMBER
    IS_BEST
    IS_NEXT
    IS_NEXT_BEST
    NEXT_BEST_ORDER
    REPUTATION
    SESSION_ID
    UPTIME
    VALIDATOR_ID
}

"Methods to use when ordering `SessionValidator`."
enum SessionValidatorsOrderBy {
    BEST_ORDER_ASC
    BEST_ORDER_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    IS_BEST_ASC
    IS_BEST_DESC
    IS_NEXT_ASC
    IS_NEXT_BEST_ASC
    IS_NEXT_BEST_DESC
    IS_NEXT_DESC
    NATURAL
    NEXT_BEST_ORDER_ASC
    NEXT_BEST_ORDER_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    REPUTATION_ASC
    REPUTATION_DESC
    SESSION_ID_ASC
    SESSION_ID_DESC
    UPTIME_ASC
    UPTIME_DESC
    VALIDATOR_ID_ASC
    VALIDATOR_ID_DESC
}

"Grouping methods for `Session` for usage during aggregation."
enum SessionsGroupBy {
    BLOCK_ID
    BLOCK_NUMBER
    PUBLIC_KEY_ID
}

"Methods to use when ordering `Session`."
enum SessionsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    HEART_BEATS_AVERAGE_ACCOUNT_ID_ASC
    HEART_BEATS_AVERAGE_ACCOUNT_ID_DESC
    HEART_BEATS_AVERAGE_BLOCK_NUMBER_ASC
    HEART_BEATS_AVERAGE_BLOCK_NUMBER_DESC
    HEART_BEATS_AVERAGE_ID_ASC
    HEART_BEATS_AVERAGE_ID_DESC
    HEART_BEATS_AVERAGE_SESSION_ID_ASC
    HEART_BEATS_AVERAGE_SESSION_ID_DESC
    HEART_BEATS_COUNT_ASC
    HEART_BEATS_COUNT_DESC
    HEART_BEATS_DISTINCT_COUNT_ACCOUNT_ID_ASC
    HEART_BEATS_DISTINCT_COUNT_ACCOUNT_ID_DESC
    HEART_BEATS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    HEART_BEATS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    HEART_BEATS_DISTINCT_COUNT_ID_ASC
    HEART_BEATS_DISTINCT_COUNT_ID_DESC
    HEART_BEATS_DISTINCT_COUNT_SESSION_ID_ASC
    HEART_BEATS_DISTINCT_COUNT_SESSION_ID_DESC
    HEART_BEATS_MAX_ACCOUNT_ID_ASC
    HEART_BEATS_MAX_ACCOUNT_ID_DESC
    HEART_BEATS_MAX_BLOCK_NUMBER_ASC
    HEART_BEATS_MAX_BLOCK_NUMBER_DESC
    HEART_BEATS_MAX_ID_ASC
    HEART_BEATS_MAX_ID_DESC
    HEART_BEATS_MAX_SESSION_ID_ASC
    HEART_BEATS_MAX_SESSION_ID_DESC
    HEART_BEATS_MIN_ACCOUNT_ID_ASC
    HEART_BEATS_MIN_ACCOUNT_ID_DESC
    HEART_BEATS_MIN_BLOCK_NUMBER_ASC
    HEART_BEATS_MIN_BLOCK_NUMBER_DESC
    HEART_BEATS_MIN_ID_ASC
    HEART_BEATS_MIN_ID_DESC
    HEART_BEATS_MIN_SESSION_ID_ASC
    HEART_BEATS_MIN_SESSION_ID_DESC
    HEART_BEATS_STDDEV_POPULATION_ACCOUNT_ID_ASC
    HEART_BEATS_STDDEV_POPULATION_ACCOUNT_ID_DESC
    HEART_BEATS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    HEART_BEATS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    HEART_BEATS_STDDEV_POPULATION_ID_ASC
    HEART_BEATS_STDDEV_POPULATION_ID_DESC
    HEART_BEATS_STDDEV_POPULATION_SESSION_ID_ASC
    HEART_BEATS_STDDEV_POPULATION_SESSION_ID_DESC
    HEART_BEATS_STDDEV_SAMPLE_ACCOUNT_ID_ASC
    HEART_BEATS_STDDEV_SAMPLE_ACCOUNT_ID_DESC
    HEART_BEATS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    HEART_BEATS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    HEART_BEATS_STDDEV_SAMPLE_ID_ASC
    HEART_BEATS_STDDEV_SAMPLE_ID_DESC
    HEART_BEATS_STDDEV_SAMPLE_SESSION_ID_ASC
    HEART_BEATS_STDDEV_SAMPLE_SESSION_ID_DESC
    HEART_BEATS_SUM_ACCOUNT_ID_ASC
    HEART_BEATS_SUM_ACCOUNT_ID_DESC
    HEART_BEATS_SUM_BLOCK_NUMBER_ASC
    HEART_BEATS_SUM_BLOCK_NUMBER_DESC
    HEART_BEATS_SUM_ID_ASC
    HEART_BEATS_SUM_ID_DESC
    HEART_BEATS_SUM_SESSION_ID_ASC
    HEART_BEATS_SUM_SESSION_ID_DESC
    HEART_BEATS_VARIANCE_POPULATION_ACCOUNT_ID_ASC
    HEART_BEATS_VARIANCE_POPULATION_ACCOUNT_ID_DESC
    HEART_BEATS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    HEART_BEATS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    HEART_BEATS_VARIANCE_POPULATION_ID_ASC
    HEART_BEATS_VARIANCE_POPULATION_ID_DESC
    HEART_BEATS_VARIANCE_POPULATION_SESSION_ID_ASC
    HEART_BEATS_VARIANCE_POPULATION_SESSION_ID_DESC
    HEART_BEATS_VARIANCE_SAMPLE_ACCOUNT_ID_ASC
    HEART_BEATS_VARIANCE_SAMPLE_ACCOUNT_ID_DESC
    HEART_BEATS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    HEART_BEATS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    HEART_BEATS_VARIANCE_SAMPLE_ID_ASC
    HEART_BEATS_VARIANCE_SAMPLE_ID_DESC
    HEART_BEATS_VARIANCE_SAMPLE_SESSION_ID_ASC
    HEART_BEATS_VARIANCE_SAMPLE_SESSION_ID_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PUBLIC_KEY_ID_ASC
    PUBLIC_KEY_ID_DESC
    SESSION_PROPOSERS_AVERAGE_ID_ASC
    SESSION_PROPOSERS_AVERAGE_ID_DESC
    SESSION_PROPOSERS_AVERAGE_PROPOSER_ID_ASC
    SESSION_PROPOSERS_AVERAGE_PROPOSER_ID_DESC
    SESSION_PROPOSERS_AVERAGE_SESSION_ID_ASC
    SESSION_PROPOSERS_AVERAGE_SESSION_ID_DESC
    SESSION_PROPOSERS_COUNT_ASC
    SESSION_PROPOSERS_COUNT_DESC
    SESSION_PROPOSERS_DISTINCT_COUNT_ID_ASC
    SESSION_PROPOSERS_DISTINCT_COUNT_ID_DESC
    SESSION_PROPOSERS_DISTINCT_COUNT_PROPOSER_ID_ASC
    SESSION_PROPOSERS_DISTINCT_COUNT_PROPOSER_ID_DESC
    SESSION_PROPOSERS_DISTINCT_COUNT_SESSION_ID_ASC
    SESSION_PROPOSERS_DISTINCT_COUNT_SESSION_ID_DESC
    SESSION_PROPOSERS_MAX_ID_ASC
    SESSION_PROPOSERS_MAX_ID_DESC
    SESSION_PROPOSERS_MAX_PROPOSER_ID_ASC
    SESSION_PROPOSERS_MAX_PROPOSER_ID_DESC
    SESSION_PROPOSERS_MAX_SESSION_ID_ASC
    SESSION_PROPOSERS_MAX_SESSION_ID_DESC
    SESSION_PROPOSERS_MIN_ID_ASC
    SESSION_PROPOSERS_MIN_ID_DESC
    SESSION_PROPOSERS_MIN_PROPOSER_ID_ASC
    SESSION_PROPOSERS_MIN_PROPOSER_ID_DESC
    SESSION_PROPOSERS_MIN_SESSION_ID_ASC
    SESSION_PROPOSERS_MIN_SESSION_ID_DESC
    SESSION_PROPOSERS_STDDEV_POPULATION_ID_ASC
    SESSION_PROPOSERS_STDDEV_POPULATION_ID_DESC
    SESSION_PROPOSERS_STDDEV_POPULATION_PROPOSER_ID_ASC
    SESSION_PROPOSERS_STDDEV_POPULATION_PROPOSER_ID_DESC
    SESSION_PROPOSERS_STDDEV_POPULATION_SESSION_ID_ASC
    SESSION_PROPOSERS_STDDEV_POPULATION_SESSION_ID_DESC
    SESSION_PROPOSERS_STDDEV_SAMPLE_ID_ASC
    SESSION_PROPOSERS_STDDEV_SAMPLE_ID_DESC
    SESSION_PROPOSERS_STDDEV_SAMPLE_PROPOSER_ID_ASC
    SESSION_PROPOSERS_STDDEV_SAMPLE_PROPOSER_ID_DESC
    SESSION_PROPOSERS_STDDEV_SAMPLE_SESSION_ID_ASC
    SESSION_PROPOSERS_STDDEV_SAMPLE_SESSION_ID_DESC
    SESSION_PROPOSERS_SUM_ID_ASC
    SESSION_PROPOSERS_SUM_ID_DESC
    SESSION_PROPOSERS_SUM_PROPOSER_ID_ASC
    SESSION_PROPOSERS_SUM_PROPOSER_ID_DESC
    SESSION_PROPOSERS_SUM_SESSION_ID_ASC
    SESSION_PROPOSERS_SUM_SESSION_ID_DESC
    SESSION_PROPOSERS_VARIANCE_POPULATION_ID_ASC
    SESSION_PROPOSERS_VARIANCE_POPULATION_ID_DESC
    SESSION_PROPOSERS_VARIANCE_POPULATION_PROPOSER_ID_ASC
    SESSION_PROPOSERS_VARIANCE_POPULATION_PROPOSER_ID_DESC
    SESSION_PROPOSERS_VARIANCE_POPULATION_SESSION_ID_ASC
    SESSION_PROPOSERS_VARIANCE_POPULATION_SESSION_ID_DESC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_ID_ASC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_ID_DESC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_PROPOSER_ID_ASC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_PROPOSER_ID_DESC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_SESSION_ID_ASC
    SESSION_PROPOSERS_VARIANCE_SAMPLE_SESSION_ID_DESC
    SESSION_VALIDATORS_AVERAGE_BEST_ORDER_ASC
    SESSION_VALIDATORS_AVERAGE_BEST_ORDER_DESC
    SESSION_VALIDATORS_AVERAGE_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_AVERAGE_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_AVERAGE_ID_ASC
    SESSION_VALIDATORS_AVERAGE_ID_DESC
    SESSION_VALIDATORS_AVERAGE_IS_BEST_ASC
    SESSION_VALIDATORS_AVERAGE_IS_BEST_DESC
    SESSION_VALIDATORS_AVERAGE_IS_NEXT_ASC
    SESSION_VALIDATORS_AVERAGE_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_AVERAGE_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_AVERAGE_IS_NEXT_DESC
    SESSION_VALIDATORS_AVERAGE_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_AVERAGE_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_AVERAGE_REPUTATION_ASC
    SESSION_VALIDATORS_AVERAGE_REPUTATION_DESC
    SESSION_VALIDATORS_AVERAGE_SESSION_ID_ASC
    SESSION_VALIDATORS_AVERAGE_SESSION_ID_DESC
    SESSION_VALIDATORS_AVERAGE_UPTIME_ASC
    SESSION_VALIDATORS_AVERAGE_UPTIME_DESC
    SESSION_VALIDATORS_AVERAGE_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_AVERAGE_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_COUNT_ASC
    SESSION_VALIDATORS_COUNT_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_BEST_ORDER_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_BEST_ORDER_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_ID_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_ID_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_BEST_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_BEST_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_NEXT_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_NEXT_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_REPUTATION_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_REPUTATION_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_SESSION_ID_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_SESSION_ID_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_UPTIME_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_UPTIME_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_MAX_BEST_ORDER_ASC
    SESSION_VALIDATORS_MAX_BEST_ORDER_DESC
    SESSION_VALIDATORS_MAX_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_MAX_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_MAX_ID_ASC
    SESSION_VALIDATORS_MAX_ID_DESC
    SESSION_VALIDATORS_MAX_IS_BEST_ASC
    SESSION_VALIDATORS_MAX_IS_BEST_DESC
    SESSION_VALIDATORS_MAX_IS_NEXT_ASC
    SESSION_VALIDATORS_MAX_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_MAX_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_MAX_IS_NEXT_DESC
    SESSION_VALIDATORS_MAX_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_MAX_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_MAX_REPUTATION_ASC
    SESSION_VALIDATORS_MAX_REPUTATION_DESC
    SESSION_VALIDATORS_MAX_SESSION_ID_ASC
    SESSION_VALIDATORS_MAX_SESSION_ID_DESC
    SESSION_VALIDATORS_MAX_UPTIME_ASC
    SESSION_VALIDATORS_MAX_UPTIME_DESC
    SESSION_VALIDATORS_MAX_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_MAX_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_MIN_BEST_ORDER_ASC
    SESSION_VALIDATORS_MIN_BEST_ORDER_DESC
    SESSION_VALIDATORS_MIN_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_MIN_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_MIN_ID_ASC
    SESSION_VALIDATORS_MIN_ID_DESC
    SESSION_VALIDATORS_MIN_IS_BEST_ASC
    SESSION_VALIDATORS_MIN_IS_BEST_DESC
    SESSION_VALIDATORS_MIN_IS_NEXT_ASC
    SESSION_VALIDATORS_MIN_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_MIN_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_MIN_IS_NEXT_DESC
    SESSION_VALIDATORS_MIN_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_MIN_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_MIN_REPUTATION_ASC
    SESSION_VALIDATORS_MIN_REPUTATION_DESC
    SESSION_VALIDATORS_MIN_SESSION_ID_ASC
    SESSION_VALIDATORS_MIN_SESSION_ID_DESC
    SESSION_VALIDATORS_MIN_UPTIME_ASC
    SESSION_VALIDATORS_MIN_UPTIME_DESC
    SESSION_VALIDATORS_MIN_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_MIN_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_BEST_ORDER_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_BEST_ORDER_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_ID_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_ID_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_BEST_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_BEST_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_NEXT_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_NEXT_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_REPUTATION_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_REPUTATION_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_SESSION_ID_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_SESSION_ID_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_UPTIME_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_UPTIME_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_BEST_ORDER_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_BEST_ORDER_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_ID_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_ID_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_BEST_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_BEST_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_NEXT_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_NEXT_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_REPUTATION_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_REPUTATION_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_SESSION_ID_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_SESSION_ID_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_UPTIME_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_UPTIME_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_SUM_BEST_ORDER_ASC
    SESSION_VALIDATORS_SUM_BEST_ORDER_DESC
    SESSION_VALIDATORS_SUM_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_SUM_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_SUM_ID_ASC
    SESSION_VALIDATORS_SUM_ID_DESC
    SESSION_VALIDATORS_SUM_IS_BEST_ASC
    SESSION_VALIDATORS_SUM_IS_BEST_DESC
    SESSION_VALIDATORS_SUM_IS_NEXT_ASC
    SESSION_VALIDATORS_SUM_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_SUM_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_SUM_IS_NEXT_DESC
    SESSION_VALIDATORS_SUM_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_SUM_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_SUM_REPUTATION_ASC
    SESSION_VALIDATORS_SUM_REPUTATION_DESC
    SESSION_VALIDATORS_SUM_SESSION_ID_ASC
    SESSION_VALIDATORS_SUM_SESSION_ID_DESC
    SESSION_VALIDATORS_SUM_UPTIME_ASC
    SESSION_VALIDATORS_SUM_UPTIME_DESC
    SESSION_VALIDATORS_SUM_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_SUM_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_BEST_ORDER_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_BEST_ORDER_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_ID_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_ID_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_BEST_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_BEST_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_NEXT_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_NEXT_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_REPUTATION_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_REPUTATION_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_SESSION_ID_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_SESSION_ID_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_UPTIME_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_UPTIME_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_BEST_ORDER_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_BEST_ORDER_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_ID_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_ID_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_BEST_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_BEST_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_NEXT_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_NEXT_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_REPUTATION_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_REPUTATION_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_SESSION_ID_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_SESSION_ID_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_UPTIME_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_UPTIME_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_VALIDATOR_ID_DESC
    THRESHOLDS_AVERAGE_CURRENT_ASC
    THRESHOLDS_AVERAGE_CURRENT_DESC
    THRESHOLDS_AVERAGE_ID_ASC
    THRESHOLDS_AVERAGE_ID_DESC
    THRESHOLDS_AVERAGE_NEXT_ASC
    THRESHOLDS_AVERAGE_NEXT_DESC
    THRESHOLDS_AVERAGE_PENDING_ASC
    THRESHOLDS_AVERAGE_PENDING_DESC
    THRESHOLDS_AVERAGE_SESSION_ID_ASC
    THRESHOLDS_AVERAGE_SESSION_ID_DESC
    THRESHOLDS_AVERAGE_VARIANT_ASC
    THRESHOLDS_AVERAGE_VARIANT_DESC
    THRESHOLDS_COUNT_ASC
    THRESHOLDS_COUNT_DESC
    THRESHOLDS_DISTINCT_COUNT_CURRENT_ASC
    THRESHOLDS_DISTINCT_COUNT_CURRENT_DESC
    THRESHOLDS_DISTINCT_COUNT_ID_ASC
    THRESHOLDS_DISTINCT_COUNT_ID_DESC
    THRESHOLDS_DISTINCT_COUNT_NEXT_ASC
    THRESHOLDS_DISTINCT_COUNT_NEXT_DESC
    THRESHOLDS_DISTINCT_COUNT_PENDING_ASC
    THRESHOLDS_DISTINCT_COUNT_PENDING_DESC
    THRESHOLDS_DISTINCT_COUNT_SESSION_ID_ASC
    THRESHOLDS_DISTINCT_COUNT_SESSION_ID_DESC
    THRESHOLDS_DISTINCT_COUNT_VARIANT_ASC
    THRESHOLDS_DISTINCT_COUNT_VARIANT_DESC
    THRESHOLDS_MAX_CURRENT_ASC
    THRESHOLDS_MAX_CURRENT_DESC
    THRESHOLDS_MAX_ID_ASC
    THRESHOLDS_MAX_ID_DESC
    THRESHOLDS_MAX_NEXT_ASC
    THRESHOLDS_MAX_NEXT_DESC
    THRESHOLDS_MAX_PENDING_ASC
    THRESHOLDS_MAX_PENDING_DESC
    THRESHOLDS_MAX_SESSION_ID_ASC
    THRESHOLDS_MAX_SESSION_ID_DESC
    THRESHOLDS_MAX_VARIANT_ASC
    THRESHOLDS_MAX_VARIANT_DESC
    THRESHOLDS_MIN_CURRENT_ASC
    THRESHOLDS_MIN_CURRENT_DESC
    THRESHOLDS_MIN_ID_ASC
    THRESHOLDS_MIN_ID_DESC
    THRESHOLDS_MIN_NEXT_ASC
    THRESHOLDS_MIN_NEXT_DESC
    THRESHOLDS_MIN_PENDING_ASC
    THRESHOLDS_MIN_PENDING_DESC
    THRESHOLDS_MIN_SESSION_ID_ASC
    THRESHOLDS_MIN_SESSION_ID_DESC
    THRESHOLDS_MIN_VARIANT_ASC
    THRESHOLDS_MIN_VARIANT_DESC
    THRESHOLDS_STDDEV_POPULATION_CURRENT_ASC
    THRESHOLDS_STDDEV_POPULATION_CURRENT_DESC
    THRESHOLDS_STDDEV_POPULATION_ID_ASC
    THRESHOLDS_STDDEV_POPULATION_ID_DESC
    THRESHOLDS_STDDEV_POPULATION_NEXT_ASC
    THRESHOLDS_STDDEV_POPULATION_NEXT_DESC
    THRESHOLDS_STDDEV_POPULATION_PENDING_ASC
    THRESHOLDS_STDDEV_POPULATION_PENDING_DESC
    THRESHOLDS_STDDEV_POPULATION_SESSION_ID_ASC
    THRESHOLDS_STDDEV_POPULATION_SESSION_ID_DESC
    THRESHOLDS_STDDEV_POPULATION_VARIANT_ASC
    THRESHOLDS_STDDEV_POPULATION_VARIANT_DESC
    THRESHOLDS_STDDEV_SAMPLE_CURRENT_ASC
    THRESHOLDS_STDDEV_SAMPLE_CURRENT_DESC
    THRESHOLDS_STDDEV_SAMPLE_ID_ASC
    THRESHOLDS_STDDEV_SAMPLE_ID_DESC
    THRESHOLDS_STDDEV_SAMPLE_NEXT_ASC
    THRESHOLDS_STDDEV_SAMPLE_NEXT_DESC
    THRESHOLDS_STDDEV_SAMPLE_PENDING_ASC
    THRESHOLDS_STDDEV_SAMPLE_PENDING_DESC
    THRESHOLDS_STDDEV_SAMPLE_SESSION_ID_ASC
    THRESHOLDS_STDDEV_SAMPLE_SESSION_ID_DESC
    THRESHOLDS_STDDEV_SAMPLE_VARIANT_ASC
    THRESHOLDS_STDDEV_SAMPLE_VARIANT_DESC
    THRESHOLDS_SUM_CURRENT_ASC
    THRESHOLDS_SUM_CURRENT_DESC
    THRESHOLDS_SUM_ID_ASC
    THRESHOLDS_SUM_ID_DESC
    THRESHOLDS_SUM_NEXT_ASC
    THRESHOLDS_SUM_NEXT_DESC
    THRESHOLDS_SUM_PENDING_ASC
    THRESHOLDS_SUM_PENDING_DESC
    THRESHOLDS_SUM_SESSION_ID_ASC
    THRESHOLDS_SUM_SESSION_ID_DESC
    THRESHOLDS_SUM_VARIANT_ASC
    THRESHOLDS_SUM_VARIANT_DESC
    THRESHOLDS_VARIANCE_POPULATION_CURRENT_ASC
    THRESHOLDS_VARIANCE_POPULATION_CURRENT_DESC
    THRESHOLDS_VARIANCE_POPULATION_ID_ASC
    THRESHOLDS_VARIANCE_POPULATION_ID_DESC
    THRESHOLDS_VARIANCE_POPULATION_NEXT_ASC
    THRESHOLDS_VARIANCE_POPULATION_NEXT_DESC
    THRESHOLDS_VARIANCE_POPULATION_PENDING_ASC
    THRESHOLDS_VARIANCE_POPULATION_PENDING_DESC
    THRESHOLDS_VARIANCE_POPULATION_SESSION_ID_ASC
    THRESHOLDS_VARIANCE_POPULATION_SESSION_ID_DESC
    THRESHOLDS_VARIANCE_POPULATION_VARIANT_ASC
    THRESHOLDS_VARIANCE_POPULATION_VARIANT_DESC
    THRESHOLDS_VARIANCE_SAMPLE_CURRENT_ASC
    THRESHOLDS_VARIANCE_SAMPLE_CURRENT_DESC
    THRESHOLDS_VARIANCE_SAMPLE_ID_ASC
    THRESHOLDS_VARIANCE_SAMPLE_ID_DESC
    THRESHOLDS_VARIANCE_SAMPLE_NEXT_ASC
    THRESHOLDS_VARIANCE_SAMPLE_NEXT_DESC
    THRESHOLDS_VARIANCE_SAMPLE_PENDING_ASC
    THRESHOLDS_VARIANCE_SAMPLE_PENDING_DESC
    THRESHOLDS_VARIANCE_SAMPLE_SESSION_ID_ASC
    THRESHOLDS_VARIANCE_SAMPLE_SESSION_ID_DESC
    THRESHOLDS_VARIANCE_SAMPLE_VARIANT_ASC
    THRESHOLDS_VARIANCE_SAMPLE_VARIANT_DESC
}

"Grouping methods for `SignatureThreshold` for usage during aggregation."
enum SignatureThresholdsGroupBy {
    BLOCK_ID
    CURRENT
    NEXT
    PENDING
}

"Methods to use when ordering `SignatureThreshold`."
enum SignatureThresholdsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    CURRENT_ASC
    CURRENT_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NEXT_ASC
    NEXT_DESC
    PENDING_ASC
    PENDING_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
}

"Grouping methods for `Threshold` for usage during aggregation."
enum ThresholdsGroupBy {
    CURRENT
    NEXT
    PENDING
    SESSION_ID
    VARIANT
}

"Methods to use when ordering `Threshold`."
enum ThresholdsOrderBy {
    CURRENT_ASC
    CURRENT_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NEXT_ASC
    NEXT_DESC
    PENDING_ASC
    PENDING_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SESSION_ID_ASC
    SESSION_ID_DESC
    VARIANT_ASC
    VARIANT_DESC
}

"Grouping methods for `UnsignedProposalsQueueItem` for usage during aggregation."
enum UnsignedProposalsQueueItemsGroupBy {
    BLOCK_NUMBER
    PROPOSAL_ID
    QUEUE_ID
}

"Methods to use when ordering `UnsignedProposalsQueueItem`."
enum UnsignedProposalsQueueItemsOrderBy {
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSAL_ID_ASC
    PROPOSAL_ID_DESC
    QUEUE_ID_ASC
    QUEUE_ID_DESC
}

"Grouping methods for `UnsignedProposalsQueue` for usage during aggregation."
enum UnsignedProposalsQueuesGroupBy {
    BLOCK_ID
    BLOCK_NUMBER
}

"Methods to use when ordering `UnsignedProposalsQueue`."
enum UnsignedProposalsQueuesOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_COUNT_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_COUNT_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_QUEUE_ID_DESC
}

"Grouping methods for `Validator` for usage during aggregation."
enum ValidatorsGroupBy {
    ACCOUNT_ID
}

"Methods to use when ordering `Validator`."
enum ValidatorsOrderBy {
    ACCOUNT_ID_ASC
    ACCOUNT_ID_DESC
    AUTHORITY_ID_ASC
    AUTHORITY_ID_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SESSION_VALIDATORS_AVERAGE_BEST_ORDER_ASC
    SESSION_VALIDATORS_AVERAGE_BEST_ORDER_DESC
    SESSION_VALIDATORS_AVERAGE_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_AVERAGE_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_AVERAGE_ID_ASC
    SESSION_VALIDATORS_AVERAGE_ID_DESC
    SESSION_VALIDATORS_AVERAGE_IS_BEST_ASC
    SESSION_VALIDATORS_AVERAGE_IS_BEST_DESC
    SESSION_VALIDATORS_AVERAGE_IS_NEXT_ASC
    SESSION_VALIDATORS_AVERAGE_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_AVERAGE_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_AVERAGE_IS_NEXT_DESC
    SESSION_VALIDATORS_AVERAGE_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_AVERAGE_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_AVERAGE_REPUTATION_ASC
    SESSION_VALIDATORS_AVERAGE_REPUTATION_DESC
    SESSION_VALIDATORS_AVERAGE_SESSION_ID_ASC
    SESSION_VALIDATORS_AVERAGE_SESSION_ID_DESC
    SESSION_VALIDATORS_AVERAGE_UPTIME_ASC
    SESSION_VALIDATORS_AVERAGE_UPTIME_DESC
    SESSION_VALIDATORS_AVERAGE_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_AVERAGE_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_COUNT_ASC
    SESSION_VALIDATORS_COUNT_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_BEST_ORDER_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_BEST_ORDER_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_ID_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_ID_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_BEST_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_BEST_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_NEXT_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_IS_NEXT_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_REPUTATION_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_REPUTATION_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_SESSION_ID_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_SESSION_ID_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_UPTIME_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_UPTIME_DESC
    SESSION_VALIDATORS_DISTINCT_COUNT_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_DISTINCT_COUNT_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_MAX_BEST_ORDER_ASC
    SESSION_VALIDATORS_MAX_BEST_ORDER_DESC
    SESSION_VALIDATORS_MAX_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_MAX_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_MAX_ID_ASC
    SESSION_VALIDATORS_MAX_ID_DESC
    SESSION_VALIDATORS_MAX_IS_BEST_ASC
    SESSION_VALIDATORS_MAX_IS_BEST_DESC
    SESSION_VALIDATORS_MAX_IS_NEXT_ASC
    SESSION_VALIDATORS_MAX_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_MAX_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_MAX_IS_NEXT_DESC
    SESSION_VALIDATORS_MAX_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_MAX_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_MAX_REPUTATION_ASC
    SESSION_VALIDATORS_MAX_REPUTATION_DESC
    SESSION_VALIDATORS_MAX_SESSION_ID_ASC
    SESSION_VALIDATORS_MAX_SESSION_ID_DESC
    SESSION_VALIDATORS_MAX_UPTIME_ASC
    SESSION_VALIDATORS_MAX_UPTIME_DESC
    SESSION_VALIDATORS_MAX_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_MAX_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_MIN_BEST_ORDER_ASC
    SESSION_VALIDATORS_MIN_BEST_ORDER_DESC
    SESSION_VALIDATORS_MIN_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_MIN_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_MIN_ID_ASC
    SESSION_VALIDATORS_MIN_ID_DESC
    SESSION_VALIDATORS_MIN_IS_BEST_ASC
    SESSION_VALIDATORS_MIN_IS_BEST_DESC
    SESSION_VALIDATORS_MIN_IS_NEXT_ASC
    SESSION_VALIDATORS_MIN_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_MIN_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_MIN_IS_NEXT_DESC
    SESSION_VALIDATORS_MIN_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_MIN_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_MIN_REPUTATION_ASC
    SESSION_VALIDATORS_MIN_REPUTATION_DESC
    SESSION_VALIDATORS_MIN_SESSION_ID_ASC
    SESSION_VALIDATORS_MIN_SESSION_ID_DESC
    SESSION_VALIDATORS_MIN_UPTIME_ASC
    SESSION_VALIDATORS_MIN_UPTIME_DESC
    SESSION_VALIDATORS_MIN_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_MIN_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_BEST_ORDER_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_BEST_ORDER_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_ID_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_ID_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_BEST_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_BEST_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_NEXT_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_IS_NEXT_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_REPUTATION_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_REPUTATION_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_SESSION_ID_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_SESSION_ID_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_UPTIME_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_UPTIME_DESC
    SESSION_VALIDATORS_STDDEV_POPULATION_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_STDDEV_POPULATION_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_BEST_ORDER_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_BEST_ORDER_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_ID_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_ID_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_BEST_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_BEST_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_NEXT_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_IS_NEXT_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_REPUTATION_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_REPUTATION_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_SESSION_ID_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_SESSION_ID_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_UPTIME_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_UPTIME_DESC
    SESSION_VALIDATORS_STDDEV_SAMPLE_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_STDDEV_SAMPLE_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_SUM_BEST_ORDER_ASC
    SESSION_VALIDATORS_SUM_BEST_ORDER_DESC
    SESSION_VALIDATORS_SUM_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_SUM_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_SUM_ID_ASC
    SESSION_VALIDATORS_SUM_ID_DESC
    SESSION_VALIDATORS_SUM_IS_BEST_ASC
    SESSION_VALIDATORS_SUM_IS_BEST_DESC
    SESSION_VALIDATORS_SUM_IS_NEXT_ASC
    SESSION_VALIDATORS_SUM_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_SUM_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_SUM_IS_NEXT_DESC
    SESSION_VALIDATORS_SUM_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_SUM_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_SUM_REPUTATION_ASC
    SESSION_VALIDATORS_SUM_REPUTATION_DESC
    SESSION_VALIDATORS_SUM_SESSION_ID_ASC
    SESSION_VALIDATORS_SUM_SESSION_ID_DESC
    SESSION_VALIDATORS_SUM_UPTIME_ASC
    SESSION_VALIDATORS_SUM_UPTIME_DESC
    SESSION_VALIDATORS_SUM_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_SUM_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_BEST_ORDER_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_BEST_ORDER_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_ID_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_ID_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_BEST_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_BEST_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_NEXT_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_IS_NEXT_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_REPUTATION_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_REPUTATION_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_SESSION_ID_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_SESSION_ID_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_UPTIME_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_UPTIME_DESC
    SESSION_VALIDATORS_VARIANCE_POPULATION_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_VARIANCE_POPULATION_VALIDATOR_ID_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_BEST_ORDER_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_BEST_ORDER_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_ID_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_ID_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_BEST_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_BEST_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_NEXT_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_NEXT_BEST_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_NEXT_BEST_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_IS_NEXT_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_NEXT_BEST_ORDER_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_NEXT_BEST_ORDER_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_REPUTATION_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_REPUTATION_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_SESSION_ID_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_SESSION_ID_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_UPTIME_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_UPTIME_DESC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_VALIDATOR_ID_ASC
    SESSION_VALIDATORS_VARIANCE_SAMPLE_VALIDATOR_ID_DESC
}

"A floating point number that requires more precision than IEEE 754 binary 64"
scalar BigFloat

"""

A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"A location in a connection that can be used for resuming pagination."
scalar Cursor

"The day, does not include a time."
scalar Date

"""

A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A filter to be used against `Account` object types. All fields are combined with a logical ‘and.’"
input AccountFilter {
    "Checks for all expressions in this list."
    and: [AccountFilter!]
    "Filter by the object’s `countryCodeId` field."
    countryCodeId: StringFilter
    "Filter by the object’s `createAtBlockId` field."
    createAtBlockId: StringFilter
    "Filter by the object’s `createdAt` field."
    createdAt: StringFilter
    "Filter by the object’s `creatorId` field."
    creatorId: StringFilter
    "Filter by the object’s `display` field."
    display: StringFilter
    "Filter by the object’s `email` field."
    email: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `image` field."
    image: StringFilter
    "Filter by the object’s `legal` field."
    legal: StringFilter
    "Negates the expression."
    not: AccountFilter
    "Checks for any expressions in this list."
    or: [AccountFilter!]
    "Filter by the object’s `pgpFingerprint` field."
    pgpFingerprint: StringFilter
    "Filter by the object’s `riot` field."
    riot: StringFilter
    "Filter by the object’s `twitter` field."
    twitter: StringFilter
    "Filter by the object’s `web` field."
    web: StringFilter
}

"Conditions for `Account` aggregates."
input AccountsHavingInput {
    AND: [AccountsHavingInput!]
    OR: [AccountsHavingInput!]
}

"A filter to be used against AppEnum155D64Ff70 fields. All fields are combined with a logical ‘and.’"
input AppEnum155D64Ff70Filter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: AppEnum155D64Ff70
    "Equal to the specified value."
    equalTo: AppEnum155D64Ff70
    "Greater than the specified value."
    greaterThan: AppEnum155D64Ff70
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: AppEnum155D64Ff70
    "Included in the specified list."
    in: [AppEnum155D64Ff70!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: AppEnum155D64Ff70
    "Less than or equal to the specified value."
    lessThanOrEqualTo: AppEnum155D64Ff70
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: AppEnum155D64Ff70
    "Not equal to the specified value."
    notEqualTo: AppEnum155D64Ff70
    "Not included in the specified list."
    notIn: [AppEnum155D64Ff70!]
}

"A filter to be used against AppEnum790A3Fe4Ce fields. All fields are combined with a logical ‘and.’"
input AppEnum790A3Fe4CeFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: AppEnum790A3Fe4Ce
    "Equal to the specified value."
    equalTo: AppEnum790A3Fe4Ce
    "Greater than the specified value."
    greaterThan: AppEnum790A3Fe4Ce
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: AppEnum790A3Fe4Ce
    "Included in the specified list."
    in: [AppEnum790A3Fe4Ce!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: AppEnum790A3Fe4Ce
    "Less than or equal to the specified value."
    lessThanOrEqualTo: AppEnum790A3Fe4Ce
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: AppEnum790A3Fe4Ce
    "Not equal to the specified value."
    notEqualTo: AppEnum790A3Fe4Ce
    "Not included in the specified list."
    notIn: [AppEnum790A3Fe4Ce!]
}

"A filter to be used against AppEnumB6165934C8 fields. All fields are combined with a logical ‘and.’"
input AppEnumB6165934C8Filter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: AppEnumB6165934C8
    "Equal to the specified value."
    equalTo: AppEnumB6165934C8
    "Greater than the specified value."
    greaterThan: AppEnumB6165934C8
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: AppEnumB6165934C8
    "Included in the specified list."
    in: [AppEnumB6165934C8!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: AppEnumB6165934C8
    "Less than or equal to the specified value."
    lessThanOrEqualTo: AppEnumB6165934C8
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: AppEnumB6165934C8
    "Not equal to the specified value."
    notEqualTo: AppEnumB6165934C8
    "Not included in the specified list."
    notIn: [AppEnumB6165934C8!]
}

"A filter to be used against AppEnumFe385C7221 fields. All fields are combined with a logical ‘and.’"
input AppEnumFe385C7221Filter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: AppEnumFe385C7221
    "Equal to the specified value."
    equalTo: AppEnumFe385C7221
    "Greater than the specified value."
    greaterThan: AppEnumFe385C7221
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: AppEnumFe385C7221
    "Included in the specified list."
    in: [AppEnumFe385C7221!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: AppEnumFe385C7221
    "Less than or equal to the specified value."
    lessThanOrEqualTo: AppEnumFe385C7221
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: AppEnumFe385C7221
    "Not equal to the specified value."
    notEqualTo: AppEnumFe385C7221
    "Not included in the specified list."
    notIn: [AppEnumFe385C7221!]
}

"Conditions for `Authority` aggregates."
input AuthoritiesHavingInput {
    AND: [AuthoritiesHavingInput!]
    OR: [AuthoritiesHavingInput!]
}

"A filter to be used against `Authority` object types. All fields are combined with a logical ‘and.’"
input AuthorityFilter {
    "Checks for all expressions in this list."
    and: [AuthorityFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `current` field."
    current: JSONFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `next` field."
    next: JSONFilter
    "Negates the expression."
    not: AuthorityFilter
    "Checks for any expressions in this list."
    or: [AuthorityFilter!]
}

"A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’"
input BigFloatFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: BigFloat
    "Equal to the specified value."
    equalTo: BigFloat
    "Greater than the specified value."
    greaterThan: BigFloat
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: BigFloat
    "Included in the specified list."
    in: [BigFloat!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: BigFloat
    "Less than or equal to the specified value."
    lessThanOrEqualTo: BigFloat
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: BigFloat
    "Not equal to the specified value."
    notEqualTo: BigFloat
    "Not included in the specified list."
    notIn: [BigFloat!]
}

"A filter to be used against `Block` object types. All fields are combined with a logical ‘and.’"
input BlockFilter {
    "Checks for all expressions in this list."
    and: [BlockFilter!]
    "Filter by the object’s `extrinsicsRoot` field."
    extrinsicsRoot: StringFilter
    "Filter by the object’s `hash` field."
    hash: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: BlockFilter
    "Filter by the object’s `number` field."
    number: BigFloatFilter
    "Checks for any expressions in this list."
    or: [BlockFilter!]
    "Filter by the object’s `parentHash` field."
    parentHash: StringFilter
    "Filter by the object’s `specVersion` field."
    specVersion: StringFilter
    "Filter by the object’s `stateRoot` field."
    stateRoot: StringFilter
    "Filter by the object’s `timestamp` field."
    timestamp: DatetimeFilter
}

input BlocksHavingAverageInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingDistinctCountInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

"Conditions for `Block` aggregates."
input BlocksHavingInput {
    AND: [BlocksHavingInput!]
    OR: [BlocksHavingInput!]
    average: BlocksHavingAverageInput
    distinctCount: BlocksHavingDistinctCountInput
    max: BlocksHavingMaxInput
    min: BlocksHavingMinInput
    stddevPopulation: BlocksHavingStddevPopulationInput
    stddevSample: BlocksHavingStddevSampleInput
    sum: BlocksHavingSumInput
    variancePopulation: BlocksHavingVariancePopulationInput
    varianceSample: BlocksHavingVarianceSampleInput
}

input BlocksHavingMaxInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingMinInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingStddevPopulationInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingStddevSampleInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingSumInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingVariancePopulationInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingVarianceSampleInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

"A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’"
input BooleanFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: Boolean
    "Equal to the specified value."
    equalTo: Boolean
    "Greater than the specified value."
    greaterThan: Boolean
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: Boolean
    "Included in the specified list."
    in: [Boolean!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: Boolean
    "Less than or equal to the specified value."
    lessThanOrEqualTo: Boolean
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: Boolean
    "Not equal to the specified value."
    notEqualTo: Boolean
    "Not included in the specified list."
    notIn: [Boolean!]
}

"A filter to be used against `CountryCode` object types. All fields are combined with a logical ‘and.’"
input CountryCodeFilter {
    "Checks for all expressions in this list."
    and: [CountryCodeFilter!]
    "Filter by the object’s `code` field."
    code: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: CountryCodeFilter
    "Checks for any expressions in this list."
    or: [CountryCodeFilter!]
}

"Conditions for `CountryCode` aggregates."
input CountryCodesHavingInput {
    AND: [CountryCodesHavingInput!]
    OR: [CountryCodesHavingInput!]
}

"A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’"
input DatetimeFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: Datetime
    "Equal to the specified value."
    equalTo: Datetime
    "Greater than the specified value."
    greaterThan: Datetime
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: Datetime
    "Included in the specified list."
    in: [Datetime!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: Datetime
    "Less than or equal to the specified value."
    lessThanOrEqualTo: Datetime
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: Datetime
    "Not equal to the specified value."
    notEqualTo: Datetime
    "Not included in the specified list."
    notIn: [Datetime!]
}

"A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’"
input EventFilter {
    "Checks for all expressions in this list."
    and: [EventFilter!]
    "Filter by the object’s `arguments` field."
    arguments: StringFilter
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: BigFloatFilter
    "Filter by the object’s `data` field."
    data: StringFilter
    "Filter by the object’s `docs` field."
    docs: StringFilter
    "Filter by the object’s `extrinsicId` field."
    extrinsicId: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `index` field."
    index: IntFilter
    "Filter by the object’s `method` field."
    method: StringFilter
    "Filter by the object’s `module` field."
    module: StringFilter
    "Negates the expression."
    not: EventFilter
    "Checks for any expressions in this list."
    or: [EventFilter!]
    "Filter by the object’s `timestamp` field."
    timestamp: DatetimeFilter
}

input EventsHavingAverageInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingDistinctCountInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

"Conditions for `Event` aggregates."
input EventsHavingInput {
    AND: [EventsHavingInput!]
    OR: [EventsHavingInput!]
    average: EventsHavingAverageInput
    distinctCount: EventsHavingDistinctCountInput
    max: EventsHavingMaxInput
    min: EventsHavingMinInput
    stddevPopulation: EventsHavingStddevPopulationInput
    stddevSample: EventsHavingStddevSampleInput
    sum: EventsHavingSumInput
    variancePopulation: EventsHavingVariancePopulationInput
    varianceSample: EventsHavingVarianceSampleInput
}

input EventsHavingMaxInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingMinInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingStddevPopulationInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingStddevSampleInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingSumInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingVariancePopulationInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingVarianceSampleInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

"A filter to be used against `Extrinsic` object types. All fields are combined with a logical ‘and.’"
input ExtrinsicFilter {
    "Checks for all expressions in this list."
    and: [ExtrinsicFilter!]
    "Filter by the object’s `arguments` field."
    arguments: StringFilter
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: BigFloatFilter
    "Filter by the object’s `hash` field."
    hash: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `index` field."
    index: IntFilter
    "Filter by the object’s `isSigned` field."
    isSigned: BooleanFilter
    "Filter by the object’s `isSuccess` field."
    isSuccess: BooleanFilter
    "Filter by the object’s `method` field."
    method: StringFilter
    "Filter by the object’s `module` field."
    module: StringFilter
    "Negates the expression."
    not: ExtrinsicFilter
    "Checks for any expressions in this list."
    or: [ExtrinsicFilter!]
    "Filter by the object’s `signerId` field."
    signerId: StringFilter
}

input ExtrinsicsHavingAverageInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingDistinctCountInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

"Conditions for `Extrinsic` aggregates."
input ExtrinsicsHavingInput {
    AND: [ExtrinsicsHavingInput!]
    OR: [ExtrinsicsHavingInput!]
    average: ExtrinsicsHavingAverageInput
    distinctCount: ExtrinsicsHavingDistinctCountInput
    max: ExtrinsicsHavingMaxInput
    min: ExtrinsicsHavingMinInput
    stddevPopulation: ExtrinsicsHavingStddevPopulationInput
    stddevSample: ExtrinsicsHavingStddevSampleInput
    sum: ExtrinsicsHavingSumInput
    variancePopulation: ExtrinsicsHavingVariancePopulationInput
    varianceSample: ExtrinsicsHavingVarianceSampleInput
}

input ExtrinsicsHavingMaxInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingMinInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingStddevPopulationInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingStddevSampleInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingSumInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingVariancePopulationInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingVarianceSampleInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input HavingBigfloatFilter {
    equalTo: BigFloat
    greaterThan: BigFloat
    greaterThanOrEqualTo: BigFloat
    lessThan: BigFloat
    lessThanOrEqualTo: BigFloat
    notEqualTo: BigFloat
}

input HavingDatetimeFilter {
    equalTo: Datetime
    greaterThan: Datetime
    greaterThanOrEqualTo: Datetime
    lessThan: Datetime
    lessThanOrEqualTo: Datetime
    notEqualTo: Datetime
}

input HavingIntFilter {
    equalTo: Int
    greaterThan: Int
    greaterThanOrEqualTo: Int
    lessThan: Int
    lessThanOrEqualTo: Int
    notEqualTo: Int
}

"A filter to be used against `HeartBeat` object types. All fields are combined with a logical ‘and.’"
input HeartBeatFilter {
    "Filter by the object’s `accountId` field."
    accountId: StringFilter
    "Checks for all expressions in this list."
    and: [HeartBeatFilter!]
    "Filter by the object’s `blockNumber` field."
    blockNumber: BigFloatFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: HeartBeatFilter
    "Checks for any expressions in this list."
    or: [HeartBeatFilter!]
    "Filter by the object’s `sessionId` field."
    sessionId: StringFilter
}

input HeartBeatsHavingAverageInput {
    blockNumber: HavingBigfloatFilter
}

input HeartBeatsHavingDistinctCountInput {
    blockNumber: HavingBigfloatFilter
}

"Conditions for `HeartBeat` aggregates."
input HeartBeatsHavingInput {
    AND: [HeartBeatsHavingInput!]
    OR: [HeartBeatsHavingInput!]
    average: HeartBeatsHavingAverageInput
    distinctCount: HeartBeatsHavingDistinctCountInput
    max: HeartBeatsHavingMaxInput
    min: HeartBeatsHavingMinInput
    stddevPopulation: HeartBeatsHavingStddevPopulationInput
    stddevSample: HeartBeatsHavingStddevSampleInput
    sum: HeartBeatsHavingSumInput
    variancePopulation: HeartBeatsHavingVariancePopulationInput
    varianceSample: HeartBeatsHavingVarianceSampleInput
}

input HeartBeatsHavingMaxInput {
    blockNumber: HavingBigfloatFilter
}

input HeartBeatsHavingMinInput {
    blockNumber: HavingBigfloatFilter
}

input HeartBeatsHavingStddevPopulationInput {
    blockNumber: HavingBigfloatFilter
}

input HeartBeatsHavingStddevSampleInput {
    blockNumber: HavingBigfloatFilter
}

input HeartBeatsHavingSumInput {
    blockNumber: HavingBigfloatFilter
}

input HeartBeatsHavingVariancePopulationInput {
    blockNumber: HavingBigfloatFilter
}

input HeartBeatsHavingVarianceSampleInput {
    blockNumber: HavingBigfloatFilter
}

"A filter to be used against Int fields. All fields are combined with a logical ‘and.’"
input IntFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: Int
    "Equal to the specified value."
    equalTo: Int
    "Greater than the specified value."
    greaterThan: Int
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: Int
    "Included in the specified list."
    in: [Int!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: Int
    "Less than or equal to the specified value."
    lessThanOrEqualTo: Int
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: Int
    "Not equal to the specified value."
    notEqualTo: Int
    "Not included in the specified list."
    notIn: [Int!]
}

"A filter to be used against JSON fields. All fields are combined with a logical ‘and.’"
input JSONFilter {
    "Contained by the specified JSON."
    containedBy: JSON
    "Contains the specified JSON."
    contains: JSON
    "Contains all of the specified keys."
    containsAllKeys: [String!]
    "Contains any of the specified keys."
    containsAnyKeys: [String!]
    "Contains the specified key."
    containsKey: String
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: JSON
    "Equal to the specified value."
    equalTo: JSON
    "Greater than the specified value."
    greaterThan: JSON
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: JSON
    "Included in the specified list."
    in: [JSON!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: JSON
    "Less than or equal to the specified value."
    lessThanOrEqualTo: JSON
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: JSON
    "Not equal to the specified value."
    notEqualTo: JSON
    "Not included in the specified list."
    notIn: [JSON!]
}

"A filter to be used against `KeygenThreshold` object types. All fields are combined with a logical ‘and.’"
input KeygenThresholdFilter {
    "Checks for all expressions in this list."
    and: [KeygenThresholdFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `current` field."
    current: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `next` field."
    next: IntFilter
    "Negates the expression."
    not: KeygenThresholdFilter
    "Checks for any expressions in this list."
    or: [KeygenThresholdFilter!]
    "Filter by the object’s `pending` field."
    pending: IntFilter
}

input KeygenThresholdsHavingAverageInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingDistinctCountInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"Conditions for `KeygenThreshold` aggregates."
input KeygenThresholdsHavingInput {
    AND: [KeygenThresholdsHavingInput!]
    OR: [KeygenThresholdsHavingInput!]
    average: KeygenThresholdsHavingAverageInput
    distinctCount: KeygenThresholdsHavingDistinctCountInput
    max: KeygenThresholdsHavingMaxInput
    min: KeygenThresholdsHavingMinInput
    stddevPopulation: KeygenThresholdsHavingStddevPopulationInput
    stddevSample: KeygenThresholdsHavingStddevSampleInput
    sum: KeygenThresholdsHavingSumInput
    variancePopulation: KeygenThresholdsHavingVariancePopulationInput
    varianceSample: KeygenThresholdsHavingVarianceSampleInput
}

input KeygenThresholdsHavingMaxInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingMinInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingStddevPopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingStddevSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingSumInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingVariancePopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingVarianceSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"A filter to be used against `ProposalCounter` object types. All fields are combined with a logical ‘and.’"
input ProposalCounterFilter {
    "Checks for all expressions in this list."
    and: [ProposalCounterFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ProposalCounterFilter
    "Checks for any expressions in this list."
    or: [ProposalCounterFilter!]
    "Filter by the object’s `signedProposalsCount` field."
    signedProposalsCount: IntFilter
    "Filter by the object’s `signedProposalsMap` field."
    signedProposalsMap: JSONFilter
    "Filter by the object’s `statusMap` field."
    statusMap: JSONFilter
    "Filter by the object’s `unSignedProposalsCount` field."
    unSignedProposalsCount: IntFilter
    "Filter by the object’s `unSignedProposalsMap` field."
    unSignedProposalsMap: JSONFilter
}

input ProposalCountersHavingAverageInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingDistinctCountInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

"Conditions for `ProposalCounter` aggregates."
input ProposalCountersHavingInput {
    AND: [ProposalCountersHavingInput!]
    OR: [ProposalCountersHavingInput!]
    average: ProposalCountersHavingAverageInput
    distinctCount: ProposalCountersHavingDistinctCountInput
    max: ProposalCountersHavingMaxInput
    min: ProposalCountersHavingMinInput
    stddevPopulation: ProposalCountersHavingStddevPopulationInput
    stddevSample: ProposalCountersHavingStddevSampleInput
    sum: ProposalCountersHavingSumInput
    variancePopulation: ProposalCountersHavingVariancePopulationInput
    varianceSample: ProposalCountersHavingVarianceSampleInput
}

input ProposalCountersHavingMaxInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingMinInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingStddevSampleInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingSumInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

"A filter to be used against `ProposalItem` object types. All fields are combined with a logical ‘and.’"
input ProposalItemFilter {
    "Checks for all expressions in this list."
    and: [ProposalItemFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `chainId` field."
    chainId: BigFloatFilter
    "Filter by the object’s `data` field."
    data: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `nonce` field."
    nonce: IntFilter
    "Negates the expression."
    not: ProposalItemFilter
    "Checks for any expressions in this list."
    or: [ProposalItemFilter!]
    "Filter by the object’s `removed` field."
    removed: BooleanFilter
    "Filter by the object’s `signature` field."
    signature: StringFilter
    "Filter by the object’s `status` field."
    status: StringFilter
    "Filter by the object’s `type` field."
    type: AppEnumB6165934C8Filter
}

input ProposalItemsHavingAverageInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingDistinctCountInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

"Conditions for `ProposalItem` aggregates."
input ProposalItemsHavingInput {
    AND: [ProposalItemsHavingInput!]
    OR: [ProposalItemsHavingInput!]
    average: ProposalItemsHavingAverageInput
    distinctCount: ProposalItemsHavingDistinctCountInput
    max: ProposalItemsHavingMaxInput
    min: ProposalItemsHavingMinInput
    stddevPopulation: ProposalItemsHavingStddevPopulationInput
    stddevSample: ProposalItemsHavingStddevSampleInput
    sum: ProposalItemsHavingSumInput
    variancePopulation: ProposalItemsHavingVariancePopulationInput
    varianceSample: ProposalItemsHavingVarianceSampleInput
}

input ProposalItemsHavingMaxInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingMinInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingStddevSampleInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingSumInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
    chainId: HavingBigfloatFilter
    nonce: HavingIntFilter
}

"A filter to be used against `ProposalTimelineStatus` object types. All fields are combined with a logical ‘and.’"
input ProposalTimelineStatusFilter {
    "Checks for all expressions in this list."
    and: [ProposalTimelineStatusFilter!]
    "Filter by the object’s `blockNumber` field."
    blockNumber: BigFloatFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ProposalTimelineStatusFilter
    "Checks for any expressions in this list."
    or: [ProposalTimelineStatusFilter!]
    "Filter by the object’s `proposalItemId` field."
    proposalItemId: StringFilter
    "Filter by the object’s `status` field."
    status: AppEnum155D64Ff70Filter
    "Filter by the object’s `timestamp` field."
    timestamp: DatetimeFilter
    "Filter by the object’s `txHash` field."
    txHash: StringFilter
}

input ProposalTimelineStatusesHavingAverageInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input ProposalTimelineStatusesHavingDistinctCountInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

"Conditions for `ProposalTimelineStatus` aggregates."
input ProposalTimelineStatusesHavingInput {
    AND: [ProposalTimelineStatusesHavingInput!]
    OR: [ProposalTimelineStatusesHavingInput!]
    average: ProposalTimelineStatusesHavingAverageInput
    distinctCount: ProposalTimelineStatusesHavingDistinctCountInput
    max: ProposalTimelineStatusesHavingMaxInput
    min: ProposalTimelineStatusesHavingMinInput
    stddevPopulation: ProposalTimelineStatusesHavingStddevPopulationInput
    stddevSample: ProposalTimelineStatusesHavingStddevSampleInput
    sum: ProposalTimelineStatusesHavingSumInput
    variancePopulation: ProposalTimelineStatusesHavingVariancePopulationInput
    varianceSample: ProposalTimelineStatusesHavingVarianceSampleInput
}

input ProposalTimelineStatusesHavingMaxInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input ProposalTimelineStatusesHavingMinInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input ProposalTimelineStatusesHavingStddevPopulationInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input ProposalTimelineStatusesHavingStddevSampleInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input ProposalTimelineStatusesHavingSumInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input ProposalTimelineStatusesHavingVariancePopulationInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input ProposalTimelineStatusesHavingVarianceSampleInput {
    blockNumber: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

"A filter to be used against `ProposalVote` object types. All fields are combined with a logical ‘and.’"
input ProposalVoteFilter {
    "Checks for all expressions in this list."
    and: [ProposalVoteFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: BigFloatFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ProposalVoteFilter
    "Checks for any expressions in this list."
    or: [ProposalVoteFilter!]
    "Filter by the object’s `proposalId` field."
    proposalId: StringFilter
    "Filter by the object’s `voteStatus` field."
    voteStatus: AppEnumFe385C7221Filter
    "Filter by the object’s `voterId` field."
    voterId: StringFilter
}

input ProposalVotesHavingAverageInput {
    blockNumber: HavingBigfloatFilter
}

input ProposalVotesHavingDistinctCountInput {
    blockNumber: HavingBigfloatFilter
}

"Conditions for `ProposalVote` aggregates."
input ProposalVotesHavingInput {
    AND: [ProposalVotesHavingInput!]
    OR: [ProposalVotesHavingInput!]
    average: ProposalVotesHavingAverageInput
    distinctCount: ProposalVotesHavingDistinctCountInput
    max: ProposalVotesHavingMaxInput
    min: ProposalVotesHavingMinInput
    stddevPopulation: ProposalVotesHavingStddevPopulationInput
    stddevSample: ProposalVotesHavingStddevSampleInput
    sum: ProposalVotesHavingSumInput
    variancePopulation: ProposalVotesHavingVariancePopulationInput
    varianceSample: ProposalVotesHavingVarianceSampleInput
}

input ProposalVotesHavingMaxInput {
    blockNumber: HavingBigfloatFilter
}

input ProposalVotesHavingMinInput {
    blockNumber: HavingBigfloatFilter
}

input ProposalVotesHavingStddevPopulationInput {
    blockNumber: HavingBigfloatFilter
}

input ProposalVotesHavingStddevSampleInput {
    blockNumber: HavingBigfloatFilter
}

input ProposalVotesHavingSumInput {
    blockNumber: HavingBigfloatFilter
}

input ProposalVotesHavingVariancePopulationInput {
    blockNumber: HavingBigfloatFilter
}

input ProposalVotesHavingVarianceSampleInput {
    blockNumber: HavingBigfloatFilter
}

"A filter to be used against `Proposer` object types. All fields are combined with a logical ‘and.’"
input ProposerFilter {
    "Filter by the object’s `accountId` field."
    accountId: StringFilter
    "Checks for all expressions in this list."
    and: [ProposerFilter!]
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ProposerFilter
    "Checks for any expressions in this list."
    or: [ProposerFilter!]
}

"A filter to be used against `ProposerThreshold` object types. All fields are combined with a logical ‘and.’"
input ProposerThresholdFilter {
    "Checks for all expressions in this list."
    and: [ProposerThresholdFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ProposerThresholdFilter
    "Checks for any expressions in this list."
    or: [ProposerThresholdFilter!]
    "Filter by the object’s `value` field."
    value: IntFilter
}

input ProposerThresholdsHavingAverageInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingDistinctCountInput {
    value: HavingIntFilter
}

"Conditions for `ProposerThreshold` aggregates."
input ProposerThresholdsHavingInput {
    AND: [ProposerThresholdsHavingInput!]
    OR: [ProposerThresholdsHavingInput!]
    average: ProposerThresholdsHavingAverageInput
    distinctCount: ProposerThresholdsHavingDistinctCountInput
    max: ProposerThresholdsHavingMaxInput
    min: ProposerThresholdsHavingMinInput
    stddevPopulation: ProposerThresholdsHavingStddevPopulationInput
    stddevSample: ProposerThresholdsHavingStddevSampleInput
    sum: ProposerThresholdsHavingSumInput
    variancePopulation: ProposerThresholdsHavingVariancePopulationInput
    varianceSample: ProposerThresholdsHavingVarianceSampleInput
}

input ProposerThresholdsHavingMaxInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingMinInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingStddevPopulationInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingStddevSampleInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingSumInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingVariancePopulationInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingVarianceSampleInput {
    value: HavingIntFilter
}

"Conditions for `Proposer` aggregates."
input ProposersHavingInput {
    AND: [ProposersHavingInput!]
    OR: [ProposersHavingInput!]
}

"A filter to be used against `PublicKey` object types. All fields are combined with a logical ‘and.’"
input PublicKeyFilter {
    "Checks for all expressions in this list."
    and: [PublicKeyFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `compressed` field."
    compressed: StringFilter
    "Filter by the object’s `history` field."
    history: JSONFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: PublicKeyFilter
    "Checks for any expressions in this list."
    or: [PublicKeyFilter!]
    "Filter by the object’s `uncompressed` field."
    uncompressed: StringFilter
}

"Conditions for `PublicKey` aggregates."
input PublicKeysHavingInput {
    AND: [PublicKeysHavingInput!]
    OR: [PublicKeysHavingInput!]
}

"A filter to be used against `Session` object types. All fields are combined with a logical ‘and.’"
input SessionFilter {
    "Checks for all expressions in this list."
    and: [SessionFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: SessionFilter
    "Checks for any expressions in this list."
    or: [SessionFilter!]
    "Filter by the object’s `publicKeyId` field."
    publicKeyId: StringFilter
}

"A filter to be used against `SessionProposer` object types. All fields are combined with a logical ‘and.’"
input SessionProposerFilter {
    "Checks for all expressions in this list."
    and: [SessionProposerFilter!]
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: SessionProposerFilter
    "Checks for any expressions in this list."
    or: [SessionProposerFilter!]
    "Filter by the object’s `proposerId` field."
    proposerId: StringFilter
    "Filter by the object’s `sessionId` field."
    sessionId: StringFilter
}

"Conditions for `SessionProposer` aggregates."
input SessionProposersHavingInput {
    AND: [SessionProposersHavingInput!]
    OR: [SessionProposersHavingInput!]
}

"A filter to be used against `SessionValidator` object types. All fields are combined with a logical ‘and.’"
input SessionValidatorFilter {
    "Checks for all expressions in this list."
    and: [SessionValidatorFilter!]
    "Filter by the object’s `bestOrder` field."
    bestOrder: IntFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: BigFloatFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `isBest` field."
    isBest: BooleanFilter
    "Filter by the object’s `isNext` field."
    isNext: BooleanFilter
    "Filter by the object’s `isNextBest` field."
    isNextBest: BooleanFilter
    "Filter by the object’s `nextBestOrder` field."
    nextBestOrder: IntFilter
    "Negates the expression."
    not: SessionValidatorFilter
    "Checks for any expressions in this list."
    or: [SessionValidatorFilter!]
    "Filter by the object’s `reputation` field."
    reputation: IntFilter
    "Filter by the object’s `sessionId` field."
    sessionId: StringFilter
    "Filter by the object’s `uptime` field."
    uptime: IntFilter
    "Filter by the object’s `validatorId` field."
    validatorId: StringFilter
}

input SessionValidatorsHavingAverageInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

input SessionValidatorsHavingDistinctCountInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

"Conditions for `SessionValidator` aggregates."
input SessionValidatorsHavingInput {
    AND: [SessionValidatorsHavingInput!]
    OR: [SessionValidatorsHavingInput!]
    average: SessionValidatorsHavingAverageInput
    distinctCount: SessionValidatorsHavingDistinctCountInput
    max: SessionValidatorsHavingMaxInput
    min: SessionValidatorsHavingMinInput
    stddevPopulation: SessionValidatorsHavingStddevPopulationInput
    stddevSample: SessionValidatorsHavingStddevSampleInput
    sum: SessionValidatorsHavingSumInput
    variancePopulation: SessionValidatorsHavingVariancePopulationInput
    varianceSample: SessionValidatorsHavingVarianceSampleInput
}

input SessionValidatorsHavingMaxInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

input SessionValidatorsHavingMinInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

input SessionValidatorsHavingStddevPopulationInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

input SessionValidatorsHavingStddevSampleInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

input SessionValidatorsHavingSumInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

input SessionValidatorsHavingVariancePopulationInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

input SessionValidatorsHavingVarianceSampleInput {
    bestOrder: HavingIntFilter
    blockNumber: HavingBigfloatFilter
    nextBestOrder: HavingIntFilter
    reputation: HavingIntFilter
    uptime: HavingIntFilter
}

input SessionsHavingAverageInput {
    blockNumber: HavingIntFilter
}

input SessionsHavingDistinctCountInput {
    blockNumber: HavingIntFilter
}

"Conditions for `Session` aggregates."
input SessionsHavingInput {
    AND: [SessionsHavingInput!]
    OR: [SessionsHavingInput!]
    average: SessionsHavingAverageInput
    distinctCount: SessionsHavingDistinctCountInput
    max: SessionsHavingMaxInput
    min: SessionsHavingMinInput
    stddevPopulation: SessionsHavingStddevPopulationInput
    stddevSample: SessionsHavingStddevSampleInput
    sum: SessionsHavingSumInput
    variancePopulation: SessionsHavingVariancePopulationInput
    varianceSample: SessionsHavingVarianceSampleInput
}

input SessionsHavingMaxInput {
    blockNumber: HavingIntFilter
}

input SessionsHavingMinInput {
    blockNumber: HavingIntFilter
}

input SessionsHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
}

input SessionsHavingStddevSampleInput {
    blockNumber: HavingIntFilter
}

input SessionsHavingSumInput {
    blockNumber: HavingIntFilter
}

input SessionsHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
}

input SessionsHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
}

"A filter to be used against `SignatureThreshold` object types. All fields are combined with a logical ‘and.’"
input SignatureThresholdFilter {
    "Checks for all expressions in this list."
    and: [SignatureThresholdFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `current` field."
    current: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `next` field."
    next: IntFilter
    "Negates the expression."
    not: SignatureThresholdFilter
    "Checks for any expressions in this list."
    or: [SignatureThresholdFilter!]
    "Filter by the object’s `pending` field."
    pending: IntFilter
}

input SignatureThresholdsHavingAverageInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingDistinctCountInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"Conditions for `SignatureThreshold` aggregates."
input SignatureThresholdsHavingInput {
    AND: [SignatureThresholdsHavingInput!]
    OR: [SignatureThresholdsHavingInput!]
    average: SignatureThresholdsHavingAverageInput
    distinctCount: SignatureThresholdsHavingDistinctCountInput
    max: SignatureThresholdsHavingMaxInput
    min: SignatureThresholdsHavingMinInput
    stddevPopulation: SignatureThresholdsHavingStddevPopulationInput
    stddevSample: SignatureThresholdsHavingStddevSampleInput
    sum: SignatureThresholdsHavingSumInput
    variancePopulation: SignatureThresholdsHavingVariancePopulationInput
    varianceSample: SignatureThresholdsHavingVarianceSampleInput
}

input SignatureThresholdsHavingMaxInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingMinInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingStddevPopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingStddevSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingSumInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingVariancePopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingVarianceSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"A filter to be used against String fields. All fields are combined with a logical ‘and.’"
input StringFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: String
    "Not equal to the specified value, treating null like an ordinary value (case-insensitive)."
    distinctFromInsensitive: String
    "Ends with the specified string (case-sensitive)."
    endsWith: String
    "Ends with the specified string (case-insensitive)."
    endsWithInsensitive: String
    "Equal to the specified value."
    equalTo: String
    "Equal to the specified value (case-insensitive)."
    equalToInsensitive: String
    "Greater than the specified value."
    greaterThan: String
    "Greater than the specified value (case-insensitive)."
    greaterThanInsensitive: String
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: String
    "Greater than or equal to the specified value (case-insensitive)."
    greaterThanOrEqualToInsensitive: String
    "Included in the specified list."
    in: [String!]
    "Included in the specified list (case-insensitive)."
    inInsensitive: [String!]
    "Contains the specified string (case-sensitive)."
    includes: String
    "Contains the specified string (case-insensitive)."
    includesInsensitive: String
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: String
    "Less than the specified value (case-insensitive)."
    lessThanInsensitive: String
    "Less than or equal to the specified value."
    lessThanOrEqualTo: String
    "Less than or equal to the specified value (case-insensitive)."
    lessThanOrEqualToInsensitive: String
    "Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."
    like: String
    "Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."
    likeInsensitive: String
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: String
    "Equal to the specified value, treating null like an ordinary value (case-insensitive)."
    notDistinctFromInsensitive: String
    "Does not end with the specified string (case-sensitive)."
    notEndsWith: String
    "Does not end with the specified string (case-insensitive)."
    notEndsWithInsensitive: String
    "Not equal to the specified value."
    notEqualTo: String
    "Not equal to the specified value (case-insensitive)."
    notEqualToInsensitive: String
    "Not included in the specified list."
    notIn: [String!]
    "Not included in the specified list (case-insensitive)."
    notInInsensitive: [String!]
    "Does not contain the specified string (case-sensitive)."
    notIncludes: String
    "Does not contain the specified string (case-insensitive)."
    notIncludesInsensitive: String
    "Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."
    notLike: String
    "Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."
    notLikeInsensitive: String
    "Does not start with the specified string (case-sensitive)."
    notStartsWith: String
    "Does not start with the specified string (case-insensitive)."
    notStartsWithInsensitive: String
    "Starts with the specified string (case-sensitive)."
    startsWith: String
    "Starts with the specified string (case-insensitive)."
    startsWithInsensitive: String
}

"A filter to be used against `Threshold` object types. All fields are combined with a logical ‘and.’"
input ThresholdFilter {
    "Checks for all expressions in this list."
    and: [ThresholdFilter!]
    "Filter by the object’s `current` field."
    current: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `next` field."
    next: IntFilter
    "Negates the expression."
    not: ThresholdFilter
    "Checks for any expressions in this list."
    or: [ThresholdFilter!]
    "Filter by the object’s `pending` field."
    pending: IntFilter
    "Filter by the object’s `sessionId` field."
    sessionId: StringFilter
    "Filter by the object’s `variant` field."
    variant: AppEnum790A3Fe4CeFilter
}

input ThresholdsHavingAverageInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input ThresholdsHavingDistinctCountInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"Conditions for `Threshold` aggregates."
input ThresholdsHavingInput {
    AND: [ThresholdsHavingInput!]
    OR: [ThresholdsHavingInput!]
    average: ThresholdsHavingAverageInput
    distinctCount: ThresholdsHavingDistinctCountInput
    max: ThresholdsHavingMaxInput
    min: ThresholdsHavingMinInput
    stddevPopulation: ThresholdsHavingStddevPopulationInput
    stddevSample: ThresholdsHavingStddevSampleInput
    sum: ThresholdsHavingSumInput
    variancePopulation: ThresholdsHavingVariancePopulationInput
    varianceSample: ThresholdsHavingVarianceSampleInput
}

input ThresholdsHavingMaxInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input ThresholdsHavingMinInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input ThresholdsHavingStddevPopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input ThresholdsHavingStddevSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input ThresholdsHavingSumInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input ThresholdsHavingVariancePopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input ThresholdsHavingVarianceSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"A filter to be used against `UnsignedProposalsQueue` object types. All fields are combined with a logical ‘and.’"
input UnsignedProposalsQueueFilter {
    "Checks for all expressions in this list."
    and: [UnsignedProposalsQueueFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: UnsignedProposalsQueueFilter
    "Checks for any expressions in this list."
    or: [UnsignedProposalsQueueFilter!]
}

"A filter to be used against `UnsignedProposalsQueueItem` object types. All fields are combined with a logical ‘and.’"
input UnsignedProposalsQueueItemFilter {
    "Checks for all expressions in this list."
    and: [UnsignedProposalsQueueItemFilter!]
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: UnsignedProposalsQueueItemFilter
    "Checks for any expressions in this list."
    or: [UnsignedProposalsQueueItemFilter!]
    "Filter by the object’s `proposalId` field."
    proposalId: StringFilter
    "Filter by the object’s `queueId` field."
    queueId: StringFilter
}

input UnsignedProposalsQueueItemsHavingAverageInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingDistinctCountInput {
    blockNumber: HavingIntFilter
}

"Conditions for `UnsignedProposalsQueueItem` aggregates."
input UnsignedProposalsQueueItemsHavingInput {
    AND: [UnsignedProposalsQueueItemsHavingInput!]
    OR: [UnsignedProposalsQueueItemsHavingInput!]
    average: UnsignedProposalsQueueItemsHavingAverageInput
    distinctCount: UnsignedProposalsQueueItemsHavingDistinctCountInput
    max: UnsignedProposalsQueueItemsHavingMaxInput
    min: UnsignedProposalsQueueItemsHavingMinInput
    stddevPopulation: UnsignedProposalsQueueItemsHavingStddevPopulationInput
    stddevSample: UnsignedProposalsQueueItemsHavingStddevSampleInput
    sum: UnsignedProposalsQueueItemsHavingSumInput
    variancePopulation: UnsignedProposalsQueueItemsHavingVariancePopulationInput
    varianceSample: UnsignedProposalsQueueItemsHavingVarianceSampleInput
}

input UnsignedProposalsQueueItemsHavingMaxInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingMinInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingStddevSampleInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingSumInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingAverageInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingDistinctCountInput {
    blockNumber: HavingIntFilter
}

"Conditions for `UnsignedProposalsQueue` aggregates."
input UnsignedProposalsQueuesHavingInput {
    AND: [UnsignedProposalsQueuesHavingInput!]
    OR: [UnsignedProposalsQueuesHavingInput!]
    average: UnsignedProposalsQueuesHavingAverageInput
    distinctCount: UnsignedProposalsQueuesHavingDistinctCountInput
    max: UnsignedProposalsQueuesHavingMaxInput
    min: UnsignedProposalsQueuesHavingMinInput
    stddevPopulation: UnsignedProposalsQueuesHavingStddevPopulationInput
    stddevSample: UnsignedProposalsQueuesHavingStddevSampleInput
    sum: UnsignedProposalsQueuesHavingSumInput
    variancePopulation: UnsignedProposalsQueuesHavingVariancePopulationInput
    varianceSample: UnsignedProposalsQueuesHavingVarianceSampleInput
}

input UnsignedProposalsQueuesHavingMaxInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingMinInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingStddevSampleInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingSumInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
}

"A filter to be used against `Validator` object types. All fields are combined with a logical ‘and.’"
input ValidatorFilter {
    "Filter by the object’s `accountId` field."
    accountId: StringFilter
    "Checks for all expressions in this list."
    and: [ValidatorFilter!]
    "Filter by the object’s `authorityId` field."
    authorityId: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ValidatorFilter
    "Checks for any expressions in this list."
    or: [ValidatorFilter!]
}

"Conditions for `Validator` aggregates."
input ValidatorsHavingInput {
    AND: [ValidatorsHavingInput!]
    OR: [ValidatorsHavingInput!]
}
