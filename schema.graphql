# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"An object with a globally unique `ID`."
interface Node {
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
}

type Account implements Node {
    "Reads and enables pagination through a set of `Account`."
    accountsByCreatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "Reads and enables pagination through a set of `Block`."
    blocksByAccountCreatorIdAndCreateAtBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountBlocksByAccountCreatorIdAndCreateAtBlockIdManyToManyConnection!
    "Reads and enables pagination through a set of `Block`."
    blocksByExtrinsicSignerIdAndBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyConnection!
    "Reads a single `Block` that is related to this `Account`."
    createAtBlock: Block
    createAtBlockId: String
    createdAt: String
    "Reads a single `Account` that is related to this `Account`."
    creator: Account
    creatorId: String
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
}

type AccountAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: AccountDistinctCountAggregates
    keys: [String!]
}

"A connection to a list of `Block` values, with data from `Account`."
type AccountBlocksByAccountCreatorIdAndCreateAtBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Account`, and the cursor to aid in pagination."
    edges: [AccountBlocksByAccountCreatorIdAndCreateAtBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Account`."
type AccountBlocksByAccountCreatorIdAndCreateAtBlockIdManyToManyEdge {
    "Reads and enables pagination through a set of `Account`."
    accountsByCreateAtBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
}

"A connection to a list of `Block` values, with data from `Extrinsic`."
type AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Extrinsic`, and the cursor to aid in pagination."
    edges: [AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Extrinsic`."
type AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection!
    "The `Block` at the end of the edge."
    node: Block
}

type AccountDistinctCountAggregates {
    "Distinct count of createAtBlockId across the matching connection"
    createAtBlockId: BigInt
    "Distinct count of createdAt across the matching connection"
    createdAt: BigInt
    "Distinct count of creatorId across the matching connection"
    creatorId: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
}

"A connection to a list of `Account` values."
type AccountsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AccountAggregates
    "A list of edges which contains the `Account` and cursor to aid in pagination."
    edges: [AccountsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Account` for these aggregates."
        groupBy: [AccountsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AccountsHavingInput
    ): [AccountAggregates!]
    "A list of `Account` objects."
    nodes: [Account]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Account` you could get from the connection."
    totalCount: Int!
}

"A `Account` edge in the connection."
type AccountsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Account` at the end of the edge."
    node: Account
}

"A connection to a list of `Authority` values."
type AuthoritiesConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AuthorityAggregates
    "A list of edges which contains the `Authority` and cursor to aid in pagination."
    edges: [AuthoritiesEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Authority` for these aggregates."
        groupBy: [AuthoritiesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AuthoritiesHavingInput
    ): [AuthorityAggregates!]
    "A list of `Authority` objects."
    nodes: [Authority]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Authority` you could get from the connection."
    totalCount: Int!
}

"A `Authority` edge in the connection."
type AuthoritiesEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Authority` at the end of the edge."
    node: Authority
}

type Authority implements Node {
    "Reads a single `Block` that is related to this `Authority`."
    block: Block
    blockId: String!
    current: JSON
    id: String!
    next: JSON
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
}

type AuthorityAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: AuthorityDistinctCountAggregates
    keys: [String!]
}

type AuthorityDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of current across the matching connection"
    current: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of next across the matching connection"
    next: BigInt
}

type Block implements Node {
    "Reads and enables pagination through a set of `Account`."
    accountsByAccountCreateAtBlockIdAndCreatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockAccountsByAccountCreateAtBlockIdAndCreatorIdManyToManyConnection!
    "Reads and enables pagination through a set of `Account`."
    accountsByCreateAtBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "Reads and enables pagination through a set of `Account`."
    accountsByExtrinsicBlockIdAndSignerId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyConnection!
    "Reads and enables pagination through a set of `Authority`."
    authorities(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AuthorityFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Authority`."
        orderBy: [AuthoritiesOrderBy!] = [PRIMARY_KEY_ASC]
    ): AuthoritiesConnection!
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection!
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection!
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsicsByEventBlockIdAndExtrinsicId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyConnection!
    extrinsicsRoot: String
    hash: String
    id: String!
    "Reads and enables pagination through a set of `KeygenThreshold`."
    keygenThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: KeygenThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `KeygenThreshold`."
        orderBy: [KeygenThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): KeygenThresholdsConnection!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    number: BigFloat!
    parentHash: String
    "Reads and enables pagination through a set of `ProposalCounter`."
    proposalCounters(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalCounterFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalCounter`."
        orderBy: [ProposalCountersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalCountersConnection!
    "Reads and enables pagination through a set of `ProposalItem`."
    proposalItems(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalItem`."
        orderBy: [ProposalItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalItemsConnection!
    "Reads and enables pagination through a set of `ProposerThreshold`."
    proposerThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposerThreshold`."
        orderBy: [ProposerThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposerThresholdsConnection!
    "Reads and enables pagination through a set of `Proposer`."
    proposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Proposer`."
        orderBy: [ProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposersConnection!
    "Reads and enables pagination through a set of `PublicKey`."
    publicKeys(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: PublicKeyFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `PublicKey`."
        orderBy: [PublicKeysOrderBy!] = [PRIMARY_KEY_ASC]
    ): PublicKeysConnection!
    "Reads and enables pagination through a set of `PublicKey`."
    publicKeysBySessionBlockIdAndPublicKeyId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: PublicKeyFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `PublicKey`."
        orderBy: [PublicKeysOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlockPublicKeysBySessionBlockIdAndPublicKeyIdManyToManyConnection!
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection!
    "Reads and enables pagination through a set of `SignatureThreshold`."
    signatureThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SignatureThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SignatureThreshold`."
        orderBy: [SignatureThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SignatureThresholdsConnection!
    specVersion: String
    stateRoot: String
    timestamp: Datetime
    "Reads and enables pagination through a set of `UnsignedProposalsQueue`."
    unsignedProposalsQueues(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueue`."
        orderBy: [UnsignedProposalsQueuesOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueuesConnection!
}

"A connection to a list of `Account` values, with data from `Account`."
type BlockAccountsByAccountCreateAtBlockIdAndCreatorIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AccountAggregates
    "A list of edges which contains the `Account`, info from the `Account`, and the cursor to aid in pagination."
    edges: [BlockAccountsByAccountCreateAtBlockIdAndCreatorIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Account` for these aggregates."
        groupBy: [AccountsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AccountsHavingInput
    ): [AccountAggregates!]
    "A list of `Account` objects."
    nodes: [Account]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Account` you could get from the connection."
    totalCount: Int!
}

"A `Account` edge in the connection, with data from `Account`."
type BlockAccountsByAccountCreateAtBlockIdAndCreatorIdManyToManyEdge {
    "Reads and enables pagination through a set of `Account`."
    accountsByCreatorId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection!
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Account` at the end of the edge."
    node: Account
}

"A connection to a list of `Account` values, with data from `Extrinsic`."
type BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: AccountAggregates
    "A list of edges which contains the `Account`, info from the `Extrinsic`, and the cursor to aid in pagination."
    edges: [BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Account` for these aggregates."
        groupBy: [AccountsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: AccountsHavingInput
    ): [AccountAggregates!]
    "A list of `Account` objects."
    nodes: [Account]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Account` you could get from the connection."
    totalCount: Int!
}

"A `Account` edge in the connection, with data from `Extrinsic`."
type BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection!
    "The `Account` at the end of the edge."
    node: Account
}

type BlockAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: BlockAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: BlockDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: BlockMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: BlockMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: BlockStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: BlockStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: BlockSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: BlockVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: BlockVarianceSampleAggregates
}

type BlockAverageAggregates {
    "Mean average of number across the matching connection"
    number: BigFloat
}

type BlockDistinctCountAggregates {
    "Distinct count of extrinsicsRoot across the matching connection"
    extrinsicsRoot: BigInt
    "Distinct count of hash across the matching connection"
    hash: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of number across the matching connection"
    number: BigInt
    "Distinct count of parentHash across the matching connection"
    parentHash: BigInt
    "Distinct count of specVersion across the matching connection"
    specVersion: BigInt
    "Distinct count of stateRoot across the matching connection"
    stateRoot: BigInt
    "Distinct count of timestamp across the matching connection"
    timestamp: BigInt
}

"A connection to a list of `Extrinsic` values, with data from `Event`."
type BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ExtrinsicAggregates
    "A list of edges which contains the `Extrinsic`, info from the `Event`, and the cursor to aid in pagination."
    edges: [BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Extrinsic` for these aggregates."
        groupBy: [ExtrinsicsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ExtrinsicsHavingInput
    ): [ExtrinsicAggregates!]
    "A list of `Extrinsic` objects."
    nodes: [Extrinsic]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Extrinsic` you could get from the connection."
    totalCount: Int!
}

"A `Extrinsic` edge in the connection, with data from `Event`."
type BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection!
    "The `Extrinsic` at the end of the edge."
    node: Extrinsic
}

type BlockMaxAggregates {
    "Maximum of number across the matching connection"
    number: BigFloat
}

type BlockMinAggregates {
    "Minimum of number across the matching connection"
    number: BigFloat
}

"A connection to a list of `PublicKey` values, with data from `Session`."
type BlockPublicKeysBySessionBlockIdAndPublicKeyIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: PublicKeyAggregates
    "A list of edges which contains the `PublicKey`, info from the `Session`, and the cursor to aid in pagination."
    edges: [BlockPublicKeysBySessionBlockIdAndPublicKeyIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `PublicKey` for these aggregates."
        groupBy: [PublicKeysGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: PublicKeysHavingInput
    ): [PublicKeyAggregates!]
    "A list of `PublicKey` objects."
    nodes: [PublicKey]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `PublicKey` you could get from the connection."
    totalCount: Int!
}

"A `PublicKey` edge in the connection, with data from `Session`."
type BlockPublicKeysBySessionBlockIdAndPublicKeyIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `PublicKey` at the end of the edge."
    node: PublicKey
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection!
}

type BlockStddevPopulationAggregates {
    "Population standard deviation of number across the matching connection"
    number: BigFloat
}

type BlockStddevSampleAggregates {
    "Sample standard deviation of number across the matching connection"
    number: BigFloat
}

type BlockSumAggregates {
    "Sum of number across the matching connection"
    number: BigFloat!
}

type BlockVariancePopulationAggregates {
    "Population variance of number across the matching connection"
    number: BigFloat
}

type BlockVarianceSampleAggregates {
    "Sample variance of number across the matching connection"
    number: BigFloat
}

"A connection to a list of `Block` values."
type BlocksConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block` and cursor to aid in pagination."
    edges: [BlocksEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection."
type BlocksEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
}

type Event implements Node {
    arguments: String
    "Reads a single `Block` that is related to this `Event`."
    block: Block
    blockId: String!
    blockNumber: BigFloat!
    data: String
    docs: String
    "Reads a single `Extrinsic` that is related to this `Event`."
    extrinsic: Extrinsic
    extrinsicId: String
    id: String!
    index: Int!
    method: String
    module: String
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    timestamp: Datetime
}

type EventAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: EventAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: EventDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: EventMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: EventMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: EventStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: EventStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: EventSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: EventVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: EventVarianceSampleAggregates
}

type EventAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of index across the matching connection"
    index: BigFloat
}

type EventDistinctCountAggregates {
    "Distinct count of arguments across the matching connection"
    arguments: BigInt
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of data across the matching connection"
    data: BigInt
    "Distinct count of docs across the matching connection"
    docs: BigInt
    "Distinct count of extrinsicId across the matching connection"
    extrinsicId: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of index across the matching connection"
    index: BigInt
    "Distinct count of method across the matching connection"
    method: BigInt
    "Distinct count of module across the matching connection"
    module: BigInt
    "Distinct count of timestamp across the matching connection"
    timestamp: BigInt
}

type EventMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Maximum of index across the matching connection"
    index: Int
}

type EventMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Minimum of index across the matching connection"
    index: Int
}

type EventStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of index across the matching connection"
    index: BigFloat
}

type EventStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of index across the matching connection"
    index: BigFloat
}

type EventSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigFloat!
    "Sum of index across the matching connection"
    index: BigInt!
}

type EventVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of index across the matching connection"
    index: BigFloat
}

type EventVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of index across the matching connection"
    index: BigFloat
}

"A connection to a list of `Event` values."
type EventsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: EventAggregates
    "A list of edges which contains the `Event` and cursor to aid in pagination."
    edges: [EventsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Event` for these aggregates."
        groupBy: [EventsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: EventsHavingInput
    ): [EventAggregates!]
    "A list of `Event` objects."
    nodes: [Event]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Event` you could get from the connection."
    totalCount: Int!
}

"A `Event` edge in the connection."
type EventsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Event` at the end of the edge."
    node: Event
}

type Extrinsic implements Node {
    arguments: String
    "Reads a single `Block` that is related to this `Extrinsic`."
    block: Block
    blockId: String!
    blockNumber: BigFloat!
    "Reads and enables pagination through a set of `Block`."
    blocksByEventExtrinsicIdAndBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyConnection!
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection!
    hash: String!
    id: String!
    index: Int!
    isSigned: Boolean
    isSuccess: Boolean
    method: String
    module: String
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `Account` that is related to this `Extrinsic`."
    signer: Account
    signerId: String
}

type ExtrinsicAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ExtrinsicAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ExtrinsicDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ExtrinsicMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ExtrinsicMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ExtrinsicStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ExtrinsicStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ExtrinsicSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ExtrinsicVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ExtrinsicVarianceSampleAggregates
}

type ExtrinsicAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of index across the matching connection"
    index: BigFloat
}

"A connection to a list of `Block` values, with data from `Event`."
type ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Event`, and the cursor to aid in pagination."
    edges: [ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Event`."
type ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection!
    "The `Block` at the end of the edge."
    node: Block
}

type ExtrinsicDistinctCountAggregates {
    "Distinct count of arguments across the matching connection"
    arguments: BigInt
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of hash across the matching connection"
    hash: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of index across the matching connection"
    index: BigInt
    "Distinct count of isSigned across the matching connection"
    isSigned: BigInt
    "Distinct count of isSuccess across the matching connection"
    isSuccess: BigInt
    "Distinct count of method across the matching connection"
    method: BigInt
    "Distinct count of module across the matching connection"
    module: BigInt
    "Distinct count of signerId across the matching connection"
    signerId: BigInt
}

type ExtrinsicMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Maximum of index across the matching connection"
    index: Int
}

type ExtrinsicMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Minimum of index across the matching connection"
    index: Int
}

type ExtrinsicStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of index across the matching connection"
    index: BigFloat
}

type ExtrinsicStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of index across the matching connection"
    index: BigFloat
}

type ExtrinsicSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigFloat!
    "Sum of index across the matching connection"
    index: BigInt!
}

type ExtrinsicVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of index across the matching connection"
    index: BigFloat
}

type ExtrinsicVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of index across the matching connection"
    index: BigFloat
}

"A connection to a list of `Extrinsic` values."
type ExtrinsicsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ExtrinsicAggregates
    "A list of edges which contains the `Extrinsic` and cursor to aid in pagination."
    edges: [ExtrinsicsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Extrinsic` for these aggregates."
        groupBy: [ExtrinsicsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ExtrinsicsHavingInput
    ): [ExtrinsicAggregates!]
    "A list of `Extrinsic` objects."
    nodes: [Extrinsic]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Extrinsic` you could get from the connection."
    totalCount: Int!
}

"A `Extrinsic` edge in the connection."
type ExtrinsicsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Extrinsic` at the end of the edge."
    node: Extrinsic
}

type KeygenThreshold implements Node {
    "Reads a single `Block` that is related to this `KeygenThreshold`."
    block: Block
    blockId: String!
    current: Int
    id: String!
    next: Int
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    pending: Int
}

type KeygenThresholdAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: KeygenThresholdAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: KeygenThresholdDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: KeygenThresholdMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: KeygenThresholdMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: KeygenThresholdStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: KeygenThresholdStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: KeygenThresholdSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: KeygenThresholdVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: KeygenThresholdVarianceSampleAggregates
}

type KeygenThresholdAverageAggregates {
    "Mean average of current across the matching connection"
    current: BigFloat
    "Mean average of next across the matching connection"
    next: BigFloat
    "Mean average of pending across the matching connection"
    pending: BigFloat
}

type KeygenThresholdDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of current across the matching connection"
    current: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of next across the matching connection"
    next: BigInt
    "Distinct count of pending across the matching connection"
    pending: BigInt
}

type KeygenThresholdMaxAggregates {
    "Maximum of current across the matching connection"
    current: Int
    "Maximum of next across the matching connection"
    next: Int
    "Maximum of pending across the matching connection"
    pending: Int
}

type KeygenThresholdMinAggregates {
    "Minimum of current across the matching connection"
    current: Int
    "Minimum of next across the matching connection"
    next: Int
    "Minimum of pending across the matching connection"
    pending: Int
}

type KeygenThresholdStddevPopulationAggregates {
    "Population standard deviation of current across the matching connection"
    current: BigFloat
    "Population standard deviation of next across the matching connection"
    next: BigFloat
    "Population standard deviation of pending across the matching connection"
    pending: BigFloat
}

type KeygenThresholdStddevSampleAggregates {
    "Sample standard deviation of current across the matching connection"
    current: BigFloat
    "Sample standard deviation of next across the matching connection"
    next: BigFloat
    "Sample standard deviation of pending across the matching connection"
    pending: BigFloat
}

type KeygenThresholdSumAggregates {
    "Sum of current across the matching connection"
    current: BigInt!
    "Sum of next across the matching connection"
    next: BigInt!
    "Sum of pending across the matching connection"
    pending: BigInt!
}

type KeygenThresholdVariancePopulationAggregates {
    "Population variance of current across the matching connection"
    current: BigFloat
    "Population variance of next across the matching connection"
    next: BigFloat
    "Population variance of pending across the matching connection"
    pending: BigFloat
}

type KeygenThresholdVarianceSampleAggregates {
    "Sample variance of current across the matching connection"
    current: BigFloat
    "Sample variance of next across the matching connection"
    next: BigFloat
    "Sample variance of pending across the matching connection"
    pending: BigFloat
}

"A connection to a list of `KeygenThreshold` values."
type KeygenThresholdsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: KeygenThresholdAggregates
    "A list of edges which contains the `KeygenThreshold` and cursor to aid in pagination."
    edges: [KeygenThresholdsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `KeygenThreshold` for these aggregates."
        groupBy: [KeygenThresholdsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: KeygenThresholdsHavingInput
    ): [KeygenThresholdAggregates!]
    "A list of `KeygenThreshold` objects."
    nodes: [KeygenThreshold]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `KeygenThreshold` you could get from the connection."
    totalCount: Int!
}

"A `KeygenThreshold` edge in the connection."
type KeygenThresholdsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `KeygenThreshold` at the end of the edge."
    node: KeygenThreshold
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: Cursor
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: Cursor
}

type ProposalCounter implements Node {
    "Reads a single `Block` that is related to this `ProposalCounter`."
    block: Block
    blockId: String!
    blockNumber: Int!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    signedProposalsCount: Int!
    signedProposalsMap: JSON
    statusMap: JSON
    unSignedProposalsCount: Int!
    unSignedProposalsMap: JSON
}

type ProposalCounterAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposalCounterAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposalCounterDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposalCounterMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposalCounterMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposalCounterStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposalCounterStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposalCounterSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposalCounterVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposalCounterVarianceSampleAggregates
}

type ProposalCounterAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Mean average of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

type ProposalCounterDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of signedProposalsCount across the matching connection"
    signedProposalsCount: BigInt
    "Distinct count of signedProposalsMap across the matching connection"
    signedProposalsMap: BigInt
    "Distinct count of statusMap across the matching connection"
    statusMap: BigInt
    "Distinct count of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigInt
    "Distinct count of unSignedProposalsMap across the matching connection"
    unSignedProposalsMap: BigInt
}

type ProposalCounterMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
    "Maximum of signedProposalsCount across the matching connection"
    signedProposalsCount: Int
    "Maximum of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: Int
}

type ProposalCounterMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
    "Minimum of signedProposalsCount across the matching connection"
    signedProposalsCount: Int
    "Minimum of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: Int
}

type ProposalCounterStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Population standard deviation of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

type ProposalCounterStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Sample standard deviation of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

type ProposalCounterSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
    "Sum of signedProposalsCount across the matching connection"
    signedProposalsCount: BigInt!
    "Sum of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigInt!
}

type ProposalCounterVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Population variance of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

type ProposalCounterVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of signedProposalsCount across the matching connection"
    signedProposalsCount: BigFloat
    "Sample variance of unSignedProposalsCount across the matching connection"
    unSignedProposalsCount: BigFloat
}

"A connection to a list of `ProposalCounter` values."
type ProposalCountersConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalCounterAggregates
    "A list of edges which contains the `ProposalCounter` and cursor to aid in pagination."
    edges: [ProposalCountersEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalCounter` for these aggregates."
        groupBy: [ProposalCountersGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalCountersHavingInput
    ): [ProposalCounterAggregates!]
    "A list of `ProposalCounter` objects."
    nodes: [ProposalCounter]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalCounter` you could get from the connection."
    totalCount: Int!
}

"A `ProposalCounter` edge in the connection."
type ProposalCountersEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalCounter` at the end of the edge."
    node: ProposalCounter
}

type ProposalItem implements Node {
    "Reads a single `Block` that is related to this `ProposalItem`."
    block: Block
    blockId: String!
    blockNumber: Int!
    currentStatus: JSON!
    data: String!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    nonce: Int!
    removed: Boolean
    signature: String
    status: String!
    timelineStatus: JSON!
    type: ProposalType!
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItemsByProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection!
    "Reads and enables pagination through a set of `UnsignedProposalsQueue`."
    unsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueue`."
        orderBy: [UnsignedProposalsQueuesOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalItemUnsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueIdManyToManyConnection!
    votes: JSON!
}

type ProposalItemAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposalItemAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposalItemDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposalItemMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposalItemMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposalItemStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposalItemStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposalItemSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposalItemVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposalItemVarianceSampleAggregates
}

type ProposalItemAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of nonce across the matching connection"
    nonce: BigFloat
}

type ProposalItemDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of currentStatus across the matching connection"
    currentStatus: BigInt
    "Distinct count of data across the matching connection"
    data: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of nonce across the matching connection"
    nonce: BigInt
    "Distinct count of removed across the matching connection"
    removed: BigInt
    "Distinct count of signature across the matching connection"
    signature: BigInt
    "Distinct count of status across the matching connection"
    status: BigInt
    "Distinct count of timelineStatus across the matching connection"
    timelineStatus: BigInt
    "Distinct count of type across the matching connection"
    type: BigInt
    "Distinct count of votes across the matching connection"
    votes: BigInt
}

type ProposalItemMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
    "Maximum of nonce across the matching connection"
    nonce: Int
}

type ProposalItemMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
    "Minimum of nonce across the matching connection"
    nonce: Int
}

type ProposalItemStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of nonce across the matching connection"
    nonce: BigFloat
}

type ProposalItemStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of nonce across the matching connection"
    nonce: BigFloat
}

type ProposalItemSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
    "Sum of nonce across the matching connection"
    nonce: BigInt!
}

"A connection to a list of `UnsignedProposalsQueue` values, with data from `UnsignedProposalsQueueItem`."
type ProposalItemUnsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: UnsignedProposalsQueueAggregates
    "A list of edges which contains the `UnsignedProposalsQueue`, info from the `UnsignedProposalsQueueItem`, and the cursor to aid in pagination."
    edges: [ProposalItemUnsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `UnsignedProposalsQueue` for these aggregates."
        groupBy: [UnsignedProposalsQueuesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: UnsignedProposalsQueuesHavingInput
    ): [UnsignedProposalsQueueAggregates!]
    "A list of `UnsignedProposalsQueue` objects."
    nodes: [UnsignedProposalsQueue]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `UnsignedProposalsQueue` you could get from the connection."
    totalCount: Int!
}

"A `UnsignedProposalsQueue` edge in the connection, with data from `UnsignedProposalsQueueItem`."
type ProposalItemUnsignedProposalsQueuesByUnsignedProposalsQueueItemProposalIdAndQueueIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `UnsignedProposalsQueue` at the end of the edge."
    node: UnsignedProposalsQueue
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItemsByQueueId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection!
}

type ProposalItemVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of nonce across the matching connection"
    nonce: BigFloat
}

type ProposalItemVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of nonce across the matching connection"
    nonce: BigFloat
}

"A connection to a list of `ProposalItem` values."
type ProposalItemsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalItemAggregates
    "A list of edges which contains the `ProposalItem` and cursor to aid in pagination."
    edges: [ProposalItemsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalItem` for these aggregates."
        groupBy: [ProposalItemsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalItemsHavingInput
    ): [ProposalItemAggregates!]
    "A list of `ProposalItem` objects."
    nodes: [ProposalItem]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalItem` you could get from the connection."
    totalCount: Int!
}

"A `ProposalItem` edge in the connection."
type ProposalItemsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalItem` at the end of the edge."
    node: ProposalItem
}

type Proposer implements Node {
    "Reads a single `Block` that is related to this `Proposer`."
    block: Block
    blockId: String!
    count: Int!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    proposers: JSON!
}

type ProposerAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposerAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposerDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposerMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposerMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposerStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposerStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposerSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposerVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposerVarianceSampleAggregates
}

type ProposerAverageAggregates {
    "Mean average of count across the matching connection"
    count: BigFloat
}

type ProposerDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of count across the matching connection"
    count: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of proposers across the matching connection"
    proposers: BigInt
}

type ProposerMaxAggregates {
    "Maximum of count across the matching connection"
    count: Int
}

type ProposerMinAggregates {
    "Minimum of count across the matching connection"
    count: Int
}

type ProposerStddevPopulationAggregates {
    "Population standard deviation of count across the matching connection"
    count: BigFloat
}

type ProposerStddevSampleAggregates {
    "Sample standard deviation of count across the matching connection"
    count: BigFloat
}

type ProposerSumAggregates {
    "Sum of count across the matching connection"
    count: BigInt!
}

type ProposerThreshold implements Node {
    "Reads a single `Block` that is related to this `ProposerThreshold`."
    block: Block
    blockId: String!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    value: Int
}

type ProposerThresholdAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: ProposerThresholdAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: ProposerThresholdDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: ProposerThresholdMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: ProposerThresholdMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: ProposerThresholdStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: ProposerThresholdStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: ProposerThresholdSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: ProposerThresholdVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: ProposerThresholdVarianceSampleAggregates
}

type ProposerThresholdAverageAggregates {
    "Mean average of value across the matching connection"
    value: BigFloat
}

type ProposerThresholdDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of value across the matching connection"
    value: BigInt
}

type ProposerThresholdMaxAggregates {
    "Maximum of value across the matching connection"
    value: Int
}

type ProposerThresholdMinAggregates {
    "Minimum of value across the matching connection"
    value: Int
}

type ProposerThresholdStddevPopulationAggregates {
    "Population standard deviation of value across the matching connection"
    value: BigFloat
}

type ProposerThresholdStddevSampleAggregates {
    "Sample standard deviation of value across the matching connection"
    value: BigFloat
}

type ProposerThresholdSumAggregates {
    "Sum of value across the matching connection"
    value: BigInt!
}

type ProposerThresholdVariancePopulationAggregates {
    "Population variance of value across the matching connection"
    value: BigFloat
}

type ProposerThresholdVarianceSampleAggregates {
    "Sample variance of value across the matching connection"
    value: BigFloat
}

"A connection to a list of `ProposerThreshold` values."
type ProposerThresholdsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposerThresholdAggregates
    "A list of edges which contains the `ProposerThreshold` and cursor to aid in pagination."
    edges: [ProposerThresholdsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposerThreshold` for these aggregates."
        groupBy: [ProposerThresholdsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposerThresholdsHavingInput
    ): [ProposerThresholdAggregates!]
    "A list of `ProposerThreshold` objects."
    nodes: [ProposerThreshold]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposerThreshold` you could get from the connection."
    totalCount: Int!
}

"A `ProposerThreshold` edge in the connection."
type ProposerThresholdsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposerThreshold` at the end of the edge."
    node: ProposerThreshold
}

type ProposerVariancePopulationAggregates {
    "Population variance of count across the matching connection"
    count: BigFloat
}

type ProposerVarianceSampleAggregates {
    "Sample variance of count across the matching connection"
    count: BigFloat
}

"A connection to a list of `Proposer` values."
type ProposersConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposerAggregates
    "A list of edges which contains the `Proposer` and cursor to aid in pagination."
    edges: [ProposersEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Proposer` for these aggregates."
        groupBy: [ProposersGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposersHavingInput
    ): [ProposerAggregates!]
    "A list of `Proposer` objects."
    nodes: [Proposer]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Proposer` you could get from the connection."
    totalCount: Int!
}

"A `Proposer` edge in the connection."
type ProposersEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Proposer` at the end of the edge."
    node: Proposer
}

type PublicKey implements Node {
    "Reads a single `Block` that is related to this `PublicKey`."
    block: Block
    blockId: String!
    "Reads and enables pagination through a set of `Block`."
    blocksBySessionPublicKeyIdAndBlockId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): PublicKeyBlocksBySessionPublicKeyIdAndBlockIdManyToManyConnection!
    compressed: String
    history: JSON!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection!
    uncompressed: String
}

type PublicKeyAggregates {
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: PublicKeyDistinctCountAggregates
    keys: [String!]
}

"A connection to a list of `Block` values, with data from `Session`."
type PublicKeyBlocksBySessionPublicKeyIdAndBlockIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: BlockAggregates
    "A list of edges which contains the `Block`, info from the `Session`, and the cursor to aid in pagination."
    edges: [PublicKeyBlocksBySessionPublicKeyIdAndBlockIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Block` for these aggregates."
        groupBy: [BlocksGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: BlocksHavingInput
    ): [BlockAggregates!]
    "A list of `Block` objects."
    nodes: [Block]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Block` you could get from the connection."
    totalCount: Int!
}

"A `Block` edge in the connection, with data from `Session`."
type PublicKeyBlocksBySessionPublicKeyIdAndBlockIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Block` at the end of the edge."
    node: Block
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection!
}

type PublicKeyDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of compressed across the matching connection"
    compressed: BigInt
    "Distinct count of history across the matching connection"
    history: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of uncompressed across the matching connection"
    uncompressed: BigInt
}

"A connection to a list of `PublicKey` values."
type PublicKeysConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: PublicKeyAggregates
    "A list of edges which contains the `PublicKey` and cursor to aid in pagination."
    edges: [PublicKeysEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `PublicKey` for these aggregates."
        groupBy: [PublicKeysGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: PublicKeysHavingInput
    ): [PublicKeyAggregates!]
    "A list of `PublicKey` objects."
    nodes: [PublicKey]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `PublicKey` you could get from the connection."
    totalCount: Int!
}

"A `PublicKey` edge in the connection."
type PublicKeysEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `PublicKey` at the end of the edge."
    node: PublicKey
}

"The root query type which gives access points into the data universe."
type Query implements Node {
    _metadata: _Metadata
    account(id: String!): Account
    "Reads a single `Account` using its globally unique `ID`."
    accountByNodeId(
        "The globally unique `ID` to be used in selecting a single `Account`."
        nodeId: ID!
    ): Account
    "Reads and enables pagination through a set of `Account`."
    accounts(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AccountFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Account`."
        orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
    ): AccountsConnection
    "Reads and enables pagination through a set of `Authority`."
    authorities(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: AuthorityFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Authority`."
        orderBy: [AuthoritiesOrderBy!] = [PRIMARY_KEY_ASC]
    ): AuthoritiesConnection
    authority(id: String!): Authority
    "Reads a single `Authority` using its globally unique `ID`."
    authorityByNodeId(
        "The globally unique `ID` to be used in selecting a single `Authority`."
        nodeId: ID!
    ): Authority
    block(id: String!): Block
    "Reads a single `Block` using its globally unique `ID`."
    blockByNodeId(
        "The globally unique `ID` to be used in selecting a single `Block`."
        nodeId: ID!
    ): Block
    "Reads and enables pagination through a set of `Block`."
    blocks(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: BlockFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Block`."
        orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
    ): BlocksConnection
    event(id: String!): Event
    "Reads a single `Event` using its globally unique `ID`."
    eventByNodeId(
        "The globally unique `ID` to be used in selecting a single `Event`."
        nodeId: ID!
    ): Event
    "Reads and enables pagination through a set of `Event`."
    events(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: EventFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Event`."
        orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
    ): EventsConnection
    extrinsic(id: String!): Extrinsic
    "Reads a single `Extrinsic` using its globally unique `ID`."
    extrinsicByNodeId(
        "The globally unique `ID` to be used in selecting a single `Extrinsic`."
        nodeId: ID!
    ): Extrinsic
    "Reads and enables pagination through a set of `Extrinsic`."
    extrinsics(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ExtrinsicFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Extrinsic`."
        orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ExtrinsicsConnection
    keygenThreshold(id: String!): KeygenThreshold
    "Reads a single `KeygenThreshold` using its globally unique `ID`."
    keygenThresholdByNodeId(
        "The globally unique `ID` to be used in selecting a single `KeygenThreshold`."
        nodeId: ID!
    ): KeygenThreshold
    "Reads and enables pagination through a set of `KeygenThreshold`."
    keygenThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: KeygenThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `KeygenThreshold`."
        orderBy: [KeygenThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): KeygenThresholdsConnection
    "Fetches an object given its globally unique `ID`."
    node(
        "The globally unique `ID`."
        nodeId: ID!
    ): Node
    "The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`."
    nodeId: ID!
    proposalCounter(id: String!): ProposalCounter
    "Reads a single `ProposalCounter` using its globally unique `ID`."
    proposalCounterByNodeId(
        "The globally unique `ID` to be used in selecting a single `ProposalCounter`."
        nodeId: ID!
    ): ProposalCounter
    "Reads and enables pagination through a set of `ProposalCounter`."
    proposalCounters(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalCounterFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalCounter`."
        orderBy: [ProposalCountersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalCountersConnection
    proposalItem(id: String!): ProposalItem
    "Reads a single `ProposalItem` using its globally unique `ID`."
    proposalItemByNodeId(
        "The globally unique `ID` to be used in selecting a single `ProposalItem`."
        nodeId: ID!
    ): ProposalItem
    "Reads and enables pagination through a set of `ProposalItem`."
    proposalItems(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalItem`."
        orderBy: [ProposalItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposalItemsConnection
    proposer(id: String!): Proposer
    "Reads a single `Proposer` using its globally unique `ID`."
    proposerByNodeId(
        "The globally unique `ID` to be used in selecting a single `Proposer`."
        nodeId: ID!
    ): Proposer
    proposerThreshold(id: String!): ProposerThreshold
    "Reads a single `ProposerThreshold` using its globally unique `ID`."
    proposerThresholdByNodeId(
        "The globally unique `ID` to be used in selecting a single `ProposerThreshold`."
        nodeId: ID!
    ): ProposerThreshold
    "Reads and enables pagination through a set of `ProposerThreshold`."
    proposerThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposerThreshold`."
        orderBy: [ProposerThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposerThresholdsConnection
    "Reads and enables pagination through a set of `Proposer`."
    proposers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposerFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Proposer`."
        orderBy: [ProposersOrderBy!] = [PRIMARY_KEY_ASC]
    ): ProposersConnection
    publicKey(id: String!): PublicKey
    "Reads a single `PublicKey` using its globally unique `ID`."
    publicKeyByNodeId(
        "The globally unique `ID` to be used in selecting a single `PublicKey`."
        nodeId: ID!
    ): PublicKey
    "Reads and enables pagination through a set of `PublicKey`."
    publicKeys(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: PublicKeyFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `PublicKey`."
        orderBy: [PublicKeysOrderBy!] = [PRIMARY_KEY_ASC]
    ): PublicKeysConnection
    """

    Exposes the root query type nested one level down. This is helpful for Relay 1
    which can only query top level fields if they are in a particular form.
    """
    query: Query!
    session(id: String!): Session
    "Reads a single `Session` using its globally unique `ID`."
    sessionByNodeId(
        "The globally unique `ID` to be used in selecting a single `Session`."
        nodeId: ID!
    ): Session
    "Reads and enables pagination through a set of `Session`."
    sessions(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SessionFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `Session`."
        orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SessionsConnection
    signatureThreshold(id: String!): SignatureThreshold
    "Reads a single `SignatureThreshold` using its globally unique `ID`."
    signatureThresholdByNodeId(
        "The globally unique `ID` to be used in selecting a single `SignatureThreshold`."
        nodeId: ID!
    ): SignatureThreshold
    "Reads and enables pagination through a set of `SignatureThreshold`."
    signatureThresholds(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: SignatureThresholdFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `SignatureThreshold`."
        orderBy: [SignatureThresholdsOrderBy!] = [PRIMARY_KEY_ASC]
    ): SignatureThresholdsConnection
    unsignedProposalsQueue(id: String!): UnsignedProposalsQueue
    "Reads a single `UnsignedProposalsQueue` using its globally unique `ID`."
    unsignedProposalsQueueByNodeId(
        "The globally unique `ID` to be used in selecting a single `UnsignedProposalsQueue`."
        nodeId: ID!
    ): UnsignedProposalsQueue
    unsignedProposalsQueueItem(id: String!): UnsignedProposalsQueueItem
    "Reads a single `UnsignedProposalsQueueItem` using its globally unique `ID`."
    unsignedProposalsQueueItemByNodeId(
        "The globally unique `ID` to be used in selecting a single `UnsignedProposalsQueueItem`."
        nodeId: ID!
    ): UnsignedProposalsQueueItem
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItems(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection
    "Reads and enables pagination through a set of `UnsignedProposalsQueue`."
    unsignedProposalsQueues(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueue`."
        orderBy: [UnsignedProposalsQueuesOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueuesConnection
}

type Session implements Node {
    authorities: JSON!
    bestAuthorities: JSON!
    "Reads a single `Block` that is related to this `Session`."
    block: Block
    blockId: String!
    blockNumber: Int!
    id: String!
    keyGenThreshold: JSON
    nextAuthorities: JSON!
    nextBestAuthorities: JSON!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    proposerThreshold: JSON
    proposers: JSON!
    proposersCount: Int
    "Reads a single `PublicKey` that is related to this `Session`."
    publicKey: PublicKey
    publicKeyId: String
    signatureThreshold: JSON
}

type SessionAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: SessionAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: SessionDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: SessionMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: SessionMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: SessionStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: SessionStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: SessionSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: SessionVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: SessionVarianceSampleAggregates
}

type SessionAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Mean average of proposersCount across the matching connection"
    proposersCount: BigFloat
}

type SessionDistinctCountAggregates {
    "Distinct count of authorities across the matching connection"
    authorities: BigInt
    "Distinct count of bestAuthorities across the matching connection"
    bestAuthorities: BigInt
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of keyGenThreshold across the matching connection"
    keyGenThreshold: BigInt
    "Distinct count of nextAuthorities across the matching connection"
    nextAuthorities: BigInt
    "Distinct count of nextBestAuthorities across the matching connection"
    nextBestAuthorities: BigInt
    "Distinct count of proposerThreshold across the matching connection"
    proposerThreshold: BigInt
    "Distinct count of proposers across the matching connection"
    proposers: BigInt
    "Distinct count of proposersCount across the matching connection"
    proposersCount: BigInt
    "Distinct count of publicKeyId across the matching connection"
    publicKeyId: BigInt
    "Distinct count of signatureThreshold across the matching connection"
    signatureThreshold: BigInt
}

type SessionMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
    "Maximum of proposersCount across the matching connection"
    proposersCount: Int
}

type SessionMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
    "Minimum of proposersCount across the matching connection"
    proposersCount: Int
}

type SessionStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population standard deviation of proposersCount across the matching connection"
    proposersCount: BigFloat
}

type SessionStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample standard deviation of proposersCount across the matching connection"
    proposersCount: BigFloat
}

type SessionSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
    "Sum of proposersCount across the matching connection"
    proposersCount: BigInt!
}

type SessionVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Population variance of proposersCount across the matching connection"
    proposersCount: BigFloat
}

type SessionVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
    "Sample variance of proposersCount across the matching connection"
    proposersCount: BigFloat
}

"A connection to a list of `Session` values."
type SessionsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SessionAggregates
    "A list of edges which contains the `Session` and cursor to aid in pagination."
    edges: [SessionsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `Session` for these aggregates."
        groupBy: [SessionsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SessionsHavingInput
    ): [SessionAggregates!]
    "A list of `Session` objects."
    nodes: [Session]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Session` you could get from the connection."
    totalCount: Int!
}

"A `Session` edge in the connection."
type SessionsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Session` at the end of the edge."
    node: Session
}

type SignatureThreshold implements Node {
    "Reads a single `Block` that is related to this `SignatureThreshold`."
    block: Block
    blockId: String!
    current: Int
    id: String!
    next: Int
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    pending: Int
}

type SignatureThresholdAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: SignatureThresholdAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: SignatureThresholdDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: SignatureThresholdMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: SignatureThresholdMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: SignatureThresholdStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: SignatureThresholdStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: SignatureThresholdSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: SignatureThresholdVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: SignatureThresholdVarianceSampleAggregates
}

type SignatureThresholdAverageAggregates {
    "Mean average of current across the matching connection"
    current: BigFloat
    "Mean average of next across the matching connection"
    next: BigFloat
    "Mean average of pending across the matching connection"
    pending: BigFloat
}

type SignatureThresholdDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of current across the matching connection"
    current: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of next across the matching connection"
    next: BigInt
    "Distinct count of pending across the matching connection"
    pending: BigInt
}

type SignatureThresholdMaxAggregates {
    "Maximum of current across the matching connection"
    current: Int
    "Maximum of next across the matching connection"
    next: Int
    "Maximum of pending across the matching connection"
    pending: Int
}

type SignatureThresholdMinAggregates {
    "Minimum of current across the matching connection"
    current: Int
    "Minimum of next across the matching connection"
    next: Int
    "Minimum of pending across the matching connection"
    pending: Int
}

type SignatureThresholdStddevPopulationAggregates {
    "Population standard deviation of current across the matching connection"
    current: BigFloat
    "Population standard deviation of next across the matching connection"
    next: BigFloat
    "Population standard deviation of pending across the matching connection"
    pending: BigFloat
}

type SignatureThresholdStddevSampleAggregates {
    "Sample standard deviation of current across the matching connection"
    current: BigFloat
    "Sample standard deviation of next across the matching connection"
    next: BigFloat
    "Sample standard deviation of pending across the matching connection"
    pending: BigFloat
}

type SignatureThresholdSumAggregates {
    "Sum of current across the matching connection"
    current: BigInt!
    "Sum of next across the matching connection"
    next: BigInt!
    "Sum of pending across the matching connection"
    pending: BigInt!
}

type SignatureThresholdVariancePopulationAggregates {
    "Population variance of current across the matching connection"
    current: BigFloat
    "Population variance of next across the matching connection"
    next: BigFloat
    "Population variance of pending across the matching connection"
    pending: BigFloat
}

type SignatureThresholdVarianceSampleAggregates {
    "Sample variance of current across the matching connection"
    current: BigFloat
    "Sample variance of next across the matching connection"
    next: BigFloat
    "Sample variance of pending across the matching connection"
    pending: BigFloat
}

"A connection to a list of `SignatureThreshold` values."
type SignatureThresholdsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: SignatureThresholdAggregates
    "A list of edges which contains the `SignatureThreshold` and cursor to aid in pagination."
    edges: [SignatureThresholdsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `SignatureThreshold` for these aggregates."
        groupBy: [SignatureThresholdsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: SignatureThresholdsHavingInput
    ): [SignatureThresholdAggregates!]
    "A list of `SignatureThreshold` objects."
    nodes: [SignatureThreshold]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `SignatureThreshold` you could get from the connection."
    totalCount: Int!
}

"A `SignatureThreshold` edge in the connection."
type SignatureThresholdsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `SignatureThreshold` at the end of the edge."
    node: SignatureThreshold
}

type TableEstimate {
    estimate: Int
    table: String
}

type UnsignedProposalsQueue implements Node {
    "Reads a single `Block` that is related to this `UnsignedProposalsQueue`."
    block: Block
    blockId: String!
    blockNumber: Int!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads and enables pagination through a set of `ProposalItem`."
    proposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: ProposalItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `ProposalItem`."
        orderBy: [ProposalItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueProposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalIdManyToManyConnection!
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItemsByQueueId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection!
}

type UnsignedProposalsQueueAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: UnsignedProposalsQueueAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: UnsignedProposalsQueueDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: UnsignedProposalsQueueMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: UnsignedProposalsQueueMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: UnsignedProposalsQueueStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: UnsignedProposalsQueueStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: UnsignedProposalsQueueSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: UnsignedProposalsQueueVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: UnsignedProposalsQueueVarianceSampleAggregates
}

type UnsignedProposalsQueueAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueDistinctCountAggregates {
    "Distinct count of blockId across the matching connection"
    blockId: BigInt
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
}

type UnsignedProposalsQueueItem implements Node {
    blockNumber: Int!
    id: String!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `ProposalItem` that is related to this `UnsignedProposalsQueueItem`."
    proposal: ProposalItem
    proposalId: String!
    "Reads a single `UnsignedProposalsQueue` that is related to this `UnsignedProposalsQueueItem`."
    queue: UnsignedProposalsQueue
    queueId: String!
}

type UnsignedProposalsQueueItemAggregates {
    "Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)"
    average: UnsignedProposalsQueueItemAverageAggregates
    "Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)"
    distinctCount: UnsignedProposalsQueueItemDistinctCountAggregates
    keys: [String!]
    "Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    max: UnsignedProposalsQueueItemMaxAggregates
    "Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    min: UnsignedProposalsQueueItemMinAggregates
    "Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevPopulation: UnsignedProposalsQueueItemStddevPopulationAggregates
    "Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)"
    stddevSample: UnsignedProposalsQueueItemStddevSampleAggregates
    "Sum aggregates across the matching connection (ignoring before/after/first/last/offset)"
    sum: UnsignedProposalsQueueItemSumAggregates
    "Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    variancePopulation: UnsignedProposalsQueueItemVariancePopulationAggregates
    "Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)"
    varianceSample: UnsignedProposalsQueueItemVarianceSampleAggregates
}

type UnsignedProposalsQueueItemAverageAggregates {
    "Mean average of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueItemDistinctCountAggregates {
    "Distinct count of blockNumber across the matching connection"
    blockNumber: BigInt
    "Distinct count of id across the matching connection"
    id: BigInt
    "Distinct count of proposalId across the matching connection"
    proposalId: BigInt
    "Distinct count of queueId across the matching connection"
    queueId: BigInt
}

type UnsignedProposalsQueueItemMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
}

type UnsignedProposalsQueueItemMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
}

type UnsignedProposalsQueueItemStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueItemStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueItemSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
}

type UnsignedProposalsQueueItemVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueItemVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

"A connection to a list of `UnsignedProposalsQueueItem` values."
type UnsignedProposalsQueueItemsConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: UnsignedProposalsQueueItemAggregates
    "A list of edges which contains the `UnsignedProposalsQueueItem` and cursor to aid in pagination."
    edges: [UnsignedProposalsQueueItemsEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `UnsignedProposalsQueueItem` for these aggregates."
        groupBy: [UnsignedProposalsQueueItemsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: UnsignedProposalsQueueItemsHavingInput
    ): [UnsignedProposalsQueueItemAggregates!]
    "A list of `UnsignedProposalsQueueItem` objects."
    nodes: [UnsignedProposalsQueueItem]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `UnsignedProposalsQueueItem` you could get from the connection."
    totalCount: Int!
}

"A `UnsignedProposalsQueueItem` edge in the connection."
type UnsignedProposalsQueueItemsEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `UnsignedProposalsQueueItem` at the end of the edge."
    node: UnsignedProposalsQueueItem
}

type UnsignedProposalsQueueMaxAggregates {
    "Maximum of blockNumber across the matching connection"
    blockNumber: Int
}

type UnsignedProposalsQueueMinAggregates {
    "Minimum of blockNumber across the matching connection"
    blockNumber: Int
}

"A connection to a list of `ProposalItem` values, with data from `UnsignedProposalsQueueItem`."
type UnsignedProposalsQueueProposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalIdManyToManyConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: ProposalItemAggregates
    "A list of edges which contains the `ProposalItem`, info from the `UnsignedProposalsQueueItem`, and the cursor to aid in pagination."
    edges: [UnsignedProposalsQueueProposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalIdManyToManyEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `ProposalItem` for these aggregates."
        groupBy: [ProposalItemsGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: ProposalItemsHavingInput
    ): [ProposalItemAggregates!]
    "A list of `ProposalItem` objects."
    nodes: [ProposalItem]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `ProposalItem` you could get from the connection."
    totalCount: Int!
}

"A `ProposalItem` edge in the connection, with data from `UnsignedProposalsQueueItem`."
type UnsignedProposalsQueueProposalItemsByUnsignedProposalsQueueItemQueueIdAndProposalIdManyToManyEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `ProposalItem` at the end of the edge."
    node: ProposalItem
    "Reads and enables pagination through a set of `UnsignedProposalsQueueItem`."
    unsignedProposalsQueueItemsByProposalId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A filter to be used in determining which values should be returned by the collection."
        filter: UnsignedProposalsQueueItemFilter,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        """

        Skip the first `n` values from our `after` cursor, an alternative to cursor
        based pagination. May not be used with `last`.
        """
        offset: Int,
        "The method to use when ordering `UnsignedProposalsQueueItem`."
        orderBy: [UnsignedProposalsQueueItemsOrderBy!] = [PRIMARY_KEY_ASC]
    ): UnsignedProposalsQueueItemsConnection!
}

type UnsignedProposalsQueueStddevPopulationAggregates {
    "Population standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueStddevSampleAggregates {
    "Sample standard deviation of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueSumAggregates {
    "Sum of blockNumber across the matching connection"
    blockNumber: BigInt!
}

type UnsignedProposalsQueueVariancePopulationAggregates {
    "Population variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

type UnsignedProposalsQueueVarianceSampleAggregates {
    "Sample variance of blockNumber across the matching connection"
    blockNumber: BigFloat
}

"A connection to a list of `UnsignedProposalsQueue` values."
type UnsignedProposalsQueuesConnection {
    "Aggregates across the matching connection (ignoring before/after/first/last/offset)"
    aggregates: UnsignedProposalsQueueAggregates
    "A list of edges which contains the `UnsignedProposalsQueue` and cursor to aid in pagination."
    edges: [UnsignedProposalsQueuesEdge!]!
    "Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)"
    groupedAggregates(
        "The method to use when grouping `UnsignedProposalsQueue` for these aggregates."
        groupBy: [UnsignedProposalsQueuesGroupBy!]!,
        "Conditions on the grouped aggregates."
        having: UnsignedProposalsQueuesHavingInput
    ): [UnsignedProposalsQueueAggregates!]
    "A list of `UnsignedProposalsQueue` objects."
    nodes: [UnsignedProposalsQueue]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `UnsignedProposalsQueue` you could get from the connection."
    totalCount: Int!
}

"A `UnsignedProposalsQueue` edge in the connection."
type UnsignedProposalsQueuesEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `UnsignedProposalsQueue` at the end of the edge."
    node: UnsignedProposalsQueue
}

type _Metadata {
    chain: String
    dynamicDatasources: String
    genesisHash: String
    indexerHealthy: Boolean
    indexerNodeVersion: String
    lastProcessedHeight: Int
    lastProcessedTimestamp: Date
    queryNodeVersion: String
    rowCountEstimate: [TableEstimate]
    specName: String
    targetHeight: Int
}

"Grouping methods for `Account` for usage during aggregation."
enum AccountsGroupBy {
    CREATED_AT
    CREATE_AT_BLOCK_ID
    CREATOR_ID
}

"Methods to use when ordering `Account`."
enum AccountsOrderBy {
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_AVERAGE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_COUNT_ASC
    ACCOUNTS_BY_CREATOR_ID_COUNT_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_DISTINCT_COUNT_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MAX_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MAX_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_MIN_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_MIN_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_POPULATION_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_STDDEV_SAMPLE_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_SUM_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_SUM_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_POPULATION_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_ID_ASC
    ACCOUNTS_BY_CREATOR_ID_VARIANCE_SAMPLE_ID_DESC
    CREATED_AT_ASC
    CREATED_AT_DESC
    CREATE_AT_BLOCK_ID_ASC
    CREATE_AT_BLOCK_ID_DESC
    CREATOR_ID_ASC
    CREATOR_ID_DESC
    EXTRINSICS_AVERAGE_ARGUMENTS_ASC
    EXTRINSICS_AVERAGE_ARGUMENTS_DESC
    EXTRINSICS_AVERAGE_BLOCK_ID_ASC
    EXTRINSICS_AVERAGE_BLOCK_ID_DESC
    EXTRINSICS_AVERAGE_BLOCK_NUMBER_ASC
    EXTRINSICS_AVERAGE_BLOCK_NUMBER_DESC
    EXTRINSICS_AVERAGE_HASH_ASC
    EXTRINSICS_AVERAGE_HASH_DESC
    EXTRINSICS_AVERAGE_ID_ASC
    EXTRINSICS_AVERAGE_ID_DESC
    EXTRINSICS_AVERAGE_INDEX_ASC
    EXTRINSICS_AVERAGE_INDEX_DESC
    EXTRINSICS_AVERAGE_IS_SIGNED_ASC
    EXTRINSICS_AVERAGE_IS_SIGNED_DESC
    EXTRINSICS_AVERAGE_IS_SUCCESS_ASC
    EXTRINSICS_AVERAGE_IS_SUCCESS_DESC
    EXTRINSICS_AVERAGE_METHOD_ASC
    EXTRINSICS_AVERAGE_METHOD_DESC
    EXTRINSICS_AVERAGE_MODULE_ASC
    EXTRINSICS_AVERAGE_MODULE_DESC
    EXTRINSICS_AVERAGE_SIGNER_ID_ASC
    EXTRINSICS_AVERAGE_SIGNER_ID_DESC
    EXTRINSICS_COUNT_ASC
    EXTRINSICS_COUNT_DESC
    EXTRINSICS_DISTINCT_COUNT_ARGUMENTS_ASC
    EXTRINSICS_DISTINCT_COUNT_ARGUMENTS_DESC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_ID_DESC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    EXTRINSICS_DISTINCT_COUNT_HASH_ASC
    EXTRINSICS_DISTINCT_COUNT_HASH_DESC
    EXTRINSICS_DISTINCT_COUNT_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_ID_DESC
    EXTRINSICS_DISTINCT_COUNT_INDEX_ASC
    EXTRINSICS_DISTINCT_COUNT_INDEX_DESC
    EXTRINSICS_DISTINCT_COUNT_IS_SIGNED_ASC
    EXTRINSICS_DISTINCT_COUNT_IS_SIGNED_DESC
    EXTRINSICS_DISTINCT_COUNT_IS_SUCCESS_ASC
    EXTRINSICS_DISTINCT_COUNT_IS_SUCCESS_DESC
    EXTRINSICS_DISTINCT_COUNT_METHOD_ASC
    EXTRINSICS_DISTINCT_COUNT_METHOD_DESC
    EXTRINSICS_DISTINCT_COUNT_MODULE_ASC
    EXTRINSICS_DISTINCT_COUNT_MODULE_DESC
    EXTRINSICS_DISTINCT_COUNT_SIGNER_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_SIGNER_ID_DESC
    EXTRINSICS_MAX_ARGUMENTS_ASC
    EXTRINSICS_MAX_ARGUMENTS_DESC
    EXTRINSICS_MAX_BLOCK_ID_ASC
    EXTRINSICS_MAX_BLOCK_ID_DESC
    EXTRINSICS_MAX_BLOCK_NUMBER_ASC
    EXTRINSICS_MAX_BLOCK_NUMBER_DESC
    EXTRINSICS_MAX_HASH_ASC
    EXTRINSICS_MAX_HASH_DESC
    EXTRINSICS_MAX_ID_ASC
    EXTRINSICS_MAX_ID_DESC
    EXTRINSICS_MAX_INDEX_ASC
    EXTRINSICS_MAX_INDEX_DESC
    EXTRINSICS_MAX_IS_SIGNED_ASC
    EXTRINSICS_MAX_IS_SIGNED_DESC
    EXTRINSICS_MAX_IS_SUCCESS_ASC
    EXTRINSICS_MAX_IS_SUCCESS_DESC
    EXTRINSICS_MAX_METHOD_ASC
    EXTRINSICS_MAX_METHOD_DESC
    EXTRINSICS_MAX_MODULE_ASC
    EXTRINSICS_MAX_MODULE_DESC
    EXTRINSICS_MAX_SIGNER_ID_ASC
    EXTRINSICS_MAX_SIGNER_ID_DESC
    EXTRINSICS_MIN_ARGUMENTS_ASC
    EXTRINSICS_MIN_ARGUMENTS_DESC
    EXTRINSICS_MIN_BLOCK_ID_ASC
    EXTRINSICS_MIN_BLOCK_ID_DESC
    EXTRINSICS_MIN_BLOCK_NUMBER_ASC
    EXTRINSICS_MIN_BLOCK_NUMBER_DESC
    EXTRINSICS_MIN_HASH_ASC
    EXTRINSICS_MIN_HASH_DESC
    EXTRINSICS_MIN_ID_ASC
    EXTRINSICS_MIN_ID_DESC
    EXTRINSICS_MIN_INDEX_ASC
    EXTRINSICS_MIN_INDEX_DESC
    EXTRINSICS_MIN_IS_SIGNED_ASC
    EXTRINSICS_MIN_IS_SIGNED_DESC
    EXTRINSICS_MIN_IS_SUCCESS_ASC
    EXTRINSICS_MIN_IS_SUCCESS_DESC
    EXTRINSICS_MIN_METHOD_ASC
    EXTRINSICS_MIN_METHOD_DESC
    EXTRINSICS_MIN_MODULE_ASC
    EXTRINSICS_MIN_MODULE_DESC
    EXTRINSICS_MIN_SIGNER_ID_ASC
    EXTRINSICS_MIN_SIGNER_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_ARGUMENTS_ASC
    EXTRINSICS_STDDEV_POPULATION_ARGUMENTS_DESC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    EXTRINSICS_STDDEV_POPULATION_HASH_ASC
    EXTRINSICS_STDDEV_POPULATION_HASH_DESC
    EXTRINSICS_STDDEV_POPULATION_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_INDEX_ASC
    EXTRINSICS_STDDEV_POPULATION_INDEX_DESC
    EXTRINSICS_STDDEV_POPULATION_IS_SIGNED_ASC
    EXTRINSICS_STDDEV_POPULATION_IS_SIGNED_DESC
    EXTRINSICS_STDDEV_POPULATION_IS_SUCCESS_ASC
    EXTRINSICS_STDDEV_POPULATION_IS_SUCCESS_DESC
    EXTRINSICS_STDDEV_POPULATION_METHOD_ASC
    EXTRINSICS_STDDEV_POPULATION_METHOD_DESC
    EXTRINSICS_STDDEV_POPULATION_MODULE_ASC
    EXTRINSICS_STDDEV_POPULATION_MODULE_DESC
    EXTRINSICS_STDDEV_POPULATION_SIGNER_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_SIGNER_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_ARGUMENTS_ASC
    EXTRINSICS_STDDEV_SAMPLE_ARGUMENTS_DESC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    EXTRINSICS_STDDEV_SAMPLE_HASH_ASC
    EXTRINSICS_STDDEV_SAMPLE_HASH_DESC
    EXTRINSICS_STDDEV_SAMPLE_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_INDEX_ASC
    EXTRINSICS_STDDEV_SAMPLE_INDEX_DESC
    EXTRINSICS_STDDEV_SAMPLE_IS_SIGNED_ASC
    EXTRINSICS_STDDEV_SAMPLE_IS_SIGNED_DESC
    EXTRINSICS_STDDEV_SAMPLE_IS_SUCCESS_ASC
    EXTRINSICS_STDDEV_SAMPLE_IS_SUCCESS_DESC
    EXTRINSICS_STDDEV_SAMPLE_METHOD_ASC
    EXTRINSICS_STDDEV_SAMPLE_METHOD_DESC
    EXTRINSICS_STDDEV_SAMPLE_MODULE_ASC
    EXTRINSICS_STDDEV_SAMPLE_MODULE_DESC
    EXTRINSICS_STDDEV_SAMPLE_SIGNER_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_SIGNER_ID_DESC
    EXTRINSICS_SUM_ARGUMENTS_ASC
    EXTRINSICS_SUM_ARGUMENTS_DESC
    EXTRINSICS_SUM_BLOCK_ID_ASC
    EXTRINSICS_SUM_BLOCK_ID_DESC
    EXTRINSICS_SUM_BLOCK_NUMBER_ASC
    EXTRINSICS_SUM_BLOCK_NUMBER_DESC
    EXTRINSICS_SUM_HASH_ASC
    EXTRINSICS_SUM_HASH_DESC
    EXTRINSICS_SUM_ID_ASC
    EXTRINSICS_SUM_ID_DESC
    EXTRINSICS_SUM_INDEX_ASC
    EXTRINSICS_SUM_INDEX_DESC
    EXTRINSICS_SUM_IS_SIGNED_ASC
    EXTRINSICS_SUM_IS_SIGNED_DESC
    EXTRINSICS_SUM_IS_SUCCESS_ASC
    EXTRINSICS_SUM_IS_SUCCESS_DESC
    EXTRINSICS_SUM_METHOD_ASC
    EXTRINSICS_SUM_METHOD_DESC
    EXTRINSICS_SUM_MODULE_ASC
    EXTRINSICS_SUM_MODULE_DESC
    EXTRINSICS_SUM_SIGNER_ID_ASC
    EXTRINSICS_SUM_SIGNER_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_ARGUMENTS_ASC
    EXTRINSICS_VARIANCE_POPULATION_ARGUMENTS_DESC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    EXTRINSICS_VARIANCE_POPULATION_HASH_ASC
    EXTRINSICS_VARIANCE_POPULATION_HASH_DESC
    EXTRINSICS_VARIANCE_POPULATION_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_INDEX_ASC
    EXTRINSICS_VARIANCE_POPULATION_INDEX_DESC
    EXTRINSICS_VARIANCE_POPULATION_IS_SIGNED_ASC
    EXTRINSICS_VARIANCE_POPULATION_IS_SIGNED_DESC
    EXTRINSICS_VARIANCE_POPULATION_IS_SUCCESS_ASC
    EXTRINSICS_VARIANCE_POPULATION_IS_SUCCESS_DESC
    EXTRINSICS_VARIANCE_POPULATION_METHOD_ASC
    EXTRINSICS_VARIANCE_POPULATION_METHOD_DESC
    EXTRINSICS_VARIANCE_POPULATION_MODULE_ASC
    EXTRINSICS_VARIANCE_POPULATION_MODULE_DESC
    EXTRINSICS_VARIANCE_POPULATION_SIGNER_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_SIGNER_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_ARGUMENTS_ASC
    EXTRINSICS_VARIANCE_SAMPLE_ARGUMENTS_DESC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    EXTRINSICS_VARIANCE_SAMPLE_HASH_ASC
    EXTRINSICS_VARIANCE_SAMPLE_HASH_DESC
    EXTRINSICS_VARIANCE_SAMPLE_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_INDEX_ASC
    EXTRINSICS_VARIANCE_SAMPLE_INDEX_DESC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SIGNED_ASC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SIGNED_DESC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SUCCESS_ASC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SUCCESS_DESC
    EXTRINSICS_VARIANCE_SAMPLE_METHOD_ASC
    EXTRINSICS_VARIANCE_SAMPLE_METHOD_DESC
    EXTRINSICS_VARIANCE_SAMPLE_MODULE_ASC
    EXTRINSICS_VARIANCE_SAMPLE_MODULE_DESC
    EXTRINSICS_VARIANCE_SAMPLE_SIGNER_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_SIGNER_ID_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
}

"Grouping methods for `Authority` for usage during aggregation."
enum AuthoritiesGroupBy {
    BLOCK_ID
    CURRENT
    NEXT
}

"Methods to use when ordering `Authority`."
enum AuthoritiesOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    CURRENT_ASC
    CURRENT_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NEXT_ASC
    NEXT_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
}

"Grouping methods for `Block` for usage during aggregation."
enum BlocksGroupBy {
    EXTRINSICS_ROOT
    HASH
    PARENT_HASH
    SPEC_VERSION
    STATE_ROOT
    TIMESTAMP
    TIMESTAMP_TRUNCATED_TO_DAY
    TIMESTAMP_TRUNCATED_TO_HOUR
}

"Methods to use when ordering `Block`."
enum BlocksOrderBy {
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_AVERAGE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_COUNT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_COUNT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_DISTINCT_COUNT_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MAX_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_MIN_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_POPULATION_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_STDDEV_SAMPLE_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_SUM_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_POPULATION_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATED_AT_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATED_AT_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATE_AT_BLOCK_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATOR_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_CREATOR_ID_DESC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_ID_ASC
    ACCOUNTS_BY_CREATE_AT_BLOCK_ID_VARIANCE_SAMPLE_ID_DESC
    AUTHORITIES_AVERAGE_BLOCK_ID_ASC
    AUTHORITIES_AVERAGE_BLOCK_ID_DESC
    AUTHORITIES_AVERAGE_CURRENT_ASC
    AUTHORITIES_AVERAGE_CURRENT_DESC
    AUTHORITIES_AVERAGE_ID_ASC
    AUTHORITIES_AVERAGE_ID_DESC
    AUTHORITIES_AVERAGE_NEXT_ASC
    AUTHORITIES_AVERAGE_NEXT_DESC
    AUTHORITIES_COUNT_ASC
    AUTHORITIES_COUNT_DESC
    AUTHORITIES_DISTINCT_COUNT_BLOCK_ID_ASC
    AUTHORITIES_DISTINCT_COUNT_BLOCK_ID_DESC
    AUTHORITIES_DISTINCT_COUNT_CURRENT_ASC
    AUTHORITIES_DISTINCT_COUNT_CURRENT_DESC
    AUTHORITIES_DISTINCT_COUNT_ID_ASC
    AUTHORITIES_DISTINCT_COUNT_ID_DESC
    AUTHORITIES_DISTINCT_COUNT_NEXT_ASC
    AUTHORITIES_DISTINCT_COUNT_NEXT_DESC
    AUTHORITIES_MAX_BLOCK_ID_ASC
    AUTHORITIES_MAX_BLOCK_ID_DESC
    AUTHORITIES_MAX_CURRENT_ASC
    AUTHORITIES_MAX_CURRENT_DESC
    AUTHORITIES_MAX_ID_ASC
    AUTHORITIES_MAX_ID_DESC
    AUTHORITIES_MAX_NEXT_ASC
    AUTHORITIES_MAX_NEXT_DESC
    AUTHORITIES_MIN_BLOCK_ID_ASC
    AUTHORITIES_MIN_BLOCK_ID_DESC
    AUTHORITIES_MIN_CURRENT_ASC
    AUTHORITIES_MIN_CURRENT_DESC
    AUTHORITIES_MIN_ID_ASC
    AUTHORITIES_MIN_ID_DESC
    AUTHORITIES_MIN_NEXT_ASC
    AUTHORITIES_MIN_NEXT_DESC
    AUTHORITIES_STDDEV_POPULATION_BLOCK_ID_ASC
    AUTHORITIES_STDDEV_POPULATION_BLOCK_ID_DESC
    AUTHORITIES_STDDEV_POPULATION_CURRENT_ASC
    AUTHORITIES_STDDEV_POPULATION_CURRENT_DESC
    AUTHORITIES_STDDEV_POPULATION_ID_ASC
    AUTHORITIES_STDDEV_POPULATION_ID_DESC
    AUTHORITIES_STDDEV_POPULATION_NEXT_ASC
    AUTHORITIES_STDDEV_POPULATION_NEXT_DESC
    AUTHORITIES_STDDEV_SAMPLE_BLOCK_ID_ASC
    AUTHORITIES_STDDEV_SAMPLE_BLOCK_ID_DESC
    AUTHORITIES_STDDEV_SAMPLE_CURRENT_ASC
    AUTHORITIES_STDDEV_SAMPLE_CURRENT_DESC
    AUTHORITIES_STDDEV_SAMPLE_ID_ASC
    AUTHORITIES_STDDEV_SAMPLE_ID_DESC
    AUTHORITIES_STDDEV_SAMPLE_NEXT_ASC
    AUTHORITIES_STDDEV_SAMPLE_NEXT_DESC
    AUTHORITIES_SUM_BLOCK_ID_ASC
    AUTHORITIES_SUM_BLOCK_ID_DESC
    AUTHORITIES_SUM_CURRENT_ASC
    AUTHORITIES_SUM_CURRENT_DESC
    AUTHORITIES_SUM_ID_ASC
    AUTHORITIES_SUM_ID_DESC
    AUTHORITIES_SUM_NEXT_ASC
    AUTHORITIES_SUM_NEXT_DESC
    AUTHORITIES_VARIANCE_POPULATION_BLOCK_ID_ASC
    AUTHORITIES_VARIANCE_POPULATION_BLOCK_ID_DESC
    AUTHORITIES_VARIANCE_POPULATION_CURRENT_ASC
    AUTHORITIES_VARIANCE_POPULATION_CURRENT_DESC
    AUTHORITIES_VARIANCE_POPULATION_ID_ASC
    AUTHORITIES_VARIANCE_POPULATION_ID_DESC
    AUTHORITIES_VARIANCE_POPULATION_NEXT_ASC
    AUTHORITIES_VARIANCE_POPULATION_NEXT_DESC
    AUTHORITIES_VARIANCE_SAMPLE_BLOCK_ID_ASC
    AUTHORITIES_VARIANCE_SAMPLE_BLOCK_ID_DESC
    AUTHORITIES_VARIANCE_SAMPLE_CURRENT_ASC
    AUTHORITIES_VARIANCE_SAMPLE_CURRENT_DESC
    AUTHORITIES_VARIANCE_SAMPLE_ID_ASC
    AUTHORITIES_VARIANCE_SAMPLE_ID_DESC
    AUTHORITIES_VARIANCE_SAMPLE_NEXT_ASC
    AUTHORITIES_VARIANCE_SAMPLE_NEXT_DESC
    EVENTS_AVERAGE_ARGUMENTS_ASC
    EVENTS_AVERAGE_ARGUMENTS_DESC
    EVENTS_AVERAGE_BLOCK_ID_ASC
    EVENTS_AVERAGE_BLOCK_ID_DESC
    EVENTS_AVERAGE_BLOCK_NUMBER_ASC
    EVENTS_AVERAGE_BLOCK_NUMBER_DESC
    EVENTS_AVERAGE_DATA_ASC
    EVENTS_AVERAGE_DATA_DESC
    EVENTS_AVERAGE_DOCS_ASC
    EVENTS_AVERAGE_DOCS_DESC
    EVENTS_AVERAGE_EXTRINSIC_ID_ASC
    EVENTS_AVERAGE_EXTRINSIC_ID_DESC
    EVENTS_AVERAGE_ID_ASC
    EVENTS_AVERAGE_ID_DESC
    EVENTS_AVERAGE_INDEX_ASC
    EVENTS_AVERAGE_INDEX_DESC
    EVENTS_AVERAGE_METHOD_ASC
    EVENTS_AVERAGE_METHOD_DESC
    EVENTS_AVERAGE_MODULE_ASC
    EVENTS_AVERAGE_MODULE_DESC
    EVENTS_AVERAGE_TIMESTAMP_ASC
    EVENTS_AVERAGE_TIMESTAMP_DESC
    EVENTS_COUNT_ASC
    EVENTS_COUNT_DESC
    EVENTS_DISTINCT_COUNT_ARGUMENTS_ASC
    EVENTS_DISTINCT_COUNT_ARGUMENTS_DESC
    EVENTS_DISTINCT_COUNT_BLOCK_ID_ASC
    EVENTS_DISTINCT_COUNT_BLOCK_ID_DESC
    EVENTS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    EVENTS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    EVENTS_DISTINCT_COUNT_DATA_ASC
    EVENTS_DISTINCT_COUNT_DATA_DESC
    EVENTS_DISTINCT_COUNT_DOCS_ASC
    EVENTS_DISTINCT_COUNT_DOCS_DESC
    EVENTS_DISTINCT_COUNT_EXTRINSIC_ID_ASC
    EVENTS_DISTINCT_COUNT_EXTRINSIC_ID_DESC
    EVENTS_DISTINCT_COUNT_ID_ASC
    EVENTS_DISTINCT_COUNT_ID_DESC
    EVENTS_DISTINCT_COUNT_INDEX_ASC
    EVENTS_DISTINCT_COUNT_INDEX_DESC
    EVENTS_DISTINCT_COUNT_METHOD_ASC
    EVENTS_DISTINCT_COUNT_METHOD_DESC
    EVENTS_DISTINCT_COUNT_MODULE_ASC
    EVENTS_DISTINCT_COUNT_MODULE_DESC
    EVENTS_DISTINCT_COUNT_TIMESTAMP_ASC
    EVENTS_DISTINCT_COUNT_TIMESTAMP_DESC
    EVENTS_MAX_ARGUMENTS_ASC
    EVENTS_MAX_ARGUMENTS_DESC
    EVENTS_MAX_BLOCK_ID_ASC
    EVENTS_MAX_BLOCK_ID_DESC
    EVENTS_MAX_BLOCK_NUMBER_ASC
    EVENTS_MAX_BLOCK_NUMBER_DESC
    EVENTS_MAX_DATA_ASC
    EVENTS_MAX_DATA_DESC
    EVENTS_MAX_DOCS_ASC
    EVENTS_MAX_DOCS_DESC
    EVENTS_MAX_EXTRINSIC_ID_ASC
    EVENTS_MAX_EXTRINSIC_ID_DESC
    EVENTS_MAX_ID_ASC
    EVENTS_MAX_ID_DESC
    EVENTS_MAX_INDEX_ASC
    EVENTS_MAX_INDEX_DESC
    EVENTS_MAX_METHOD_ASC
    EVENTS_MAX_METHOD_DESC
    EVENTS_MAX_MODULE_ASC
    EVENTS_MAX_MODULE_DESC
    EVENTS_MAX_TIMESTAMP_ASC
    EVENTS_MAX_TIMESTAMP_DESC
    EVENTS_MIN_ARGUMENTS_ASC
    EVENTS_MIN_ARGUMENTS_DESC
    EVENTS_MIN_BLOCK_ID_ASC
    EVENTS_MIN_BLOCK_ID_DESC
    EVENTS_MIN_BLOCK_NUMBER_ASC
    EVENTS_MIN_BLOCK_NUMBER_DESC
    EVENTS_MIN_DATA_ASC
    EVENTS_MIN_DATA_DESC
    EVENTS_MIN_DOCS_ASC
    EVENTS_MIN_DOCS_DESC
    EVENTS_MIN_EXTRINSIC_ID_ASC
    EVENTS_MIN_EXTRINSIC_ID_DESC
    EVENTS_MIN_ID_ASC
    EVENTS_MIN_ID_DESC
    EVENTS_MIN_INDEX_ASC
    EVENTS_MIN_INDEX_DESC
    EVENTS_MIN_METHOD_ASC
    EVENTS_MIN_METHOD_DESC
    EVENTS_MIN_MODULE_ASC
    EVENTS_MIN_MODULE_DESC
    EVENTS_MIN_TIMESTAMP_ASC
    EVENTS_MIN_TIMESTAMP_DESC
    EVENTS_STDDEV_POPULATION_ARGUMENTS_ASC
    EVENTS_STDDEV_POPULATION_ARGUMENTS_DESC
    EVENTS_STDDEV_POPULATION_BLOCK_ID_ASC
    EVENTS_STDDEV_POPULATION_BLOCK_ID_DESC
    EVENTS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    EVENTS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    EVENTS_STDDEV_POPULATION_DATA_ASC
    EVENTS_STDDEV_POPULATION_DATA_DESC
    EVENTS_STDDEV_POPULATION_DOCS_ASC
    EVENTS_STDDEV_POPULATION_DOCS_DESC
    EVENTS_STDDEV_POPULATION_EXTRINSIC_ID_ASC
    EVENTS_STDDEV_POPULATION_EXTRINSIC_ID_DESC
    EVENTS_STDDEV_POPULATION_ID_ASC
    EVENTS_STDDEV_POPULATION_ID_DESC
    EVENTS_STDDEV_POPULATION_INDEX_ASC
    EVENTS_STDDEV_POPULATION_INDEX_DESC
    EVENTS_STDDEV_POPULATION_METHOD_ASC
    EVENTS_STDDEV_POPULATION_METHOD_DESC
    EVENTS_STDDEV_POPULATION_MODULE_ASC
    EVENTS_STDDEV_POPULATION_MODULE_DESC
    EVENTS_STDDEV_POPULATION_TIMESTAMP_ASC
    EVENTS_STDDEV_POPULATION_TIMESTAMP_DESC
    EVENTS_STDDEV_SAMPLE_ARGUMENTS_ASC
    EVENTS_STDDEV_SAMPLE_ARGUMENTS_DESC
    EVENTS_STDDEV_SAMPLE_BLOCK_ID_ASC
    EVENTS_STDDEV_SAMPLE_BLOCK_ID_DESC
    EVENTS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    EVENTS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    EVENTS_STDDEV_SAMPLE_DATA_ASC
    EVENTS_STDDEV_SAMPLE_DATA_DESC
    EVENTS_STDDEV_SAMPLE_DOCS_ASC
    EVENTS_STDDEV_SAMPLE_DOCS_DESC
    EVENTS_STDDEV_SAMPLE_EXTRINSIC_ID_ASC
    EVENTS_STDDEV_SAMPLE_EXTRINSIC_ID_DESC
    EVENTS_STDDEV_SAMPLE_ID_ASC
    EVENTS_STDDEV_SAMPLE_ID_DESC
    EVENTS_STDDEV_SAMPLE_INDEX_ASC
    EVENTS_STDDEV_SAMPLE_INDEX_DESC
    EVENTS_STDDEV_SAMPLE_METHOD_ASC
    EVENTS_STDDEV_SAMPLE_METHOD_DESC
    EVENTS_STDDEV_SAMPLE_MODULE_ASC
    EVENTS_STDDEV_SAMPLE_MODULE_DESC
    EVENTS_STDDEV_SAMPLE_TIMESTAMP_ASC
    EVENTS_STDDEV_SAMPLE_TIMESTAMP_DESC
    EVENTS_SUM_ARGUMENTS_ASC
    EVENTS_SUM_ARGUMENTS_DESC
    EVENTS_SUM_BLOCK_ID_ASC
    EVENTS_SUM_BLOCK_ID_DESC
    EVENTS_SUM_BLOCK_NUMBER_ASC
    EVENTS_SUM_BLOCK_NUMBER_DESC
    EVENTS_SUM_DATA_ASC
    EVENTS_SUM_DATA_DESC
    EVENTS_SUM_DOCS_ASC
    EVENTS_SUM_DOCS_DESC
    EVENTS_SUM_EXTRINSIC_ID_ASC
    EVENTS_SUM_EXTRINSIC_ID_DESC
    EVENTS_SUM_ID_ASC
    EVENTS_SUM_ID_DESC
    EVENTS_SUM_INDEX_ASC
    EVENTS_SUM_INDEX_DESC
    EVENTS_SUM_METHOD_ASC
    EVENTS_SUM_METHOD_DESC
    EVENTS_SUM_MODULE_ASC
    EVENTS_SUM_MODULE_DESC
    EVENTS_SUM_TIMESTAMP_ASC
    EVENTS_SUM_TIMESTAMP_DESC
    EVENTS_VARIANCE_POPULATION_ARGUMENTS_ASC
    EVENTS_VARIANCE_POPULATION_ARGUMENTS_DESC
    EVENTS_VARIANCE_POPULATION_BLOCK_ID_ASC
    EVENTS_VARIANCE_POPULATION_BLOCK_ID_DESC
    EVENTS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    EVENTS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    EVENTS_VARIANCE_POPULATION_DATA_ASC
    EVENTS_VARIANCE_POPULATION_DATA_DESC
    EVENTS_VARIANCE_POPULATION_DOCS_ASC
    EVENTS_VARIANCE_POPULATION_DOCS_DESC
    EVENTS_VARIANCE_POPULATION_EXTRINSIC_ID_ASC
    EVENTS_VARIANCE_POPULATION_EXTRINSIC_ID_DESC
    EVENTS_VARIANCE_POPULATION_ID_ASC
    EVENTS_VARIANCE_POPULATION_ID_DESC
    EVENTS_VARIANCE_POPULATION_INDEX_ASC
    EVENTS_VARIANCE_POPULATION_INDEX_DESC
    EVENTS_VARIANCE_POPULATION_METHOD_ASC
    EVENTS_VARIANCE_POPULATION_METHOD_DESC
    EVENTS_VARIANCE_POPULATION_MODULE_ASC
    EVENTS_VARIANCE_POPULATION_MODULE_DESC
    EVENTS_VARIANCE_POPULATION_TIMESTAMP_ASC
    EVENTS_VARIANCE_POPULATION_TIMESTAMP_DESC
    EVENTS_VARIANCE_SAMPLE_ARGUMENTS_ASC
    EVENTS_VARIANCE_SAMPLE_ARGUMENTS_DESC
    EVENTS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    EVENTS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    EVENTS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    EVENTS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    EVENTS_VARIANCE_SAMPLE_DATA_ASC
    EVENTS_VARIANCE_SAMPLE_DATA_DESC
    EVENTS_VARIANCE_SAMPLE_DOCS_ASC
    EVENTS_VARIANCE_SAMPLE_DOCS_DESC
    EVENTS_VARIANCE_SAMPLE_EXTRINSIC_ID_ASC
    EVENTS_VARIANCE_SAMPLE_EXTRINSIC_ID_DESC
    EVENTS_VARIANCE_SAMPLE_ID_ASC
    EVENTS_VARIANCE_SAMPLE_ID_DESC
    EVENTS_VARIANCE_SAMPLE_INDEX_ASC
    EVENTS_VARIANCE_SAMPLE_INDEX_DESC
    EVENTS_VARIANCE_SAMPLE_METHOD_ASC
    EVENTS_VARIANCE_SAMPLE_METHOD_DESC
    EVENTS_VARIANCE_SAMPLE_MODULE_ASC
    EVENTS_VARIANCE_SAMPLE_MODULE_DESC
    EVENTS_VARIANCE_SAMPLE_TIMESTAMP_ASC
    EVENTS_VARIANCE_SAMPLE_TIMESTAMP_DESC
    EXTRINSICS_AVERAGE_ARGUMENTS_ASC
    EXTRINSICS_AVERAGE_ARGUMENTS_DESC
    EXTRINSICS_AVERAGE_BLOCK_ID_ASC
    EXTRINSICS_AVERAGE_BLOCK_ID_DESC
    EXTRINSICS_AVERAGE_BLOCK_NUMBER_ASC
    EXTRINSICS_AVERAGE_BLOCK_NUMBER_DESC
    EXTRINSICS_AVERAGE_HASH_ASC
    EXTRINSICS_AVERAGE_HASH_DESC
    EXTRINSICS_AVERAGE_ID_ASC
    EXTRINSICS_AVERAGE_ID_DESC
    EXTRINSICS_AVERAGE_INDEX_ASC
    EXTRINSICS_AVERAGE_INDEX_DESC
    EXTRINSICS_AVERAGE_IS_SIGNED_ASC
    EXTRINSICS_AVERAGE_IS_SIGNED_DESC
    EXTRINSICS_AVERAGE_IS_SUCCESS_ASC
    EXTRINSICS_AVERAGE_IS_SUCCESS_DESC
    EXTRINSICS_AVERAGE_METHOD_ASC
    EXTRINSICS_AVERAGE_METHOD_DESC
    EXTRINSICS_AVERAGE_MODULE_ASC
    EXTRINSICS_AVERAGE_MODULE_DESC
    EXTRINSICS_AVERAGE_SIGNER_ID_ASC
    EXTRINSICS_AVERAGE_SIGNER_ID_DESC
    EXTRINSICS_COUNT_ASC
    EXTRINSICS_COUNT_DESC
    EXTRINSICS_DISTINCT_COUNT_ARGUMENTS_ASC
    EXTRINSICS_DISTINCT_COUNT_ARGUMENTS_DESC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_ID_DESC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    EXTRINSICS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    EXTRINSICS_DISTINCT_COUNT_HASH_ASC
    EXTRINSICS_DISTINCT_COUNT_HASH_DESC
    EXTRINSICS_DISTINCT_COUNT_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_ID_DESC
    EXTRINSICS_DISTINCT_COUNT_INDEX_ASC
    EXTRINSICS_DISTINCT_COUNT_INDEX_DESC
    EXTRINSICS_DISTINCT_COUNT_IS_SIGNED_ASC
    EXTRINSICS_DISTINCT_COUNT_IS_SIGNED_DESC
    EXTRINSICS_DISTINCT_COUNT_IS_SUCCESS_ASC
    EXTRINSICS_DISTINCT_COUNT_IS_SUCCESS_DESC
    EXTRINSICS_DISTINCT_COUNT_METHOD_ASC
    EXTRINSICS_DISTINCT_COUNT_METHOD_DESC
    EXTRINSICS_DISTINCT_COUNT_MODULE_ASC
    EXTRINSICS_DISTINCT_COUNT_MODULE_DESC
    EXTRINSICS_DISTINCT_COUNT_SIGNER_ID_ASC
    EXTRINSICS_DISTINCT_COUNT_SIGNER_ID_DESC
    EXTRINSICS_MAX_ARGUMENTS_ASC
    EXTRINSICS_MAX_ARGUMENTS_DESC
    EXTRINSICS_MAX_BLOCK_ID_ASC
    EXTRINSICS_MAX_BLOCK_ID_DESC
    EXTRINSICS_MAX_BLOCK_NUMBER_ASC
    EXTRINSICS_MAX_BLOCK_NUMBER_DESC
    EXTRINSICS_MAX_HASH_ASC
    EXTRINSICS_MAX_HASH_DESC
    EXTRINSICS_MAX_ID_ASC
    EXTRINSICS_MAX_ID_DESC
    EXTRINSICS_MAX_INDEX_ASC
    EXTRINSICS_MAX_INDEX_DESC
    EXTRINSICS_MAX_IS_SIGNED_ASC
    EXTRINSICS_MAX_IS_SIGNED_DESC
    EXTRINSICS_MAX_IS_SUCCESS_ASC
    EXTRINSICS_MAX_IS_SUCCESS_DESC
    EXTRINSICS_MAX_METHOD_ASC
    EXTRINSICS_MAX_METHOD_DESC
    EXTRINSICS_MAX_MODULE_ASC
    EXTRINSICS_MAX_MODULE_DESC
    EXTRINSICS_MAX_SIGNER_ID_ASC
    EXTRINSICS_MAX_SIGNER_ID_DESC
    EXTRINSICS_MIN_ARGUMENTS_ASC
    EXTRINSICS_MIN_ARGUMENTS_DESC
    EXTRINSICS_MIN_BLOCK_ID_ASC
    EXTRINSICS_MIN_BLOCK_ID_DESC
    EXTRINSICS_MIN_BLOCK_NUMBER_ASC
    EXTRINSICS_MIN_BLOCK_NUMBER_DESC
    EXTRINSICS_MIN_HASH_ASC
    EXTRINSICS_MIN_HASH_DESC
    EXTRINSICS_MIN_ID_ASC
    EXTRINSICS_MIN_ID_DESC
    EXTRINSICS_MIN_INDEX_ASC
    EXTRINSICS_MIN_INDEX_DESC
    EXTRINSICS_MIN_IS_SIGNED_ASC
    EXTRINSICS_MIN_IS_SIGNED_DESC
    EXTRINSICS_MIN_IS_SUCCESS_ASC
    EXTRINSICS_MIN_IS_SUCCESS_DESC
    EXTRINSICS_MIN_METHOD_ASC
    EXTRINSICS_MIN_METHOD_DESC
    EXTRINSICS_MIN_MODULE_ASC
    EXTRINSICS_MIN_MODULE_DESC
    EXTRINSICS_MIN_SIGNER_ID_ASC
    EXTRINSICS_MIN_SIGNER_ID_DESC
    EXTRINSICS_ROOT_ASC
    EXTRINSICS_ROOT_DESC
    EXTRINSICS_STDDEV_POPULATION_ARGUMENTS_ASC
    EXTRINSICS_STDDEV_POPULATION_ARGUMENTS_DESC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    EXTRINSICS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    EXTRINSICS_STDDEV_POPULATION_HASH_ASC
    EXTRINSICS_STDDEV_POPULATION_HASH_DESC
    EXTRINSICS_STDDEV_POPULATION_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_ID_DESC
    EXTRINSICS_STDDEV_POPULATION_INDEX_ASC
    EXTRINSICS_STDDEV_POPULATION_INDEX_DESC
    EXTRINSICS_STDDEV_POPULATION_IS_SIGNED_ASC
    EXTRINSICS_STDDEV_POPULATION_IS_SIGNED_DESC
    EXTRINSICS_STDDEV_POPULATION_IS_SUCCESS_ASC
    EXTRINSICS_STDDEV_POPULATION_IS_SUCCESS_DESC
    EXTRINSICS_STDDEV_POPULATION_METHOD_ASC
    EXTRINSICS_STDDEV_POPULATION_METHOD_DESC
    EXTRINSICS_STDDEV_POPULATION_MODULE_ASC
    EXTRINSICS_STDDEV_POPULATION_MODULE_DESC
    EXTRINSICS_STDDEV_POPULATION_SIGNER_ID_ASC
    EXTRINSICS_STDDEV_POPULATION_SIGNER_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_ARGUMENTS_ASC
    EXTRINSICS_STDDEV_SAMPLE_ARGUMENTS_DESC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    EXTRINSICS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    EXTRINSICS_STDDEV_SAMPLE_HASH_ASC
    EXTRINSICS_STDDEV_SAMPLE_HASH_DESC
    EXTRINSICS_STDDEV_SAMPLE_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_ID_DESC
    EXTRINSICS_STDDEV_SAMPLE_INDEX_ASC
    EXTRINSICS_STDDEV_SAMPLE_INDEX_DESC
    EXTRINSICS_STDDEV_SAMPLE_IS_SIGNED_ASC
    EXTRINSICS_STDDEV_SAMPLE_IS_SIGNED_DESC
    EXTRINSICS_STDDEV_SAMPLE_IS_SUCCESS_ASC
    EXTRINSICS_STDDEV_SAMPLE_IS_SUCCESS_DESC
    EXTRINSICS_STDDEV_SAMPLE_METHOD_ASC
    EXTRINSICS_STDDEV_SAMPLE_METHOD_DESC
    EXTRINSICS_STDDEV_SAMPLE_MODULE_ASC
    EXTRINSICS_STDDEV_SAMPLE_MODULE_DESC
    EXTRINSICS_STDDEV_SAMPLE_SIGNER_ID_ASC
    EXTRINSICS_STDDEV_SAMPLE_SIGNER_ID_DESC
    EXTRINSICS_SUM_ARGUMENTS_ASC
    EXTRINSICS_SUM_ARGUMENTS_DESC
    EXTRINSICS_SUM_BLOCK_ID_ASC
    EXTRINSICS_SUM_BLOCK_ID_DESC
    EXTRINSICS_SUM_BLOCK_NUMBER_ASC
    EXTRINSICS_SUM_BLOCK_NUMBER_DESC
    EXTRINSICS_SUM_HASH_ASC
    EXTRINSICS_SUM_HASH_DESC
    EXTRINSICS_SUM_ID_ASC
    EXTRINSICS_SUM_ID_DESC
    EXTRINSICS_SUM_INDEX_ASC
    EXTRINSICS_SUM_INDEX_DESC
    EXTRINSICS_SUM_IS_SIGNED_ASC
    EXTRINSICS_SUM_IS_SIGNED_DESC
    EXTRINSICS_SUM_IS_SUCCESS_ASC
    EXTRINSICS_SUM_IS_SUCCESS_DESC
    EXTRINSICS_SUM_METHOD_ASC
    EXTRINSICS_SUM_METHOD_DESC
    EXTRINSICS_SUM_MODULE_ASC
    EXTRINSICS_SUM_MODULE_DESC
    EXTRINSICS_SUM_SIGNER_ID_ASC
    EXTRINSICS_SUM_SIGNER_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_ARGUMENTS_ASC
    EXTRINSICS_VARIANCE_POPULATION_ARGUMENTS_DESC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    EXTRINSICS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    EXTRINSICS_VARIANCE_POPULATION_HASH_ASC
    EXTRINSICS_VARIANCE_POPULATION_HASH_DESC
    EXTRINSICS_VARIANCE_POPULATION_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_ID_DESC
    EXTRINSICS_VARIANCE_POPULATION_INDEX_ASC
    EXTRINSICS_VARIANCE_POPULATION_INDEX_DESC
    EXTRINSICS_VARIANCE_POPULATION_IS_SIGNED_ASC
    EXTRINSICS_VARIANCE_POPULATION_IS_SIGNED_DESC
    EXTRINSICS_VARIANCE_POPULATION_IS_SUCCESS_ASC
    EXTRINSICS_VARIANCE_POPULATION_IS_SUCCESS_DESC
    EXTRINSICS_VARIANCE_POPULATION_METHOD_ASC
    EXTRINSICS_VARIANCE_POPULATION_METHOD_DESC
    EXTRINSICS_VARIANCE_POPULATION_MODULE_ASC
    EXTRINSICS_VARIANCE_POPULATION_MODULE_DESC
    EXTRINSICS_VARIANCE_POPULATION_SIGNER_ID_ASC
    EXTRINSICS_VARIANCE_POPULATION_SIGNER_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_ARGUMENTS_ASC
    EXTRINSICS_VARIANCE_SAMPLE_ARGUMENTS_DESC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    EXTRINSICS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    EXTRINSICS_VARIANCE_SAMPLE_HASH_ASC
    EXTRINSICS_VARIANCE_SAMPLE_HASH_DESC
    EXTRINSICS_VARIANCE_SAMPLE_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_ID_DESC
    EXTRINSICS_VARIANCE_SAMPLE_INDEX_ASC
    EXTRINSICS_VARIANCE_SAMPLE_INDEX_DESC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SIGNED_ASC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SIGNED_DESC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SUCCESS_ASC
    EXTRINSICS_VARIANCE_SAMPLE_IS_SUCCESS_DESC
    EXTRINSICS_VARIANCE_SAMPLE_METHOD_ASC
    EXTRINSICS_VARIANCE_SAMPLE_METHOD_DESC
    EXTRINSICS_VARIANCE_SAMPLE_MODULE_ASC
    EXTRINSICS_VARIANCE_SAMPLE_MODULE_DESC
    EXTRINSICS_VARIANCE_SAMPLE_SIGNER_ID_ASC
    EXTRINSICS_VARIANCE_SAMPLE_SIGNER_ID_DESC
    HASH_ASC
    HASH_DESC
    ID_ASC
    ID_DESC
    KEYGEN_THRESHOLDS_AVERAGE_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_AVERAGE_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_AVERAGE_CURRENT_ASC
    KEYGEN_THRESHOLDS_AVERAGE_CURRENT_DESC
    KEYGEN_THRESHOLDS_AVERAGE_ID_ASC
    KEYGEN_THRESHOLDS_AVERAGE_ID_DESC
    KEYGEN_THRESHOLDS_AVERAGE_NEXT_ASC
    KEYGEN_THRESHOLDS_AVERAGE_NEXT_DESC
    KEYGEN_THRESHOLDS_AVERAGE_PENDING_ASC
    KEYGEN_THRESHOLDS_AVERAGE_PENDING_DESC
    KEYGEN_THRESHOLDS_COUNT_ASC
    KEYGEN_THRESHOLDS_COUNT_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_CURRENT_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_CURRENT_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_ID_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_ID_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_NEXT_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_NEXT_DESC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_PENDING_ASC
    KEYGEN_THRESHOLDS_DISTINCT_COUNT_PENDING_DESC
    KEYGEN_THRESHOLDS_MAX_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_MAX_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_MAX_CURRENT_ASC
    KEYGEN_THRESHOLDS_MAX_CURRENT_DESC
    KEYGEN_THRESHOLDS_MAX_ID_ASC
    KEYGEN_THRESHOLDS_MAX_ID_DESC
    KEYGEN_THRESHOLDS_MAX_NEXT_ASC
    KEYGEN_THRESHOLDS_MAX_NEXT_DESC
    KEYGEN_THRESHOLDS_MAX_PENDING_ASC
    KEYGEN_THRESHOLDS_MAX_PENDING_DESC
    KEYGEN_THRESHOLDS_MIN_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_MIN_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_MIN_CURRENT_ASC
    KEYGEN_THRESHOLDS_MIN_CURRENT_DESC
    KEYGEN_THRESHOLDS_MIN_ID_ASC
    KEYGEN_THRESHOLDS_MIN_ID_DESC
    KEYGEN_THRESHOLDS_MIN_NEXT_ASC
    KEYGEN_THRESHOLDS_MIN_NEXT_DESC
    KEYGEN_THRESHOLDS_MIN_PENDING_ASC
    KEYGEN_THRESHOLDS_MIN_PENDING_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_CURRENT_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_CURRENT_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_ID_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_ID_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_NEXT_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_NEXT_DESC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_PENDING_ASC
    KEYGEN_THRESHOLDS_STDDEV_POPULATION_PENDING_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_CURRENT_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_CURRENT_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_ID_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_ID_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_NEXT_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_NEXT_DESC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_PENDING_ASC
    KEYGEN_THRESHOLDS_STDDEV_SAMPLE_PENDING_DESC
    KEYGEN_THRESHOLDS_SUM_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_SUM_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_SUM_CURRENT_ASC
    KEYGEN_THRESHOLDS_SUM_CURRENT_DESC
    KEYGEN_THRESHOLDS_SUM_ID_ASC
    KEYGEN_THRESHOLDS_SUM_ID_DESC
    KEYGEN_THRESHOLDS_SUM_NEXT_ASC
    KEYGEN_THRESHOLDS_SUM_NEXT_DESC
    KEYGEN_THRESHOLDS_SUM_PENDING_ASC
    KEYGEN_THRESHOLDS_SUM_PENDING_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_CURRENT_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_CURRENT_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_ID_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_ID_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_NEXT_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_NEXT_DESC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_PENDING_ASC
    KEYGEN_THRESHOLDS_VARIANCE_POPULATION_PENDING_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_CURRENT_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_CURRENT_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_ID_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_ID_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_NEXT_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_NEXT_DESC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_PENDING_ASC
    KEYGEN_THRESHOLDS_VARIANCE_SAMPLE_PENDING_DESC
    NATURAL
    NUMBER_ASC
    NUMBER_DESC
    PARENT_HASH_ASC
    PARENT_HASH_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSAL_COUNTERS_AVERAGE_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_AVERAGE_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_AVERAGE_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_AVERAGE_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_AVERAGE_ID_ASC
    PROPOSAL_COUNTERS_AVERAGE_ID_DESC
    PROPOSAL_COUNTERS_AVERAGE_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_AVERAGE_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_AVERAGE_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_AVERAGE_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_AVERAGE_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_AVERAGE_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_AVERAGE_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_AVERAGE_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_AVERAGE_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_AVERAGE_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_COUNT_ASC
    PROPOSAL_COUNTERS_COUNT_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_ID_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_ID_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_DISTINCT_COUNT_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_MAX_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_MAX_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_MAX_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_MAX_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_MAX_ID_ASC
    PROPOSAL_COUNTERS_MAX_ID_DESC
    PROPOSAL_COUNTERS_MAX_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_MAX_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_MAX_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_MAX_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_MAX_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_MAX_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_MAX_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_MAX_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_MAX_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_MAX_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_MIN_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_MIN_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_MIN_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_MIN_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_MIN_ID_ASC
    PROPOSAL_COUNTERS_MIN_ID_DESC
    PROPOSAL_COUNTERS_MIN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_MIN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_MIN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_MIN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_MIN_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_MIN_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_MIN_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_MIN_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_MIN_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_MIN_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_ID_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_ID_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_POPULATION_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_ID_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_ID_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_STDDEV_SAMPLE_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_SUM_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_SUM_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_SUM_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_SUM_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_SUM_ID_ASC
    PROPOSAL_COUNTERS_SUM_ID_DESC
    PROPOSAL_COUNTERS_SUM_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_SUM_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_SUM_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_SUM_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_SUM_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_SUM_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_SUM_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_SUM_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_SUM_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_SUM_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_ID_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_ID_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_POPULATION_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_ID_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_ID_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_STATUS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_STATUS_MAP_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_UN_SIGNED_PROPOSALS_COUNT_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_UN_SIGNED_PROPOSALS_COUNT_DESC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_UN_SIGNED_PROPOSALS_MAP_ASC
    PROPOSAL_COUNTERS_VARIANCE_SAMPLE_UN_SIGNED_PROPOSALS_MAP_DESC
    PROPOSAL_ITEMS_AVERAGE_BLOCK_ID_ASC
    PROPOSAL_ITEMS_AVERAGE_BLOCK_ID_DESC
    PROPOSAL_ITEMS_AVERAGE_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_AVERAGE_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_AVERAGE_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_AVERAGE_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_AVERAGE_DATA_ASC
    PROPOSAL_ITEMS_AVERAGE_DATA_DESC
    PROPOSAL_ITEMS_AVERAGE_ID_ASC
    PROPOSAL_ITEMS_AVERAGE_ID_DESC
    PROPOSAL_ITEMS_AVERAGE_NONCE_ASC
    PROPOSAL_ITEMS_AVERAGE_NONCE_DESC
    PROPOSAL_ITEMS_AVERAGE_REMOVED_ASC
    PROPOSAL_ITEMS_AVERAGE_REMOVED_DESC
    PROPOSAL_ITEMS_AVERAGE_SIGNATURE_ASC
    PROPOSAL_ITEMS_AVERAGE_SIGNATURE_DESC
    PROPOSAL_ITEMS_AVERAGE_STATUS_ASC
    PROPOSAL_ITEMS_AVERAGE_STATUS_DESC
    PROPOSAL_ITEMS_AVERAGE_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_AVERAGE_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_AVERAGE_TYPE_ASC
    PROPOSAL_ITEMS_AVERAGE_TYPE_DESC
    PROPOSAL_ITEMS_AVERAGE_VOTES_ASC
    PROPOSAL_ITEMS_AVERAGE_VOTES_DESC
    PROPOSAL_ITEMS_COUNT_ASC
    PROPOSAL_ITEMS_COUNT_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_DATA_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_DATA_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_ID_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_ID_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_NONCE_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_NONCE_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_REMOVED_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_REMOVED_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_SIGNATURE_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_SIGNATURE_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_STATUS_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_STATUS_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_TYPE_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_TYPE_DESC
    PROPOSAL_ITEMS_DISTINCT_COUNT_VOTES_ASC
    PROPOSAL_ITEMS_DISTINCT_COUNT_VOTES_DESC
    PROPOSAL_ITEMS_MAX_BLOCK_ID_ASC
    PROPOSAL_ITEMS_MAX_BLOCK_ID_DESC
    PROPOSAL_ITEMS_MAX_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_MAX_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_MAX_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_MAX_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_MAX_DATA_ASC
    PROPOSAL_ITEMS_MAX_DATA_DESC
    PROPOSAL_ITEMS_MAX_ID_ASC
    PROPOSAL_ITEMS_MAX_ID_DESC
    PROPOSAL_ITEMS_MAX_NONCE_ASC
    PROPOSAL_ITEMS_MAX_NONCE_DESC
    PROPOSAL_ITEMS_MAX_REMOVED_ASC
    PROPOSAL_ITEMS_MAX_REMOVED_DESC
    PROPOSAL_ITEMS_MAX_SIGNATURE_ASC
    PROPOSAL_ITEMS_MAX_SIGNATURE_DESC
    PROPOSAL_ITEMS_MAX_STATUS_ASC
    PROPOSAL_ITEMS_MAX_STATUS_DESC
    PROPOSAL_ITEMS_MAX_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_MAX_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_MAX_TYPE_ASC
    PROPOSAL_ITEMS_MAX_TYPE_DESC
    PROPOSAL_ITEMS_MAX_VOTES_ASC
    PROPOSAL_ITEMS_MAX_VOTES_DESC
    PROPOSAL_ITEMS_MIN_BLOCK_ID_ASC
    PROPOSAL_ITEMS_MIN_BLOCK_ID_DESC
    PROPOSAL_ITEMS_MIN_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_MIN_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_MIN_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_MIN_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_MIN_DATA_ASC
    PROPOSAL_ITEMS_MIN_DATA_DESC
    PROPOSAL_ITEMS_MIN_ID_ASC
    PROPOSAL_ITEMS_MIN_ID_DESC
    PROPOSAL_ITEMS_MIN_NONCE_ASC
    PROPOSAL_ITEMS_MIN_NONCE_DESC
    PROPOSAL_ITEMS_MIN_REMOVED_ASC
    PROPOSAL_ITEMS_MIN_REMOVED_DESC
    PROPOSAL_ITEMS_MIN_SIGNATURE_ASC
    PROPOSAL_ITEMS_MIN_SIGNATURE_DESC
    PROPOSAL_ITEMS_MIN_STATUS_ASC
    PROPOSAL_ITEMS_MIN_STATUS_DESC
    PROPOSAL_ITEMS_MIN_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_MIN_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_MIN_TYPE_ASC
    PROPOSAL_ITEMS_MIN_TYPE_DESC
    PROPOSAL_ITEMS_MIN_VOTES_ASC
    PROPOSAL_ITEMS_MIN_VOTES_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_DATA_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_DATA_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_ID_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_ID_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_NONCE_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_NONCE_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_REMOVED_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_REMOVED_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_SIGNATURE_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_SIGNATURE_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_STATUS_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_STATUS_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_TYPE_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_TYPE_DESC
    PROPOSAL_ITEMS_STDDEV_POPULATION_VOTES_ASC
    PROPOSAL_ITEMS_STDDEV_POPULATION_VOTES_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_DATA_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_DATA_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_ID_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_ID_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_NONCE_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_NONCE_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_REMOVED_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_REMOVED_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_SIGNATURE_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_SIGNATURE_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_STATUS_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_STATUS_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_TYPE_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_TYPE_DESC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_VOTES_ASC
    PROPOSAL_ITEMS_STDDEV_SAMPLE_VOTES_DESC
    PROPOSAL_ITEMS_SUM_BLOCK_ID_ASC
    PROPOSAL_ITEMS_SUM_BLOCK_ID_DESC
    PROPOSAL_ITEMS_SUM_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_SUM_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_SUM_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_SUM_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_SUM_DATA_ASC
    PROPOSAL_ITEMS_SUM_DATA_DESC
    PROPOSAL_ITEMS_SUM_ID_ASC
    PROPOSAL_ITEMS_SUM_ID_DESC
    PROPOSAL_ITEMS_SUM_NONCE_ASC
    PROPOSAL_ITEMS_SUM_NONCE_DESC
    PROPOSAL_ITEMS_SUM_REMOVED_ASC
    PROPOSAL_ITEMS_SUM_REMOVED_DESC
    PROPOSAL_ITEMS_SUM_SIGNATURE_ASC
    PROPOSAL_ITEMS_SUM_SIGNATURE_DESC
    PROPOSAL_ITEMS_SUM_STATUS_ASC
    PROPOSAL_ITEMS_SUM_STATUS_DESC
    PROPOSAL_ITEMS_SUM_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_SUM_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_SUM_TYPE_ASC
    PROPOSAL_ITEMS_SUM_TYPE_DESC
    PROPOSAL_ITEMS_SUM_VOTES_ASC
    PROPOSAL_ITEMS_SUM_VOTES_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_DATA_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_DATA_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_NONCE_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_NONCE_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_REMOVED_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_REMOVED_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_SIGNATURE_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_SIGNATURE_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_STATUS_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_STATUS_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_TYPE_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_TYPE_DESC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_VOTES_ASC
    PROPOSAL_ITEMS_VARIANCE_POPULATION_VOTES_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_CURRENT_STATUS_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_CURRENT_STATUS_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_DATA_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_DATA_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_ID_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_ID_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_NONCE_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_NONCE_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_REMOVED_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_REMOVED_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_SIGNATURE_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_SIGNATURE_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_STATUS_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_STATUS_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_TIMELINE_STATUS_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_TIMELINE_STATUS_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_TYPE_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_TYPE_DESC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_VOTES_ASC
    PROPOSAL_ITEMS_VARIANCE_SAMPLE_VOTES_DESC
    PROPOSERS_AVERAGE_BLOCK_ID_ASC
    PROPOSERS_AVERAGE_BLOCK_ID_DESC
    PROPOSERS_AVERAGE_COUNT_ASC
    PROPOSERS_AVERAGE_COUNT_DESC
    PROPOSERS_AVERAGE_ID_ASC
    PROPOSERS_AVERAGE_ID_DESC
    PROPOSERS_AVERAGE_PROPOSERS_ASC
    PROPOSERS_AVERAGE_PROPOSERS_DESC
    PROPOSERS_COUNT_ASC
    PROPOSERS_COUNT_DESC
    PROPOSERS_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSERS_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSERS_DISTINCT_COUNT_COUNT_ASC
    PROPOSERS_DISTINCT_COUNT_COUNT_DESC
    PROPOSERS_DISTINCT_COUNT_ID_ASC
    PROPOSERS_DISTINCT_COUNT_ID_DESC
    PROPOSERS_DISTINCT_COUNT_PROPOSERS_ASC
    PROPOSERS_DISTINCT_COUNT_PROPOSERS_DESC
    PROPOSERS_MAX_BLOCK_ID_ASC
    PROPOSERS_MAX_BLOCK_ID_DESC
    PROPOSERS_MAX_COUNT_ASC
    PROPOSERS_MAX_COUNT_DESC
    PROPOSERS_MAX_ID_ASC
    PROPOSERS_MAX_ID_DESC
    PROPOSERS_MAX_PROPOSERS_ASC
    PROPOSERS_MAX_PROPOSERS_DESC
    PROPOSERS_MIN_BLOCK_ID_ASC
    PROPOSERS_MIN_BLOCK_ID_DESC
    PROPOSERS_MIN_COUNT_ASC
    PROPOSERS_MIN_COUNT_DESC
    PROPOSERS_MIN_ID_ASC
    PROPOSERS_MIN_ID_DESC
    PROPOSERS_MIN_PROPOSERS_ASC
    PROPOSERS_MIN_PROPOSERS_DESC
    PROPOSERS_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSERS_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSERS_STDDEV_POPULATION_COUNT_ASC
    PROPOSERS_STDDEV_POPULATION_COUNT_DESC
    PROPOSERS_STDDEV_POPULATION_ID_ASC
    PROPOSERS_STDDEV_POPULATION_ID_DESC
    PROPOSERS_STDDEV_POPULATION_PROPOSERS_ASC
    PROPOSERS_STDDEV_POPULATION_PROPOSERS_DESC
    PROPOSERS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSERS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSERS_STDDEV_SAMPLE_COUNT_ASC
    PROPOSERS_STDDEV_SAMPLE_COUNT_DESC
    PROPOSERS_STDDEV_SAMPLE_ID_ASC
    PROPOSERS_STDDEV_SAMPLE_ID_DESC
    PROPOSERS_STDDEV_SAMPLE_PROPOSERS_ASC
    PROPOSERS_STDDEV_SAMPLE_PROPOSERS_DESC
    PROPOSERS_SUM_BLOCK_ID_ASC
    PROPOSERS_SUM_BLOCK_ID_DESC
    PROPOSERS_SUM_COUNT_ASC
    PROPOSERS_SUM_COUNT_DESC
    PROPOSERS_SUM_ID_ASC
    PROPOSERS_SUM_ID_DESC
    PROPOSERS_SUM_PROPOSERS_ASC
    PROPOSERS_SUM_PROPOSERS_DESC
    PROPOSERS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSERS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSERS_VARIANCE_POPULATION_COUNT_ASC
    PROPOSERS_VARIANCE_POPULATION_COUNT_DESC
    PROPOSERS_VARIANCE_POPULATION_ID_ASC
    PROPOSERS_VARIANCE_POPULATION_ID_DESC
    PROPOSERS_VARIANCE_POPULATION_PROPOSERS_ASC
    PROPOSERS_VARIANCE_POPULATION_PROPOSERS_DESC
    PROPOSERS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSERS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSERS_VARIANCE_SAMPLE_COUNT_ASC
    PROPOSERS_VARIANCE_SAMPLE_COUNT_DESC
    PROPOSERS_VARIANCE_SAMPLE_ID_ASC
    PROPOSERS_VARIANCE_SAMPLE_ID_DESC
    PROPOSERS_VARIANCE_SAMPLE_PROPOSERS_ASC
    PROPOSERS_VARIANCE_SAMPLE_PROPOSERS_DESC
    PROPOSER_THRESHOLDS_AVERAGE_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_AVERAGE_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_AVERAGE_ID_ASC
    PROPOSER_THRESHOLDS_AVERAGE_ID_DESC
    PROPOSER_THRESHOLDS_AVERAGE_VALUE_ASC
    PROPOSER_THRESHOLDS_AVERAGE_VALUE_DESC
    PROPOSER_THRESHOLDS_COUNT_ASC
    PROPOSER_THRESHOLDS_COUNT_DESC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_ID_ASC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_ID_DESC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_VALUE_ASC
    PROPOSER_THRESHOLDS_DISTINCT_COUNT_VALUE_DESC
    PROPOSER_THRESHOLDS_MAX_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_MAX_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_MAX_ID_ASC
    PROPOSER_THRESHOLDS_MAX_ID_DESC
    PROPOSER_THRESHOLDS_MAX_VALUE_ASC
    PROPOSER_THRESHOLDS_MAX_VALUE_DESC
    PROPOSER_THRESHOLDS_MIN_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_MIN_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_MIN_ID_ASC
    PROPOSER_THRESHOLDS_MIN_ID_DESC
    PROPOSER_THRESHOLDS_MIN_VALUE_ASC
    PROPOSER_THRESHOLDS_MIN_VALUE_DESC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_ID_ASC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_ID_DESC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_VALUE_ASC
    PROPOSER_THRESHOLDS_STDDEV_POPULATION_VALUE_DESC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_ID_ASC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_ID_DESC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_VALUE_ASC
    PROPOSER_THRESHOLDS_STDDEV_SAMPLE_VALUE_DESC
    PROPOSER_THRESHOLDS_SUM_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_SUM_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_SUM_ID_ASC
    PROPOSER_THRESHOLDS_SUM_ID_DESC
    PROPOSER_THRESHOLDS_SUM_VALUE_ASC
    PROPOSER_THRESHOLDS_SUM_VALUE_DESC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_ID_ASC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_ID_DESC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_VALUE_ASC
    PROPOSER_THRESHOLDS_VARIANCE_POPULATION_VALUE_DESC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_ID_ASC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_ID_DESC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_VALUE_ASC
    PROPOSER_THRESHOLDS_VARIANCE_SAMPLE_VALUE_DESC
    PUBLIC_KEYS_AVERAGE_BLOCK_ID_ASC
    PUBLIC_KEYS_AVERAGE_BLOCK_ID_DESC
    PUBLIC_KEYS_AVERAGE_COMPRESSED_ASC
    PUBLIC_KEYS_AVERAGE_COMPRESSED_DESC
    PUBLIC_KEYS_AVERAGE_HISTORY_ASC
    PUBLIC_KEYS_AVERAGE_HISTORY_DESC
    PUBLIC_KEYS_AVERAGE_ID_ASC
    PUBLIC_KEYS_AVERAGE_ID_DESC
    PUBLIC_KEYS_AVERAGE_UNCOMPRESSED_ASC
    PUBLIC_KEYS_AVERAGE_UNCOMPRESSED_DESC
    PUBLIC_KEYS_COUNT_ASC
    PUBLIC_KEYS_COUNT_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_BLOCK_ID_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_BLOCK_ID_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_COMPRESSED_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_COMPRESSED_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_HISTORY_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_HISTORY_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_ID_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_ID_DESC
    PUBLIC_KEYS_DISTINCT_COUNT_UNCOMPRESSED_ASC
    PUBLIC_KEYS_DISTINCT_COUNT_UNCOMPRESSED_DESC
    PUBLIC_KEYS_MAX_BLOCK_ID_ASC
    PUBLIC_KEYS_MAX_BLOCK_ID_DESC
    PUBLIC_KEYS_MAX_COMPRESSED_ASC
    PUBLIC_KEYS_MAX_COMPRESSED_DESC
    PUBLIC_KEYS_MAX_HISTORY_ASC
    PUBLIC_KEYS_MAX_HISTORY_DESC
    PUBLIC_KEYS_MAX_ID_ASC
    PUBLIC_KEYS_MAX_ID_DESC
    PUBLIC_KEYS_MAX_UNCOMPRESSED_ASC
    PUBLIC_KEYS_MAX_UNCOMPRESSED_DESC
    PUBLIC_KEYS_MIN_BLOCK_ID_ASC
    PUBLIC_KEYS_MIN_BLOCK_ID_DESC
    PUBLIC_KEYS_MIN_COMPRESSED_ASC
    PUBLIC_KEYS_MIN_COMPRESSED_DESC
    PUBLIC_KEYS_MIN_HISTORY_ASC
    PUBLIC_KEYS_MIN_HISTORY_DESC
    PUBLIC_KEYS_MIN_ID_ASC
    PUBLIC_KEYS_MIN_ID_DESC
    PUBLIC_KEYS_MIN_UNCOMPRESSED_ASC
    PUBLIC_KEYS_MIN_UNCOMPRESSED_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_BLOCK_ID_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_BLOCK_ID_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_COMPRESSED_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_COMPRESSED_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_HISTORY_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_HISTORY_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_ID_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_ID_DESC
    PUBLIC_KEYS_STDDEV_POPULATION_UNCOMPRESSED_ASC
    PUBLIC_KEYS_STDDEV_POPULATION_UNCOMPRESSED_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_BLOCK_ID_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_BLOCK_ID_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_COMPRESSED_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_COMPRESSED_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_HISTORY_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_HISTORY_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_ID_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_ID_DESC
    PUBLIC_KEYS_STDDEV_SAMPLE_UNCOMPRESSED_ASC
    PUBLIC_KEYS_STDDEV_SAMPLE_UNCOMPRESSED_DESC
    PUBLIC_KEYS_SUM_BLOCK_ID_ASC
    PUBLIC_KEYS_SUM_BLOCK_ID_DESC
    PUBLIC_KEYS_SUM_COMPRESSED_ASC
    PUBLIC_KEYS_SUM_COMPRESSED_DESC
    PUBLIC_KEYS_SUM_HISTORY_ASC
    PUBLIC_KEYS_SUM_HISTORY_DESC
    PUBLIC_KEYS_SUM_ID_ASC
    PUBLIC_KEYS_SUM_ID_DESC
    PUBLIC_KEYS_SUM_UNCOMPRESSED_ASC
    PUBLIC_KEYS_SUM_UNCOMPRESSED_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_BLOCK_ID_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_BLOCK_ID_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_COMPRESSED_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_COMPRESSED_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_HISTORY_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_HISTORY_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_ID_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_ID_DESC
    PUBLIC_KEYS_VARIANCE_POPULATION_UNCOMPRESSED_ASC
    PUBLIC_KEYS_VARIANCE_POPULATION_UNCOMPRESSED_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_COMPRESSED_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_COMPRESSED_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_HISTORY_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_HISTORY_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_ID_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_ID_DESC
    PUBLIC_KEYS_VARIANCE_SAMPLE_UNCOMPRESSED_ASC
    PUBLIC_KEYS_VARIANCE_SAMPLE_UNCOMPRESSED_DESC
    SESSIONS_AVERAGE_AUTHORITIES_ASC
    SESSIONS_AVERAGE_AUTHORITIES_DESC
    SESSIONS_AVERAGE_BEST_AUTHORITIES_ASC
    SESSIONS_AVERAGE_BEST_AUTHORITIES_DESC
    SESSIONS_AVERAGE_BLOCK_ID_ASC
    SESSIONS_AVERAGE_BLOCK_ID_DESC
    SESSIONS_AVERAGE_BLOCK_NUMBER_ASC
    SESSIONS_AVERAGE_BLOCK_NUMBER_DESC
    SESSIONS_AVERAGE_ID_ASC
    SESSIONS_AVERAGE_ID_DESC
    SESSIONS_AVERAGE_KEY_GEN_THRESHOLD_ASC
    SESSIONS_AVERAGE_KEY_GEN_THRESHOLD_DESC
    SESSIONS_AVERAGE_NEXT_AUTHORITIES_ASC
    SESSIONS_AVERAGE_NEXT_AUTHORITIES_DESC
    SESSIONS_AVERAGE_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_AVERAGE_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_AVERAGE_PROPOSERS_ASC
    SESSIONS_AVERAGE_PROPOSERS_COUNT_ASC
    SESSIONS_AVERAGE_PROPOSERS_COUNT_DESC
    SESSIONS_AVERAGE_PROPOSERS_DESC
    SESSIONS_AVERAGE_PROPOSER_THRESHOLD_ASC
    SESSIONS_AVERAGE_PROPOSER_THRESHOLD_DESC
    SESSIONS_AVERAGE_PUBLIC_KEY_ID_ASC
    SESSIONS_AVERAGE_PUBLIC_KEY_ID_DESC
    SESSIONS_AVERAGE_SIGNATURE_THRESHOLD_ASC
    SESSIONS_AVERAGE_SIGNATURE_THRESHOLD_DESC
    SESSIONS_COUNT_ASC
    SESSIONS_COUNT_DESC
    SESSIONS_DISTINCT_COUNT_AUTHORITIES_ASC
    SESSIONS_DISTINCT_COUNT_AUTHORITIES_DESC
    SESSIONS_DISTINCT_COUNT_BEST_AUTHORITIES_ASC
    SESSIONS_DISTINCT_COUNT_BEST_AUTHORITIES_DESC
    SESSIONS_DISTINCT_COUNT_BLOCK_ID_ASC
    SESSIONS_DISTINCT_COUNT_BLOCK_ID_DESC
    SESSIONS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    SESSIONS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    SESSIONS_DISTINCT_COUNT_ID_ASC
    SESSIONS_DISTINCT_COUNT_ID_DESC
    SESSIONS_DISTINCT_COUNT_KEY_GEN_THRESHOLD_ASC
    SESSIONS_DISTINCT_COUNT_KEY_GEN_THRESHOLD_DESC
    SESSIONS_DISTINCT_COUNT_NEXT_AUTHORITIES_ASC
    SESSIONS_DISTINCT_COUNT_NEXT_AUTHORITIES_DESC
    SESSIONS_DISTINCT_COUNT_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_DISTINCT_COUNT_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_DISTINCT_COUNT_PROPOSERS_ASC
    SESSIONS_DISTINCT_COUNT_PROPOSERS_COUNT_ASC
    SESSIONS_DISTINCT_COUNT_PROPOSERS_COUNT_DESC
    SESSIONS_DISTINCT_COUNT_PROPOSERS_DESC
    SESSIONS_DISTINCT_COUNT_PROPOSER_THRESHOLD_ASC
    SESSIONS_DISTINCT_COUNT_PROPOSER_THRESHOLD_DESC
    SESSIONS_DISTINCT_COUNT_PUBLIC_KEY_ID_ASC
    SESSIONS_DISTINCT_COUNT_PUBLIC_KEY_ID_DESC
    SESSIONS_DISTINCT_COUNT_SIGNATURE_THRESHOLD_ASC
    SESSIONS_DISTINCT_COUNT_SIGNATURE_THRESHOLD_DESC
    SESSIONS_MAX_AUTHORITIES_ASC
    SESSIONS_MAX_AUTHORITIES_DESC
    SESSIONS_MAX_BEST_AUTHORITIES_ASC
    SESSIONS_MAX_BEST_AUTHORITIES_DESC
    SESSIONS_MAX_BLOCK_ID_ASC
    SESSIONS_MAX_BLOCK_ID_DESC
    SESSIONS_MAX_BLOCK_NUMBER_ASC
    SESSIONS_MAX_BLOCK_NUMBER_DESC
    SESSIONS_MAX_ID_ASC
    SESSIONS_MAX_ID_DESC
    SESSIONS_MAX_KEY_GEN_THRESHOLD_ASC
    SESSIONS_MAX_KEY_GEN_THRESHOLD_DESC
    SESSIONS_MAX_NEXT_AUTHORITIES_ASC
    SESSIONS_MAX_NEXT_AUTHORITIES_DESC
    SESSIONS_MAX_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_MAX_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_MAX_PROPOSERS_ASC
    SESSIONS_MAX_PROPOSERS_COUNT_ASC
    SESSIONS_MAX_PROPOSERS_COUNT_DESC
    SESSIONS_MAX_PROPOSERS_DESC
    SESSIONS_MAX_PROPOSER_THRESHOLD_ASC
    SESSIONS_MAX_PROPOSER_THRESHOLD_DESC
    SESSIONS_MAX_PUBLIC_KEY_ID_ASC
    SESSIONS_MAX_PUBLIC_KEY_ID_DESC
    SESSIONS_MAX_SIGNATURE_THRESHOLD_ASC
    SESSIONS_MAX_SIGNATURE_THRESHOLD_DESC
    SESSIONS_MIN_AUTHORITIES_ASC
    SESSIONS_MIN_AUTHORITIES_DESC
    SESSIONS_MIN_BEST_AUTHORITIES_ASC
    SESSIONS_MIN_BEST_AUTHORITIES_DESC
    SESSIONS_MIN_BLOCK_ID_ASC
    SESSIONS_MIN_BLOCK_ID_DESC
    SESSIONS_MIN_BLOCK_NUMBER_ASC
    SESSIONS_MIN_BLOCK_NUMBER_DESC
    SESSIONS_MIN_ID_ASC
    SESSIONS_MIN_ID_DESC
    SESSIONS_MIN_KEY_GEN_THRESHOLD_ASC
    SESSIONS_MIN_KEY_GEN_THRESHOLD_DESC
    SESSIONS_MIN_NEXT_AUTHORITIES_ASC
    SESSIONS_MIN_NEXT_AUTHORITIES_DESC
    SESSIONS_MIN_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_MIN_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_MIN_PROPOSERS_ASC
    SESSIONS_MIN_PROPOSERS_COUNT_ASC
    SESSIONS_MIN_PROPOSERS_COUNT_DESC
    SESSIONS_MIN_PROPOSERS_DESC
    SESSIONS_MIN_PROPOSER_THRESHOLD_ASC
    SESSIONS_MIN_PROPOSER_THRESHOLD_DESC
    SESSIONS_MIN_PUBLIC_KEY_ID_ASC
    SESSIONS_MIN_PUBLIC_KEY_ID_DESC
    SESSIONS_MIN_SIGNATURE_THRESHOLD_ASC
    SESSIONS_MIN_SIGNATURE_THRESHOLD_DESC
    SESSIONS_STDDEV_POPULATION_AUTHORITIES_ASC
    SESSIONS_STDDEV_POPULATION_AUTHORITIES_DESC
    SESSIONS_STDDEV_POPULATION_BEST_AUTHORITIES_ASC
    SESSIONS_STDDEV_POPULATION_BEST_AUTHORITIES_DESC
    SESSIONS_STDDEV_POPULATION_BLOCK_ID_ASC
    SESSIONS_STDDEV_POPULATION_BLOCK_ID_DESC
    SESSIONS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    SESSIONS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    SESSIONS_STDDEV_POPULATION_ID_ASC
    SESSIONS_STDDEV_POPULATION_ID_DESC
    SESSIONS_STDDEV_POPULATION_KEY_GEN_THRESHOLD_ASC
    SESSIONS_STDDEV_POPULATION_KEY_GEN_THRESHOLD_DESC
    SESSIONS_STDDEV_POPULATION_NEXT_AUTHORITIES_ASC
    SESSIONS_STDDEV_POPULATION_NEXT_AUTHORITIES_DESC
    SESSIONS_STDDEV_POPULATION_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_STDDEV_POPULATION_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_STDDEV_POPULATION_PROPOSERS_ASC
    SESSIONS_STDDEV_POPULATION_PROPOSERS_COUNT_ASC
    SESSIONS_STDDEV_POPULATION_PROPOSERS_COUNT_DESC
    SESSIONS_STDDEV_POPULATION_PROPOSERS_DESC
    SESSIONS_STDDEV_POPULATION_PROPOSER_THRESHOLD_ASC
    SESSIONS_STDDEV_POPULATION_PROPOSER_THRESHOLD_DESC
    SESSIONS_STDDEV_POPULATION_PUBLIC_KEY_ID_ASC
    SESSIONS_STDDEV_POPULATION_PUBLIC_KEY_ID_DESC
    SESSIONS_STDDEV_POPULATION_SIGNATURE_THRESHOLD_ASC
    SESSIONS_STDDEV_POPULATION_SIGNATURE_THRESHOLD_DESC
    SESSIONS_STDDEV_SAMPLE_AUTHORITIES_ASC
    SESSIONS_STDDEV_SAMPLE_AUTHORITIES_DESC
    SESSIONS_STDDEV_SAMPLE_BEST_AUTHORITIES_ASC
    SESSIONS_STDDEV_SAMPLE_BEST_AUTHORITIES_DESC
    SESSIONS_STDDEV_SAMPLE_BLOCK_ID_ASC
    SESSIONS_STDDEV_SAMPLE_BLOCK_ID_DESC
    SESSIONS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    SESSIONS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    SESSIONS_STDDEV_SAMPLE_ID_ASC
    SESSIONS_STDDEV_SAMPLE_ID_DESC
    SESSIONS_STDDEV_SAMPLE_KEY_GEN_THRESHOLD_ASC
    SESSIONS_STDDEV_SAMPLE_KEY_GEN_THRESHOLD_DESC
    SESSIONS_STDDEV_SAMPLE_NEXT_AUTHORITIES_ASC
    SESSIONS_STDDEV_SAMPLE_NEXT_AUTHORITIES_DESC
    SESSIONS_STDDEV_SAMPLE_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_STDDEV_SAMPLE_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_STDDEV_SAMPLE_PROPOSERS_ASC
    SESSIONS_STDDEV_SAMPLE_PROPOSERS_COUNT_ASC
    SESSIONS_STDDEV_SAMPLE_PROPOSERS_COUNT_DESC
    SESSIONS_STDDEV_SAMPLE_PROPOSERS_DESC
    SESSIONS_STDDEV_SAMPLE_PROPOSER_THRESHOLD_ASC
    SESSIONS_STDDEV_SAMPLE_PROPOSER_THRESHOLD_DESC
    SESSIONS_STDDEV_SAMPLE_PUBLIC_KEY_ID_ASC
    SESSIONS_STDDEV_SAMPLE_PUBLIC_KEY_ID_DESC
    SESSIONS_STDDEV_SAMPLE_SIGNATURE_THRESHOLD_ASC
    SESSIONS_STDDEV_SAMPLE_SIGNATURE_THRESHOLD_DESC
    SESSIONS_SUM_AUTHORITIES_ASC
    SESSIONS_SUM_AUTHORITIES_DESC
    SESSIONS_SUM_BEST_AUTHORITIES_ASC
    SESSIONS_SUM_BEST_AUTHORITIES_DESC
    SESSIONS_SUM_BLOCK_ID_ASC
    SESSIONS_SUM_BLOCK_ID_DESC
    SESSIONS_SUM_BLOCK_NUMBER_ASC
    SESSIONS_SUM_BLOCK_NUMBER_DESC
    SESSIONS_SUM_ID_ASC
    SESSIONS_SUM_ID_DESC
    SESSIONS_SUM_KEY_GEN_THRESHOLD_ASC
    SESSIONS_SUM_KEY_GEN_THRESHOLD_DESC
    SESSIONS_SUM_NEXT_AUTHORITIES_ASC
    SESSIONS_SUM_NEXT_AUTHORITIES_DESC
    SESSIONS_SUM_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_SUM_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_SUM_PROPOSERS_ASC
    SESSIONS_SUM_PROPOSERS_COUNT_ASC
    SESSIONS_SUM_PROPOSERS_COUNT_DESC
    SESSIONS_SUM_PROPOSERS_DESC
    SESSIONS_SUM_PROPOSER_THRESHOLD_ASC
    SESSIONS_SUM_PROPOSER_THRESHOLD_DESC
    SESSIONS_SUM_PUBLIC_KEY_ID_ASC
    SESSIONS_SUM_PUBLIC_KEY_ID_DESC
    SESSIONS_SUM_SIGNATURE_THRESHOLD_ASC
    SESSIONS_SUM_SIGNATURE_THRESHOLD_DESC
    SESSIONS_VARIANCE_POPULATION_AUTHORITIES_ASC
    SESSIONS_VARIANCE_POPULATION_AUTHORITIES_DESC
    SESSIONS_VARIANCE_POPULATION_BEST_AUTHORITIES_ASC
    SESSIONS_VARIANCE_POPULATION_BEST_AUTHORITIES_DESC
    SESSIONS_VARIANCE_POPULATION_BLOCK_ID_ASC
    SESSIONS_VARIANCE_POPULATION_BLOCK_ID_DESC
    SESSIONS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    SESSIONS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    SESSIONS_VARIANCE_POPULATION_ID_ASC
    SESSIONS_VARIANCE_POPULATION_ID_DESC
    SESSIONS_VARIANCE_POPULATION_KEY_GEN_THRESHOLD_ASC
    SESSIONS_VARIANCE_POPULATION_KEY_GEN_THRESHOLD_DESC
    SESSIONS_VARIANCE_POPULATION_NEXT_AUTHORITIES_ASC
    SESSIONS_VARIANCE_POPULATION_NEXT_AUTHORITIES_DESC
    SESSIONS_VARIANCE_POPULATION_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_VARIANCE_POPULATION_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_VARIANCE_POPULATION_PROPOSERS_ASC
    SESSIONS_VARIANCE_POPULATION_PROPOSERS_COUNT_ASC
    SESSIONS_VARIANCE_POPULATION_PROPOSERS_COUNT_DESC
    SESSIONS_VARIANCE_POPULATION_PROPOSERS_DESC
    SESSIONS_VARIANCE_POPULATION_PROPOSER_THRESHOLD_ASC
    SESSIONS_VARIANCE_POPULATION_PROPOSER_THRESHOLD_DESC
    SESSIONS_VARIANCE_POPULATION_PUBLIC_KEY_ID_ASC
    SESSIONS_VARIANCE_POPULATION_PUBLIC_KEY_ID_DESC
    SESSIONS_VARIANCE_POPULATION_SIGNATURE_THRESHOLD_ASC
    SESSIONS_VARIANCE_POPULATION_SIGNATURE_THRESHOLD_DESC
    SESSIONS_VARIANCE_SAMPLE_AUTHORITIES_ASC
    SESSIONS_VARIANCE_SAMPLE_AUTHORITIES_DESC
    SESSIONS_VARIANCE_SAMPLE_BEST_AUTHORITIES_ASC
    SESSIONS_VARIANCE_SAMPLE_BEST_AUTHORITIES_DESC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    SESSIONS_VARIANCE_SAMPLE_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_KEY_GEN_THRESHOLD_ASC
    SESSIONS_VARIANCE_SAMPLE_KEY_GEN_THRESHOLD_DESC
    SESSIONS_VARIANCE_SAMPLE_NEXT_AUTHORITIES_ASC
    SESSIONS_VARIANCE_SAMPLE_NEXT_AUTHORITIES_DESC
    SESSIONS_VARIANCE_SAMPLE_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_VARIANCE_SAMPLE_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_VARIANCE_SAMPLE_PROPOSERS_ASC
    SESSIONS_VARIANCE_SAMPLE_PROPOSERS_COUNT_ASC
    SESSIONS_VARIANCE_SAMPLE_PROPOSERS_COUNT_DESC
    SESSIONS_VARIANCE_SAMPLE_PROPOSERS_DESC
    SESSIONS_VARIANCE_SAMPLE_PROPOSER_THRESHOLD_ASC
    SESSIONS_VARIANCE_SAMPLE_PROPOSER_THRESHOLD_DESC
    SESSIONS_VARIANCE_SAMPLE_PUBLIC_KEY_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_PUBLIC_KEY_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_SIGNATURE_THRESHOLD_ASC
    SESSIONS_VARIANCE_SAMPLE_SIGNATURE_THRESHOLD_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_CURRENT_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_CURRENT_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_ID_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_ID_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_NEXT_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_NEXT_DESC
    SIGNATURE_THRESHOLDS_AVERAGE_PENDING_ASC
    SIGNATURE_THRESHOLDS_AVERAGE_PENDING_DESC
    SIGNATURE_THRESHOLDS_COUNT_ASC
    SIGNATURE_THRESHOLDS_COUNT_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_CURRENT_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_CURRENT_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_ID_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_ID_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_NEXT_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_NEXT_DESC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_PENDING_ASC
    SIGNATURE_THRESHOLDS_DISTINCT_COUNT_PENDING_DESC
    SIGNATURE_THRESHOLDS_MAX_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_MAX_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_MAX_CURRENT_ASC
    SIGNATURE_THRESHOLDS_MAX_CURRENT_DESC
    SIGNATURE_THRESHOLDS_MAX_ID_ASC
    SIGNATURE_THRESHOLDS_MAX_ID_DESC
    SIGNATURE_THRESHOLDS_MAX_NEXT_ASC
    SIGNATURE_THRESHOLDS_MAX_NEXT_DESC
    SIGNATURE_THRESHOLDS_MAX_PENDING_ASC
    SIGNATURE_THRESHOLDS_MAX_PENDING_DESC
    SIGNATURE_THRESHOLDS_MIN_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_MIN_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_MIN_CURRENT_ASC
    SIGNATURE_THRESHOLDS_MIN_CURRENT_DESC
    SIGNATURE_THRESHOLDS_MIN_ID_ASC
    SIGNATURE_THRESHOLDS_MIN_ID_DESC
    SIGNATURE_THRESHOLDS_MIN_NEXT_ASC
    SIGNATURE_THRESHOLDS_MIN_NEXT_DESC
    SIGNATURE_THRESHOLDS_MIN_PENDING_ASC
    SIGNATURE_THRESHOLDS_MIN_PENDING_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_CURRENT_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_CURRENT_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_ID_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_ID_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_NEXT_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_NEXT_DESC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_PENDING_ASC
    SIGNATURE_THRESHOLDS_STDDEV_POPULATION_PENDING_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_CURRENT_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_CURRENT_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_ID_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_ID_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_NEXT_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_NEXT_DESC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_PENDING_ASC
    SIGNATURE_THRESHOLDS_STDDEV_SAMPLE_PENDING_DESC
    SIGNATURE_THRESHOLDS_SUM_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_SUM_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_SUM_CURRENT_ASC
    SIGNATURE_THRESHOLDS_SUM_CURRENT_DESC
    SIGNATURE_THRESHOLDS_SUM_ID_ASC
    SIGNATURE_THRESHOLDS_SUM_ID_DESC
    SIGNATURE_THRESHOLDS_SUM_NEXT_ASC
    SIGNATURE_THRESHOLDS_SUM_NEXT_DESC
    SIGNATURE_THRESHOLDS_SUM_PENDING_ASC
    SIGNATURE_THRESHOLDS_SUM_PENDING_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_CURRENT_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_CURRENT_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_ID_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_ID_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_NEXT_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_NEXT_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_PENDING_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_POPULATION_PENDING_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_CURRENT_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_CURRENT_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_ID_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_ID_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_NEXT_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_NEXT_DESC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_PENDING_ASC
    SIGNATURE_THRESHOLDS_VARIANCE_SAMPLE_PENDING_DESC
    SPEC_VERSION_ASC
    SPEC_VERSION_DESC
    STATE_ROOT_ASC
    STATE_ROOT_DESC
    TIMESTAMP_ASC
    TIMESTAMP_DESC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_AVERAGE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_COUNT_ASC
    UNSIGNED_PROPOSALS_QUEUES_COUNT_DESC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_DISTINCT_COUNT_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_MAX_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_MAX_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_MAX_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_MAX_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_MAX_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_MAX_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_MIN_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_MIN_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_MIN_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_MIN_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_MIN_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_MIN_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_STDDEV_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_SUM_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_SUM_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_SUM_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_SUM_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_SUM_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_SUM_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_BLOCK_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_BLOCK_ID_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUES_VARIANCE_SAMPLE_ID_DESC
}

"Grouping methods for `Event` for usage during aggregation."
enum EventsGroupBy {
    ARGUMENTS
    BLOCK_ID
    BLOCK_NUMBER
    DATA
    DOCS
    EXTRINSIC_ID
    INDEX
    METHOD
    MODULE
    TIMESTAMP
    TIMESTAMP_TRUNCATED_TO_DAY
    TIMESTAMP_TRUNCATED_TO_HOUR
}

"Methods to use when ordering `Event`."
enum EventsOrderBy {
    ARGUMENTS_ASC
    ARGUMENTS_DESC
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    DATA_ASC
    DATA_DESC
    DOCS_ASC
    DOCS_DESC
    EXTRINSIC_ID_ASC
    EXTRINSIC_ID_DESC
    ID_ASC
    ID_DESC
    INDEX_ASC
    INDEX_DESC
    METHOD_ASC
    METHOD_DESC
    MODULE_ASC
    MODULE_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    TIMESTAMP_ASC
    TIMESTAMP_DESC
}

"Grouping methods for `Extrinsic` for usage during aggregation."
enum ExtrinsicsGroupBy {
    ARGUMENTS
    BLOCK_ID
    BLOCK_NUMBER
    HASH
    INDEX
    IS_SIGNED
    IS_SUCCESS
    METHOD
    MODULE
    SIGNER_ID
}

"Methods to use when ordering `Extrinsic`."
enum ExtrinsicsOrderBy {
    ARGUMENTS_ASC
    ARGUMENTS_DESC
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    EVENTS_AVERAGE_ARGUMENTS_ASC
    EVENTS_AVERAGE_ARGUMENTS_DESC
    EVENTS_AVERAGE_BLOCK_ID_ASC
    EVENTS_AVERAGE_BLOCK_ID_DESC
    EVENTS_AVERAGE_BLOCK_NUMBER_ASC
    EVENTS_AVERAGE_BLOCK_NUMBER_DESC
    EVENTS_AVERAGE_DATA_ASC
    EVENTS_AVERAGE_DATA_DESC
    EVENTS_AVERAGE_DOCS_ASC
    EVENTS_AVERAGE_DOCS_DESC
    EVENTS_AVERAGE_EXTRINSIC_ID_ASC
    EVENTS_AVERAGE_EXTRINSIC_ID_DESC
    EVENTS_AVERAGE_ID_ASC
    EVENTS_AVERAGE_ID_DESC
    EVENTS_AVERAGE_INDEX_ASC
    EVENTS_AVERAGE_INDEX_DESC
    EVENTS_AVERAGE_METHOD_ASC
    EVENTS_AVERAGE_METHOD_DESC
    EVENTS_AVERAGE_MODULE_ASC
    EVENTS_AVERAGE_MODULE_DESC
    EVENTS_AVERAGE_TIMESTAMP_ASC
    EVENTS_AVERAGE_TIMESTAMP_DESC
    EVENTS_COUNT_ASC
    EVENTS_COUNT_DESC
    EVENTS_DISTINCT_COUNT_ARGUMENTS_ASC
    EVENTS_DISTINCT_COUNT_ARGUMENTS_DESC
    EVENTS_DISTINCT_COUNT_BLOCK_ID_ASC
    EVENTS_DISTINCT_COUNT_BLOCK_ID_DESC
    EVENTS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    EVENTS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    EVENTS_DISTINCT_COUNT_DATA_ASC
    EVENTS_DISTINCT_COUNT_DATA_DESC
    EVENTS_DISTINCT_COUNT_DOCS_ASC
    EVENTS_DISTINCT_COUNT_DOCS_DESC
    EVENTS_DISTINCT_COUNT_EXTRINSIC_ID_ASC
    EVENTS_DISTINCT_COUNT_EXTRINSIC_ID_DESC
    EVENTS_DISTINCT_COUNT_ID_ASC
    EVENTS_DISTINCT_COUNT_ID_DESC
    EVENTS_DISTINCT_COUNT_INDEX_ASC
    EVENTS_DISTINCT_COUNT_INDEX_DESC
    EVENTS_DISTINCT_COUNT_METHOD_ASC
    EVENTS_DISTINCT_COUNT_METHOD_DESC
    EVENTS_DISTINCT_COUNT_MODULE_ASC
    EVENTS_DISTINCT_COUNT_MODULE_DESC
    EVENTS_DISTINCT_COUNT_TIMESTAMP_ASC
    EVENTS_DISTINCT_COUNT_TIMESTAMP_DESC
    EVENTS_MAX_ARGUMENTS_ASC
    EVENTS_MAX_ARGUMENTS_DESC
    EVENTS_MAX_BLOCK_ID_ASC
    EVENTS_MAX_BLOCK_ID_DESC
    EVENTS_MAX_BLOCK_NUMBER_ASC
    EVENTS_MAX_BLOCK_NUMBER_DESC
    EVENTS_MAX_DATA_ASC
    EVENTS_MAX_DATA_DESC
    EVENTS_MAX_DOCS_ASC
    EVENTS_MAX_DOCS_DESC
    EVENTS_MAX_EXTRINSIC_ID_ASC
    EVENTS_MAX_EXTRINSIC_ID_DESC
    EVENTS_MAX_ID_ASC
    EVENTS_MAX_ID_DESC
    EVENTS_MAX_INDEX_ASC
    EVENTS_MAX_INDEX_DESC
    EVENTS_MAX_METHOD_ASC
    EVENTS_MAX_METHOD_DESC
    EVENTS_MAX_MODULE_ASC
    EVENTS_MAX_MODULE_DESC
    EVENTS_MAX_TIMESTAMP_ASC
    EVENTS_MAX_TIMESTAMP_DESC
    EVENTS_MIN_ARGUMENTS_ASC
    EVENTS_MIN_ARGUMENTS_DESC
    EVENTS_MIN_BLOCK_ID_ASC
    EVENTS_MIN_BLOCK_ID_DESC
    EVENTS_MIN_BLOCK_NUMBER_ASC
    EVENTS_MIN_BLOCK_NUMBER_DESC
    EVENTS_MIN_DATA_ASC
    EVENTS_MIN_DATA_DESC
    EVENTS_MIN_DOCS_ASC
    EVENTS_MIN_DOCS_DESC
    EVENTS_MIN_EXTRINSIC_ID_ASC
    EVENTS_MIN_EXTRINSIC_ID_DESC
    EVENTS_MIN_ID_ASC
    EVENTS_MIN_ID_DESC
    EVENTS_MIN_INDEX_ASC
    EVENTS_MIN_INDEX_DESC
    EVENTS_MIN_METHOD_ASC
    EVENTS_MIN_METHOD_DESC
    EVENTS_MIN_MODULE_ASC
    EVENTS_MIN_MODULE_DESC
    EVENTS_MIN_TIMESTAMP_ASC
    EVENTS_MIN_TIMESTAMP_DESC
    EVENTS_STDDEV_POPULATION_ARGUMENTS_ASC
    EVENTS_STDDEV_POPULATION_ARGUMENTS_DESC
    EVENTS_STDDEV_POPULATION_BLOCK_ID_ASC
    EVENTS_STDDEV_POPULATION_BLOCK_ID_DESC
    EVENTS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    EVENTS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    EVENTS_STDDEV_POPULATION_DATA_ASC
    EVENTS_STDDEV_POPULATION_DATA_DESC
    EVENTS_STDDEV_POPULATION_DOCS_ASC
    EVENTS_STDDEV_POPULATION_DOCS_DESC
    EVENTS_STDDEV_POPULATION_EXTRINSIC_ID_ASC
    EVENTS_STDDEV_POPULATION_EXTRINSIC_ID_DESC
    EVENTS_STDDEV_POPULATION_ID_ASC
    EVENTS_STDDEV_POPULATION_ID_DESC
    EVENTS_STDDEV_POPULATION_INDEX_ASC
    EVENTS_STDDEV_POPULATION_INDEX_DESC
    EVENTS_STDDEV_POPULATION_METHOD_ASC
    EVENTS_STDDEV_POPULATION_METHOD_DESC
    EVENTS_STDDEV_POPULATION_MODULE_ASC
    EVENTS_STDDEV_POPULATION_MODULE_DESC
    EVENTS_STDDEV_POPULATION_TIMESTAMP_ASC
    EVENTS_STDDEV_POPULATION_TIMESTAMP_DESC
    EVENTS_STDDEV_SAMPLE_ARGUMENTS_ASC
    EVENTS_STDDEV_SAMPLE_ARGUMENTS_DESC
    EVENTS_STDDEV_SAMPLE_BLOCK_ID_ASC
    EVENTS_STDDEV_SAMPLE_BLOCK_ID_DESC
    EVENTS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    EVENTS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    EVENTS_STDDEV_SAMPLE_DATA_ASC
    EVENTS_STDDEV_SAMPLE_DATA_DESC
    EVENTS_STDDEV_SAMPLE_DOCS_ASC
    EVENTS_STDDEV_SAMPLE_DOCS_DESC
    EVENTS_STDDEV_SAMPLE_EXTRINSIC_ID_ASC
    EVENTS_STDDEV_SAMPLE_EXTRINSIC_ID_DESC
    EVENTS_STDDEV_SAMPLE_ID_ASC
    EVENTS_STDDEV_SAMPLE_ID_DESC
    EVENTS_STDDEV_SAMPLE_INDEX_ASC
    EVENTS_STDDEV_SAMPLE_INDEX_DESC
    EVENTS_STDDEV_SAMPLE_METHOD_ASC
    EVENTS_STDDEV_SAMPLE_METHOD_DESC
    EVENTS_STDDEV_SAMPLE_MODULE_ASC
    EVENTS_STDDEV_SAMPLE_MODULE_DESC
    EVENTS_STDDEV_SAMPLE_TIMESTAMP_ASC
    EVENTS_STDDEV_SAMPLE_TIMESTAMP_DESC
    EVENTS_SUM_ARGUMENTS_ASC
    EVENTS_SUM_ARGUMENTS_DESC
    EVENTS_SUM_BLOCK_ID_ASC
    EVENTS_SUM_BLOCK_ID_DESC
    EVENTS_SUM_BLOCK_NUMBER_ASC
    EVENTS_SUM_BLOCK_NUMBER_DESC
    EVENTS_SUM_DATA_ASC
    EVENTS_SUM_DATA_DESC
    EVENTS_SUM_DOCS_ASC
    EVENTS_SUM_DOCS_DESC
    EVENTS_SUM_EXTRINSIC_ID_ASC
    EVENTS_SUM_EXTRINSIC_ID_DESC
    EVENTS_SUM_ID_ASC
    EVENTS_SUM_ID_DESC
    EVENTS_SUM_INDEX_ASC
    EVENTS_SUM_INDEX_DESC
    EVENTS_SUM_METHOD_ASC
    EVENTS_SUM_METHOD_DESC
    EVENTS_SUM_MODULE_ASC
    EVENTS_SUM_MODULE_DESC
    EVENTS_SUM_TIMESTAMP_ASC
    EVENTS_SUM_TIMESTAMP_DESC
    EVENTS_VARIANCE_POPULATION_ARGUMENTS_ASC
    EVENTS_VARIANCE_POPULATION_ARGUMENTS_DESC
    EVENTS_VARIANCE_POPULATION_BLOCK_ID_ASC
    EVENTS_VARIANCE_POPULATION_BLOCK_ID_DESC
    EVENTS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    EVENTS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    EVENTS_VARIANCE_POPULATION_DATA_ASC
    EVENTS_VARIANCE_POPULATION_DATA_DESC
    EVENTS_VARIANCE_POPULATION_DOCS_ASC
    EVENTS_VARIANCE_POPULATION_DOCS_DESC
    EVENTS_VARIANCE_POPULATION_EXTRINSIC_ID_ASC
    EVENTS_VARIANCE_POPULATION_EXTRINSIC_ID_DESC
    EVENTS_VARIANCE_POPULATION_ID_ASC
    EVENTS_VARIANCE_POPULATION_ID_DESC
    EVENTS_VARIANCE_POPULATION_INDEX_ASC
    EVENTS_VARIANCE_POPULATION_INDEX_DESC
    EVENTS_VARIANCE_POPULATION_METHOD_ASC
    EVENTS_VARIANCE_POPULATION_METHOD_DESC
    EVENTS_VARIANCE_POPULATION_MODULE_ASC
    EVENTS_VARIANCE_POPULATION_MODULE_DESC
    EVENTS_VARIANCE_POPULATION_TIMESTAMP_ASC
    EVENTS_VARIANCE_POPULATION_TIMESTAMP_DESC
    EVENTS_VARIANCE_SAMPLE_ARGUMENTS_ASC
    EVENTS_VARIANCE_SAMPLE_ARGUMENTS_DESC
    EVENTS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    EVENTS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    EVENTS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    EVENTS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    EVENTS_VARIANCE_SAMPLE_DATA_ASC
    EVENTS_VARIANCE_SAMPLE_DATA_DESC
    EVENTS_VARIANCE_SAMPLE_DOCS_ASC
    EVENTS_VARIANCE_SAMPLE_DOCS_DESC
    EVENTS_VARIANCE_SAMPLE_EXTRINSIC_ID_ASC
    EVENTS_VARIANCE_SAMPLE_EXTRINSIC_ID_DESC
    EVENTS_VARIANCE_SAMPLE_ID_ASC
    EVENTS_VARIANCE_SAMPLE_ID_DESC
    EVENTS_VARIANCE_SAMPLE_INDEX_ASC
    EVENTS_VARIANCE_SAMPLE_INDEX_DESC
    EVENTS_VARIANCE_SAMPLE_METHOD_ASC
    EVENTS_VARIANCE_SAMPLE_METHOD_DESC
    EVENTS_VARIANCE_SAMPLE_MODULE_ASC
    EVENTS_VARIANCE_SAMPLE_MODULE_DESC
    EVENTS_VARIANCE_SAMPLE_TIMESTAMP_ASC
    EVENTS_VARIANCE_SAMPLE_TIMESTAMP_DESC
    HASH_ASC
    HASH_DESC
    ID_ASC
    ID_DESC
    INDEX_ASC
    INDEX_DESC
    IS_SIGNED_ASC
    IS_SIGNED_DESC
    IS_SUCCESS_ASC
    IS_SUCCESS_DESC
    METHOD_ASC
    METHOD_DESC
    MODULE_ASC
    MODULE_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SIGNER_ID_ASC
    SIGNER_ID_DESC
}

"Grouping methods for `KeygenThreshold` for usage during aggregation."
enum KeygenThresholdsGroupBy {
    BLOCK_ID
    CURRENT
    NEXT
    PENDING
}

"Methods to use when ordering `KeygenThreshold`."
enum KeygenThresholdsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    CURRENT_ASC
    CURRENT_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NEXT_ASC
    NEXT_DESC
    PENDING_ASC
    PENDING_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
}

"Grouping methods for `ProposalCounter` for usage during aggregation."
enum ProposalCountersGroupBy {
    BLOCK_ID
    BLOCK_NUMBER
    SIGNED_PROPOSALS_COUNT
    SIGNED_PROPOSALS_MAP
    STATUS_MAP
    UN_SIGNED_PROPOSALS_COUNT
    UN_SIGNED_PROPOSALS_MAP
}

"Methods to use when ordering `ProposalCounter`."
enum ProposalCountersOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SIGNED_PROPOSALS_COUNT_ASC
    SIGNED_PROPOSALS_COUNT_DESC
    SIGNED_PROPOSALS_MAP_ASC
    SIGNED_PROPOSALS_MAP_DESC
    STATUS_MAP_ASC
    STATUS_MAP_DESC
    UN_SIGNED_PROPOSALS_COUNT_ASC
    UN_SIGNED_PROPOSALS_COUNT_DESC
    UN_SIGNED_PROPOSALS_MAP_ASC
    UN_SIGNED_PROPOSALS_MAP_DESC
}

"Grouping methods for `ProposalItem` for usage during aggregation."
enum ProposalItemsGroupBy {
    BLOCK_ID
    BLOCK_NUMBER
    CURRENT_STATUS
    DATA
    NONCE
    REMOVED
    SIGNATURE
    STATUS
    TIMELINE_STATUS
    TYPE
    VOTES
}

"Methods to use when ordering `ProposalItem`."
enum ProposalItemsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    CURRENT_STATUS_ASC
    CURRENT_STATUS_DESC
    DATA_ASC
    DATA_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NONCE_ASC
    NONCE_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    REMOVED_ASC
    REMOVED_DESC
    SIGNATURE_ASC
    SIGNATURE_DESC
    STATUS_ASC
    STATUS_DESC
    TIMELINE_STATUS_ASC
    TIMELINE_STATUS_DESC
    TYPE_ASC
    TYPE_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_AVERAGE_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_COUNT_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_COUNT_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_DISTINCT_COUNT_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MAX_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_MIN_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_POPULATION_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_STDDEV_SAMPLE_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_SUM_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_POPULATION_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_PROPOSAL_ID_VARIANCE_SAMPLE_QUEUE_ID_DESC
    VOTES_ASC
    VOTES_DESC
}

enum ProposalType {
    AnchorCreateProposal
    AnchorUpdateProposal
    EvmProposal
    FeeRecipientUpdateProposal
    MaxDepositLimitUpdateProposal
    MinWithdrawalLimitUpdateProposal
    ProposerSetUpdateProposal
    RefreshVote
    RescueTokensProposal
    ResourceIdUpdateProposal
    SetTreasuryHandlerProposal
    SetVerifierProposal
    TokenAddProposal
    TokenRemoveProposal
    Unknown
    WrappingFeeUpdateProposal
}

"Grouping methods for `ProposerThreshold` for usage during aggregation."
enum ProposerThresholdsGroupBy {
    BLOCK_ID
    VALUE
}

"Methods to use when ordering `ProposerThreshold`."
enum ProposerThresholdsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    VALUE_ASC
    VALUE_DESC
}

"Grouping methods for `Proposer` for usage during aggregation."
enum ProposersGroupBy {
    BLOCK_ID
    COUNT
    PROPOSERS
}

"Methods to use when ordering `Proposer`."
enum ProposersOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    COUNT_ASC
    COUNT_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSERS_ASC
    PROPOSERS_DESC
}

"Grouping methods for `PublicKey` for usage during aggregation."
enum PublicKeysGroupBy {
    BLOCK_ID
    COMPRESSED
    HISTORY
}

"Methods to use when ordering `PublicKey`."
enum PublicKeysOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    COMPRESSED_ASC
    COMPRESSED_DESC
    HISTORY_ASC
    HISTORY_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SESSIONS_AVERAGE_AUTHORITIES_ASC
    SESSIONS_AVERAGE_AUTHORITIES_DESC
    SESSIONS_AVERAGE_BEST_AUTHORITIES_ASC
    SESSIONS_AVERAGE_BEST_AUTHORITIES_DESC
    SESSIONS_AVERAGE_BLOCK_ID_ASC
    SESSIONS_AVERAGE_BLOCK_ID_DESC
    SESSIONS_AVERAGE_BLOCK_NUMBER_ASC
    SESSIONS_AVERAGE_BLOCK_NUMBER_DESC
    SESSIONS_AVERAGE_ID_ASC
    SESSIONS_AVERAGE_ID_DESC
    SESSIONS_AVERAGE_KEY_GEN_THRESHOLD_ASC
    SESSIONS_AVERAGE_KEY_GEN_THRESHOLD_DESC
    SESSIONS_AVERAGE_NEXT_AUTHORITIES_ASC
    SESSIONS_AVERAGE_NEXT_AUTHORITIES_DESC
    SESSIONS_AVERAGE_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_AVERAGE_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_AVERAGE_PROPOSERS_ASC
    SESSIONS_AVERAGE_PROPOSERS_COUNT_ASC
    SESSIONS_AVERAGE_PROPOSERS_COUNT_DESC
    SESSIONS_AVERAGE_PROPOSERS_DESC
    SESSIONS_AVERAGE_PROPOSER_THRESHOLD_ASC
    SESSIONS_AVERAGE_PROPOSER_THRESHOLD_DESC
    SESSIONS_AVERAGE_PUBLIC_KEY_ID_ASC
    SESSIONS_AVERAGE_PUBLIC_KEY_ID_DESC
    SESSIONS_AVERAGE_SIGNATURE_THRESHOLD_ASC
    SESSIONS_AVERAGE_SIGNATURE_THRESHOLD_DESC
    SESSIONS_COUNT_ASC
    SESSIONS_COUNT_DESC
    SESSIONS_DISTINCT_COUNT_AUTHORITIES_ASC
    SESSIONS_DISTINCT_COUNT_AUTHORITIES_DESC
    SESSIONS_DISTINCT_COUNT_BEST_AUTHORITIES_ASC
    SESSIONS_DISTINCT_COUNT_BEST_AUTHORITIES_DESC
    SESSIONS_DISTINCT_COUNT_BLOCK_ID_ASC
    SESSIONS_DISTINCT_COUNT_BLOCK_ID_DESC
    SESSIONS_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    SESSIONS_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    SESSIONS_DISTINCT_COUNT_ID_ASC
    SESSIONS_DISTINCT_COUNT_ID_DESC
    SESSIONS_DISTINCT_COUNT_KEY_GEN_THRESHOLD_ASC
    SESSIONS_DISTINCT_COUNT_KEY_GEN_THRESHOLD_DESC
    SESSIONS_DISTINCT_COUNT_NEXT_AUTHORITIES_ASC
    SESSIONS_DISTINCT_COUNT_NEXT_AUTHORITIES_DESC
    SESSIONS_DISTINCT_COUNT_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_DISTINCT_COUNT_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_DISTINCT_COUNT_PROPOSERS_ASC
    SESSIONS_DISTINCT_COUNT_PROPOSERS_COUNT_ASC
    SESSIONS_DISTINCT_COUNT_PROPOSERS_COUNT_DESC
    SESSIONS_DISTINCT_COUNT_PROPOSERS_DESC
    SESSIONS_DISTINCT_COUNT_PROPOSER_THRESHOLD_ASC
    SESSIONS_DISTINCT_COUNT_PROPOSER_THRESHOLD_DESC
    SESSIONS_DISTINCT_COUNT_PUBLIC_KEY_ID_ASC
    SESSIONS_DISTINCT_COUNT_PUBLIC_KEY_ID_DESC
    SESSIONS_DISTINCT_COUNT_SIGNATURE_THRESHOLD_ASC
    SESSIONS_DISTINCT_COUNT_SIGNATURE_THRESHOLD_DESC
    SESSIONS_MAX_AUTHORITIES_ASC
    SESSIONS_MAX_AUTHORITIES_DESC
    SESSIONS_MAX_BEST_AUTHORITIES_ASC
    SESSIONS_MAX_BEST_AUTHORITIES_DESC
    SESSIONS_MAX_BLOCK_ID_ASC
    SESSIONS_MAX_BLOCK_ID_DESC
    SESSIONS_MAX_BLOCK_NUMBER_ASC
    SESSIONS_MAX_BLOCK_NUMBER_DESC
    SESSIONS_MAX_ID_ASC
    SESSIONS_MAX_ID_DESC
    SESSIONS_MAX_KEY_GEN_THRESHOLD_ASC
    SESSIONS_MAX_KEY_GEN_THRESHOLD_DESC
    SESSIONS_MAX_NEXT_AUTHORITIES_ASC
    SESSIONS_MAX_NEXT_AUTHORITIES_DESC
    SESSIONS_MAX_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_MAX_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_MAX_PROPOSERS_ASC
    SESSIONS_MAX_PROPOSERS_COUNT_ASC
    SESSIONS_MAX_PROPOSERS_COUNT_DESC
    SESSIONS_MAX_PROPOSERS_DESC
    SESSIONS_MAX_PROPOSER_THRESHOLD_ASC
    SESSIONS_MAX_PROPOSER_THRESHOLD_DESC
    SESSIONS_MAX_PUBLIC_KEY_ID_ASC
    SESSIONS_MAX_PUBLIC_KEY_ID_DESC
    SESSIONS_MAX_SIGNATURE_THRESHOLD_ASC
    SESSIONS_MAX_SIGNATURE_THRESHOLD_DESC
    SESSIONS_MIN_AUTHORITIES_ASC
    SESSIONS_MIN_AUTHORITIES_DESC
    SESSIONS_MIN_BEST_AUTHORITIES_ASC
    SESSIONS_MIN_BEST_AUTHORITIES_DESC
    SESSIONS_MIN_BLOCK_ID_ASC
    SESSIONS_MIN_BLOCK_ID_DESC
    SESSIONS_MIN_BLOCK_NUMBER_ASC
    SESSIONS_MIN_BLOCK_NUMBER_DESC
    SESSIONS_MIN_ID_ASC
    SESSIONS_MIN_ID_DESC
    SESSIONS_MIN_KEY_GEN_THRESHOLD_ASC
    SESSIONS_MIN_KEY_GEN_THRESHOLD_DESC
    SESSIONS_MIN_NEXT_AUTHORITIES_ASC
    SESSIONS_MIN_NEXT_AUTHORITIES_DESC
    SESSIONS_MIN_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_MIN_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_MIN_PROPOSERS_ASC
    SESSIONS_MIN_PROPOSERS_COUNT_ASC
    SESSIONS_MIN_PROPOSERS_COUNT_DESC
    SESSIONS_MIN_PROPOSERS_DESC
    SESSIONS_MIN_PROPOSER_THRESHOLD_ASC
    SESSIONS_MIN_PROPOSER_THRESHOLD_DESC
    SESSIONS_MIN_PUBLIC_KEY_ID_ASC
    SESSIONS_MIN_PUBLIC_KEY_ID_DESC
    SESSIONS_MIN_SIGNATURE_THRESHOLD_ASC
    SESSIONS_MIN_SIGNATURE_THRESHOLD_DESC
    SESSIONS_STDDEV_POPULATION_AUTHORITIES_ASC
    SESSIONS_STDDEV_POPULATION_AUTHORITIES_DESC
    SESSIONS_STDDEV_POPULATION_BEST_AUTHORITIES_ASC
    SESSIONS_STDDEV_POPULATION_BEST_AUTHORITIES_DESC
    SESSIONS_STDDEV_POPULATION_BLOCK_ID_ASC
    SESSIONS_STDDEV_POPULATION_BLOCK_ID_DESC
    SESSIONS_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    SESSIONS_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    SESSIONS_STDDEV_POPULATION_ID_ASC
    SESSIONS_STDDEV_POPULATION_ID_DESC
    SESSIONS_STDDEV_POPULATION_KEY_GEN_THRESHOLD_ASC
    SESSIONS_STDDEV_POPULATION_KEY_GEN_THRESHOLD_DESC
    SESSIONS_STDDEV_POPULATION_NEXT_AUTHORITIES_ASC
    SESSIONS_STDDEV_POPULATION_NEXT_AUTHORITIES_DESC
    SESSIONS_STDDEV_POPULATION_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_STDDEV_POPULATION_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_STDDEV_POPULATION_PROPOSERS_ASC
    SESSIONS_STDDEV_POPULATION_PROPOSERS_COUNT_ASC
    SESSIONS_STDDEV_POPULATION_PROPOSERS_COUNT_DESC
    SESSIONS_STDDEV_POPULATION_PROPOSERS_DESC
    SESSIONS_STDDEV_POPULATION_PROPOSER_THRESHOLD_ASC
    SESSIONS_STDDEV_POPULATION_PROPOSER_THRESHOLD_DESC
    SESSIONS_STDDEV_POPULATION_PUBLIC_KEY_ID_ASC
    SESSIONS_STDDEV_POPULATION_PUBLIC_KEY_ID_DESC
    SESSIONS_STDDEV_POPULATION_SIGNATURE_THRESHOLD_ASC
    SESSIONS_STDDEV_POPULATION_SIGNATURE_THRESHOLD_DESC
    SESSIONS_STDDEV_SAMPLE_AUTHORITIES_ASC
    SESSIONS_STDDEV_SAMPLE_AUTHORITIES_DESC
    SESSIONS_STDDEV_SAMPLE_BEST_AUTHORITIES_ASC
    SESSIONS_STDDEV_SAMPLE_BEST_AUTHORITIES_DESC
    SESSIONS_STDDEV_SAMPLE_BLOCK_ID_ASC
    SESSIONS_STDDEV_SAMPLE_BLOCK_ID_DESC
    SESSIONS_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    SESSIONS_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    SESSIONS_STDDEV_SAMPLE_ID_ASC
    SESSIONS_STDDEV_SAMPLE_ID_DESC
    SESSIONS_STDDEV_SAMPLE_KEY_GEN_THRESHOLD_ASC
    SESSIONS_STDDEV_SAMPLE_KEY_GEN_THRESHOLD_DESC
    SESSIONS_STDDEV_SAMPLE_NEXT_AUTHORITIES_ASC
    SESSIONS_STDDEV_SAMPLE_NEXT_AUTHORITIES_DESC
    SESSIONS_STDDEV_SAMPLE_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_STDDEV_SAMPLE_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_STDDEV_SAMPLE_PROPOSERS_ASC
    SESSIONS_STDDEV_SAMPLE_PROPOSERS_COUNT_ASC
    SESSIONS_STDDEV_SAMPLE_PROPOSERS_COUNT_DESC
    SESSIONS_STDDEV_SAMPLE_PROPOSERS_DESC
    SESSIONS_STDDEV_SAMPLE_PROPOSER_THRESHOLD_ASC
    SESSIONS_STDDEV_SAMPLE_PROPOSER_THRESHOLD_DESC
    SESSIONS_STDDEV_SAMPLE_PUBLIC_KEY_ID_ASC
    SESSIONS_STDDEV_SAMPLE_PUBLIC_KEY_ID_DESC
    SESSIONS_STDDEV_SAMPLE_SIGNATURE_THRESHOLD_ASC
    SESSIONS_STDDEV_SAMPLE_SIGNATURE_THRESHOLD_DESC
    SESSIONS_SUM_AUTHORITIES_ASC
    SESSIONS_SUM_AUTHORITIES_DESC
    SESSIONS_SUM_BEST_AUTHORITIES_ASC
    SESSIONS_SUM_BEST_AUTHORITIES_DESC
    SESSIONS_SUM_BLOCK_ID_ASC
    SESSIONS_SUM_BLOCK_ID_DESC
    SESSIONS_SUM_BLOCK_NUMBER_ASC
    SESSIONS_SUM_BLOCK_NUMBER_DESC
    SESSIONS_SUM_ID_ASC
    SESSIONS_SUM_ID_DESC
    SESSIONS_SUM_KEY_GEN_THRESHOLD_ASC
    SESSIONS_SUM_KEY_GEN_THRESHOLD_DESC
    SESSIONS_SUM_NEXT_AUTHORITIES_ASC
    SESSIONS_SUM_NEXT_AUTHORITIES_DESC
    SESSIONS_SUM_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_SUM_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_SUM_PROPOSERS_ASC
    SESSIONS_SUM_PROPOSERS_COUNT_ASC
    SESSIONS_SUM_PROPOSERS_COUNT_DESC
    SESSIONS_SUM_PROPOSERS_DESC
    SESSIONS_SUM_PROPOSER_THRESHOLD_ASC
    SESSIONS_SUM_PROPOSER_THRESHOLD_DESC
    SESSIONS_SUM_PUBLIC_KEY_ID_ASC
    SESSIONS_SUM_PUBLIC_KEY_ID_DESC
    SESSIONS_SUM_SIGNATURE_THRESHOLD_ASC
    SESSIONS_SUM_SIGNATURE_THRESHOLD_DESC
    SESSIONS_VARIANCE_POPULATION_AUTHORITIES_ASC
    SESSIONS_VARIANCE_POPULATION_AUTHORITIES_DESC
    SESSIONS_VARIANCE_POPULATION_BEST_AUTHORITIES_ASC
    SESSIONS_VARIANCE_POPULATION_BEST_AUTHORITIES_DESC
    SESSIONS_VARIANCE_POPULATION_BLOCK_ID_ASC
    SESSIONS_VARIANCE_POPULATION_BLOCK_ID_DESC
    SESSIONS_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    SESSIONS_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    SESSIONS_VARIANCE_POPULATION_ID_ASC
    SESSIONS_VARIANCE_POPULATION_ID_DESC
    SESSIONS_VARIANCE_POPULATION_KEY_GEN_THRESHOLD_ASC
    SESSIONS_VARIANCE_POPULATION_KEY_GEN_THRESHOLD_DESC
    SESSIONS_VARIANCE_POPULATION_NEXT_AUTHORITIES_ASC
    SESSIONS_VARIANCE_POPULATION_NEXT_AUTHORITIES_DESC
    SESSIONS_VARIANCE_POPULATION_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_VARIANCE_POPULATION_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_VARIANCE_POPULATION_PROPOSERS_ASC
    SESSIONS_VARIANCE_POPULATION_PROPOSERS_COUNT_ASC
    SESSIONS_VARIANCE_POPULATION_PROPOSERS_COUNT_DESC
    SESSIONS_VARIANCE_POPULATION_PROPOSERS_DESC
    SESSIONS_VARIANCE_POPULATION_PROPOSER_THRESHOLD_ASC
    SESSIONS_VARIANCE_POPULATION_PROPOSER_THRESHOLD_DESC
    SESSIONS_VARIANCE_POPULATION_PUBLIC_KEY_ID_ASC
    SESSIONS_VARIANCE_POPULATION_PUBLIC_KEY_ID_DESC
    SESSIONS_VARIANCE_POPULATION_SIGNATURE_THRESHOLD_ASC
    SESSIONS_VARIANCE_POPULATION_SIGNATURE_THRESHOLD_DESC
    SESSIONS_VARIANCE_SAMPLE_AUTHORITIES_ASC
    SESSIONS_VARIANCE_SAMPLE_AUTHORITIES_DESC
    SESSIONS_VARIANCE_SAMPLE_BEST_AUTHORITIES_ASC
    SESSIONS_VARIANCE_SAMPLE_BEST_AUTHORITIES_DESC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    SESSIONS_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    SESSIONS_VARIANCE_SAMPLE_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_KEY_GEN_THRESHOLD_ASC
    SESSIONS_VARIANCE_SAMPLE_KEY_GEN_THRESHOLD_DESC
    SESSIONS_VARIANCE_SAMPLE_NEXT_AUTHORITIES_ASC
    SESSIONS_VARIANCE_SAMPLE_NEXT_AUTHORITIES_DESC
    SESSIONS_VARIANCE_SAMPLE_NEXT_BEST_AUTHORITIES_ASC
    SESSIONS_VARIANCE_SAMPLE_NEXT_BEST_AUTHORITIES_DESC
    SESSIONS_VARIANCE_SAMPLE_PROPOSERS_ASC
    SESSIONS_VARIANCE_SAMPLE_PROPOSERS_COUNT_ASC
    SESSIONS_VARIANCE_SAMPLE_PROPOSERS_COUNT_DESC
    SESSIONS_VARIANCE_SAMPLE_PROPOSERS_DESC
    SESSIONS_VARIANCE_SAMPLE_PROPOSER_THRESHOLD_ASC
    SESSIONS_VARIANCE_SAMPLE_PROPOSER_THRESHOLD_DESC
    SESSIONS_VARIANCE_SAMPLE_PUBLIC_KEY_ID_ASC
    SESSIONS_VARIANCE_SAMPLE_PUBLIC_KEY_ID_DESC
    SESSIONS_VARIANCE_SAMPLE_SIGNATURE_THRESHOLD_ASC
    SESSIONS_VARIANCE_SAMPLE_SIGNATURE_THRESHOLD_DESC
    UNCOMPRESSED_ASC
    UNCOMPRESSED_DESC
}

"Grouping methods for `Session` for usage during aggregation."
enum SessionsGroupBy {
    AUTHORITIES
    BEST_AUTHORITIES
    BLOCK_ID
    BLOCK_NUMBER
    KEY_GEN_THRESHOLD
    NEXT_AUTHORITIES
    NEXT_BEST_AUTHORITIES
    PROPOSERS
    PROPOSERS_COUNT
    PROPOSER_THRESHOLD
    PUBLIC_KEY_ID
    SIGNATURE_THRESHOLD
}

"Methods to use when ordering `Session`."
enum SessionsOrderBy {
    AUTHORITIES_ASC
    AUTHORITIES_DESC
    BEST_AUTHORITIES_ASC
    BEST_AUTHORITIES_DESC
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    KEY_GEN_THRESHOLD_ASC
    KEY_GEN_THRESHOLD_DESC
    NATURAL
    NEXT_AUTHORITIES_ASC
    NEXT_AUTHORITIES_DESC
    NEXT_BEST_AUTHORITIES_ASC
    NEXT_BEST_AUTHORITIES_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSERS_ASC
    PROPOSERS_COUNT_ASC
    PROPOSERS_COUNT_DESC
    PROPOSERS_DESC
    PROPOSER_THRESHOLD_ASC
    PROPOSER_THRESHOLD_DESC
    PUBLIC_KEY_ID_ASC
    PUBLIC_KEY_ID_DESC
    SIGNATURE_THRESHOLD_ASC
    SIGNATURE_THRESHOLD_DESC
}

"Grouping methods for `SignatureThreshold` for usage during aggregation."
enum SignatureThresholdsGroupBy {
    BLOCK_ID
    CURRENT
    NEXT
    PENDING
}

"Methods to use when ordering `SignatureThreshold`."
enum SignatureThresholdsOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    CURRENT_ASC
    CURRENT_DESC
    ID_ASC
    ID_DESC
    NATURAL
    NEXT_ASC
    NEXT_DESC
    PENDING_ASC
    PENDING_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
}

"Grouping methods for `UnsignedProposalsQueueItem` for usage during aggregation."
enum UnsignedProposalsQueueItemsGroupBy {
    BLOCK_NUMBER
    PROPOSAL_ID
    QUEUE_ID
}

"Methods to use when ordering `UnsignedProposalsQueueItem`."
enum UnsignedProposalsQueueItemsOrderBy {
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    PROPOSAL_ID_ASC
    PROPOSAL_ID_DESC
    QUEUE_ID_ASC
    QUEUE_ID_DESC
}

"Grouping methods for `UnsignedProposalsQueue` for usage during aggregation."
enum UnsignedProposalsQueuesGroupBy {
    BLOCK_ID
    BLOCK_NUMBER
}

"Methods to use when ordering `UnsignedProposalsQueue`."
enum UnsignedProposalsQueuesOrderBy {
    BLOCK_ID_ASC
    BLOCK_ID_DESC
    BLOCK_NUMBER_ASC
    BLOCK_NUMBER_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_AVERAGE_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_COUNT_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_COUNT_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_DISTINCT_COUNT_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MAX_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_MIN_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_POPULATION_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_STDDEV_SAMPLE_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_SUM_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_POPULATION_QUEUE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_BLOCK_NUMBER_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_PROPOSAL_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_PROPOSAL_ID_DESC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_QUEUE_ID_ASC
    UNSIGNED_PROPOSALS_QUEUE_ITEMS_BY_QUEUE_ID_VARIANCE_SAMPLE_QUEUE_ID_DESC
}

"A floating point number that requires more precision than IEEE 754 binary 64"
scalar BigFloat

"""

A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"A location in a connection that can be used for resuming pagination."
scalar Cursor

"The day, does not include a time."
scalar Date

"""

A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A filter to be used against `Account` object types. All fields are combined with a logical ‘and.’"
input AccountFilter {
    "Checks for all expressions in this list."
    and: [AccountFilter!]
    "Filter by the object’s `createAtBlockId` field."
    createAtBlockId: StringFilter
    "Filter by the object’s `createdAt` field."
    createdAt: StringFilter
    "Filter by the object’s `creatorId` field."
    creatorId: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: AccountFilter
    "Checks for any expressions in this list."
    or: [AccountFilter!]
}

"Conditions for `Account` aggregates."
input AccountsHavingInput {
    AND: [AccountsHavingInput!]
    OR: [AccountsHavingInput!]
}

"Conditions for `Authority` aggregates."
input AuthoritiesHavingInput {
    AND: [AuthoritiesHavingInput!]
    OR: [AuthoritiesHavingInput!]
}

"A filter to be used against `Authority` object types. All fields are combined with a logical ‘and.’"
input AuthorityFilter {
    "Checks for all expressions in this list."
    and: [AuthorityFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `current` field."
    current: JSONFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `next` field."
    next: JSONFilter
    "Negates the expression."
    not: AuthorityFilter
    "Checks for any expressions in this list."
    or: [AuthorityFilter!]
}

"A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’"
input BigFloatFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: BigFloat
    "Equal to the specified value."
    equalTo: BigFloat
    "Greater than the specified value."
    greaterThan: BigFloat
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: BigFloat
    "Included in the specified list."
    in: [BigFloat!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: BigFloat
    "Less than or equal to the specified value."
    lessThanOrEqualTo: BigFloat
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: BigFloat
    "Not equal to the specified value."
    notEqualTo: BigFloat
    "Not included in the specified list."
    notIn: [BigFloat!]
}

"A filter to be used against `Block` object types. All fields are combined with a logical ‘and.’"
input BlockFilter {
    "Checks for all expressions in this list."
    and: [BlockFilter!]
    "Filter by the object’s `extrinsicsRoot` field."
    extrinsicsRoot: StringFilter
    "Filter by the object’s `hash` field."
    hash: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: BlockFilter
    "Filter by the object’s `number` field."
    number: BigFloatFilter
    "Checks for any expressions in this list."
    or: [BlockFilter!]
    "Filter by the object’s `parentHash` field."
    parentHash: StringFilter
    "Filter by the object’s `specVersion` field."
    specVersion: StringFilter
    "Filter by the object’s `stateRoot` field."
    stateRoot: StringFilter
    "Filter by the object’s `timestamp` field."
    timestamp: DatetimeFilter
}

input BlocksHavingAverageInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingDistinctCountInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

"Conditions for `Block` aggregates."
input BlocksHavingInput {
    AND: [BlocksHavingInput!]
    OR: [BlocksHavingInput!]
    average: BlocksHavingAverageInput
    distinctCount: BlocksHavingDistinctCountInput
    max: BlocksHavingMaxInput
    min: BlocksHavingMinInput
    stddevPopulation: BlocksHavingStddevPopulationInput
    stddevSample: BlocksHavingStddevSampleInput
    sum: BlocksHavingSumInput
    variancePopulation: BlocksHavingVariancePopulationInput
    varianceSample: BlocksHavingVarianceSampleInput
}

input BlocksHavingMaxInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingMinInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingStddevPopulationInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingStddevSampleInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingSumInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingVariancePopulationInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

input BlocksHavingVarianceSampleInput {
    number: HavingBigfloatFilter
    timestamp: HavingDatetimeFilter
}

"A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’"
input BooleanFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: Boolean
    "Equal to the specified value."
    equalTo: Boolean
    "Greater than the specified value."
    greaterThan: Boolean
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: Boolean
    "Included in the specified list."
    in: [Boolean!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: Boolean
    "Less than or equal to the specified value."
    lessThanOrEqualTo: Boolean
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: Boolean
    "Not equal to the specified value."
    notEqualTo: Boolean
    "Not included in the specified list."
    notIn: [Boolean!]
}

"A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’"
input DatetimeFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: Datetime
    "Equal to the specified value."
    equalTo: Datetime
    "Greater than the specified value."
    greaterThan: Datetime
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: Datetime
    "Included in the specified list."
    in: [Datetime!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: Datetime
    "Less than or equal to the specified value."
    lessThanOrEqualTo: Datetime
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: Datetime
    "Not equal to the specified value."
    notEqualTo: Datetime
    "Not included in the specified list."
    notIn: [Datetime!]
}

"A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’"
input EventFilter {
    "Checks for all expressions in this list."
    and: [EventFilter!]
    "Filter by the object’s `arguments` field."
    arguments: StringFilter
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: BigFloatFilter
    "Filter by the object’s `data` field."
    data: StringFilter
    "Filter by the object’s `docs` field."
    docs: StringFilter
    "Filter by the object’s `extrinsicId` field."
    extrinsicId: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `index` field."
    index: IntFilter
    "Filter by the object’s `method` field."
    method: StringFilter
    "Filter by the object’s `module` field."
    module: StringFilter
    "Negates the expression."
    not: EventFilter
    "Checks for any expressions in this list."
    or: [EventFilter!]
    "Filter by the object’s `timestamp` field."
    timestamp: DatetimeFilter
}

input EventsHavingAverageInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingDistinctCountInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

"Conditions for `Event` aggregates."
input EventsHavingInput {
    AND: [EventsHavingInput!]
    OR: [EventsHavingInput!]
    average: EventsHavingAverageInput
    distinctCount: EventsHavingDistinctCountInput
    max: EventsHavingMaxInput
    min: EventsHavingMinInput
    stddevPopulation: EventsHavingStddevPopulationInput
    stddevSample: EventsHavingStddevSampleInput
    sum: EventsHavingSumInput
    variancePopulation: EventsHavingVariancePopulationInput
    varianceSample: EventsHavingVarianceSampleInput
}

input EventsHavingMaxInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingMinInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingStddevPopulationInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingStddevSampleInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingSumInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingVariancePopulationInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

input EventsHavingVarianceSampleInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
    timestamp: HavingDatetimeFilter
}

"A filter to be used against `Extrinsic` object types. All fields are combined with a logical ‘and.’"
input ExtrinsicFilter {
    "Checks for all expressions in this list."
    and: [ExtrinsicFilter!]
    "Filter by the object’s `arguments` field."
    arguments: StringFilter
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: BigFloatFilter
    "Filter by the object’s `hash` field."
    hash: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `index` field."
    index: IntFilter
    "Filter by the object’s `isSigned` field."
    isSigned: BooleanFilter
    "Filter by the object’s `isSuccess` field."
    isSuccess: BooleanFilter
    "Filter by the object’s `method` field."
    method: StringFilter
    "Filter by the object’s `module` field."
    module: StringFilter
    "Negates the expression."
    not: ExtrinsicFilter
    "Checks for any expressions in this list."
    or: [ExtrinsicFilter!]
    "Filter by the object’s `signerId` field."
    signerId: StringFilter
}

input ExtrinsicsHavingAverageInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingDistinctCountInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

"Conditions for `Extrinsic` aggregates."
input ExtrinsicsHavingInput {
    AND: [ExtrinsicsHavingInput!]
    OR: [ExtrinsicsHavingInput!]
    average: ExtrinsicsHavingAverageInput
    distinctCount: ExtrinsicsHavingDistinctCountInput
    max: ExtrinsicsHavingMaxInput
    min: ExtrinsicsHavingMinInput
    stddevPopulation: ExtrinsicsHavingStddevPopulationInput
    stddevSample: ExtrinsicsHavingStddevSampleInput
    sum: ExtrinsicsHavingSumInput
    variancePopulation: ExtrinsicsHavingVariancePopulationInput
    varianceSample: ExtrinsicsHavingVarianceSampleInput
}

input ExtrinsicsHavingMaxInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingMinInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingStddevPopulationInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingStddevSampleInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingSumInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingVariancePopulationInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input ExtrinsicsHavingVarianceSampleInput {
    blockNumber: HavingBigfloatFilter
    index: HavingIntFilter
}

input HavingBigfloatFilter {
    equalTo: BigFloat
    greaterThan: BigFloat
    greaterThanOrEqualTo: BigFloat
    lessThan: BigFloat
    lessThanOrEqualTo: BigFloat
    notEqualTo: BigFloat
}

input HavingDatetimeFilter {
    equalTo: Datetime
    greaterThan: Datetime
    greaterThanOrEqualTo: Datetime
    lessThan: Datetime
    lessThanOrEqualTo: Datetime
    notEqualTo: Datetime
}

input HavingIntFilter {
    equalTo: Int
    greaterThan: Int
    greaterThanOrEqualTo: Int
    lessThan: Int
    lessThanOrEqualTo: Int
    notEqualTo: Int
}

"A filter to be used against Int fields. All fields are combined with a logical ‘and.’"
input IntFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: Int
    "Equal to the specified value."
    equalTo: Int
    "Greater than the specified value."
    greaterThan: Int
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: Int
    "Included in the specified list."
    in: [Int!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: Int
    "Less than or equal to the specified value."
    lessThanOrEqualTo: Int
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: Int
    "Not equal to the specified value."
    notEqualTo: Int
    "Not included in the specified list."
    notIn: [Int!]
}

"A filter to be used against JSON fields. All fields are combined with a logical ‘and.’"
input JSONFilter {
    "Contained by the specified JSON."
    containedBy: JSON
    "Contains the specified JSON."
    contains: JSON
    "Contains all of the specified keys."
    containsAllKeys: [String!]
    "Contains any of the specified keys."
    containsAnyKeys: [String!]
    "Contains the specified key."
    containsKey: String
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: JSON
    "Equal to the specified value."
    equalTo: JSON
    "Greater than the specified value."
    greaterThan: JSON
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: JSON
    "Included in the specified list."
    in: [JSON!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: JSON
    "Less than or equal to the specified value."
    lessThanOrEqualTo: JSON
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: JSON
    "Not equal to the specified value."
    notEqualTo: JSON
    "Not included in the specified list."
    notIn: [JSON!]
}

"A filter to be used against `KeygenThreshold` object types. All fields are combined with a logical ‘and.’"
input KeygenThresholdFilter {
    "Checks for all expressions in this list."
    and: [KeygenThresholdFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `current` field."
    current: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `next` field."
    next: IntFilter
    "Negates the expression."
    not: KeygenThresholdFilter
    "Checks for any expressions in this list."
    or: [KeygenThresholdFilter!]
    "Filter by the object’s `pending` field."
    pending: IntFilter
}

input KeygenThresholdsHavingAverageInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingDistinctCountInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"Conditions for `KeygenThreshold` aggregates."
input KeygenThresholdsHavingInput {
    AND: [KeygenThresholdsHavingInput!]
    OR: [KeygenThresholdsHavingInput!]
    average: KeygenThresholdsHavingAverageInput
    distinctCount: KeygenThresholdsHavingDistinctCountInput
    max: KeygenThresholdsHavingMaxInput
    min: KeygenThresholdsHavingMinInput
    stddevPopulation: KeygenThresholdsHavingStddevPopulationInput
    stddevSample: KeygenThresholdsHavingStddevSampleInput
    sum: KeygenThresholdsHavingSumInput
    variancePopulation: KeygenThresholdsHavingVariancePopulationInput
    varianceSample: KeygenThresholdsHavingVarianceSampleInput
}

input KeygenThresholdsHavingMaxInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingMinInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingStddevPopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingStddevSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingSumInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingVariancePopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input KeygenThresholdsHavingVarianceSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"A filter to be used against `ProposalCounter` object types. All fields are combined with a logical ‘and.’"
input ProposalCounterFilter {
    "Checks for all expressions in this list."
    and: [ProposalCounterFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ProposalCounterFilter
    "Checks for any expressions in this list."
    or: [ProposalCounterFilter!]
    "Filter by the object’s `signedProposalsCount` field."
    signedProposalsCount: IntFilter
    "Filter by the object’s `signedProposalsMap` field."
    signedProposalsMap: JSONFilter
    "Filter by the object’s `statusMap` field."
    statusMap: JSONFilter
    "Filter by the object’s `unSignedProposalsCount` field."
    unSignedProposalsCount: IntFilter
    "Filter by the object’s `unSignedProposalsMap` field."
    unSignedProposalsMap: JSONFilter
}

input ProposalCountersHavingAverageInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingDistinctCountInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

"Conditions for `ProposalCounter` aggregates."
input ProposalCountersHavingInput {
    AND: [ProposalCountersHavingInput!]
    OR: [ProposalCountersHavingInput!]
    average: ProposalCountersHavingAverageInput
    distinctCount: ProposalCountersHavingDistinctCountInput
    max: ProposalCountersHavingMaxInput
    min: ProposalCountersHavingMinInput
    stddevPopulation: ProposalCountersHavingStddevPopulationInput
    stddevSample: ProposalCountersHavingStddevSampleInput
    sum: ProposalCountersHavingSumInput
    variancePopulation: ProposalCountersHavingVariancePopulationInput
    varianceSample: ProposalCountersHavingVarianceSampleInput
}

input ProposalCountersHavingMaxInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingMinInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingStddevSampleInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingSumInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

input ProposalCountersHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
    signedProposalsCount: HavingIntFilter
    unSignedProposalsCount: HavingIntFilter
}

"A filter to be used against `ProposalItem` object types. All fields are combined with a logical ‘and.’"
input ProposalItemFilter {
    "Checks for all expressions in this list."
    and: [ProposalItemFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `currentStatus` field."
    currentStatus: JSONFilter
    "Filter by the object’s `data` field."
    data: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `nonce` field."
    nonce: IntFilter
    "Negates the expression."
    not: ProposalItemFilter
    "Checks for any expressions in this list."
    or: [ProposalItemFilter!]
    "Filter by the object’s `removed` field."
    removed: BooleanFilter
    "Filter by the object’s `signature` field."
    signature: StringFilter
    "Filter by the object’s `status` field."
    status: StringFilter
    "Filter by the object’s `timelineStatus` field."
    timelineStatus: JSONFilter
    "Filter by the object’s `type` field."
    type: ProposalTypeFilter
    "Filter by the object’s `votes` field."
    votes: JSONFilter
}

input ProposalItemsHavingAverageInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingDistinctCountInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

"Conditions for `ProposalItem` aggregates."
input ProposalItemsHavingInput {
    AND: [ProposalItemsHavingInput!]
    OR: [ProposalItemsHavingInput!]
    average: ProposalItemsHavingAverageInput
    distinctCount: ProposalItemsHavingDistinctCountInput
    max: ProposalItemsHavingMaxInput
    min: ProposalItemsHavingMinInput
    stddevPopulation: ProposalItemsHavingStddevPopulationInput
    stddevSample: ProposalItemsHavingStddevSampleInput
    sum: ProposalItemsHavingSumInput
    variancePopulation: ProposalItemsHavingVariancePopulationInput
    varianceSample: ProposalItemsHavingVarianceSampleInput
}

input ProposalItemsHavingMaxInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingMinInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingStddevSampleInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingSumInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

input ProposalItemsHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
    nonce: HavingIntFilter
}

"A filter to be used against ProposalType fields. All fields are combined with a logical ‘and.’"
input ProposalTypeFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: ProposalType
    "Equal to the specified value."
    equalTo: ProposalType
    "Greater than the specified value."
    greaterThan: ProposalType
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: ProposalType
    "Included in the specified list."
    in: [ProposalType!]
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: ProposalType
    "Less than or equal to the specified value."
    lessThanOrEqualTo: ProposalType
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: ProposalType
    "Not equal to the specified value."
    notEqualTo: ProposalType
    "Not included in the specified list."
    notIn: [ProposalType!]
}

"A filter to be used against `Proposer` object types. All fields are combined with a logical ‘and.’"
input ProposerFilter {
    "Checks for all expressions in this list."
    and: [ProposerFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `count` field."
    count: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ProposerFilter
    "Checks for any expressions in this list."
    or: [ProposerFilter!]
    "Filter by the object’s `proposers` field."
    proposers: JSONFilter
}

"A filter to be used against `ProposerThreshold` object types. All fields are combined with a logical ‘and.’"
input ProposerThresholdFilter {
    "Checks for all expressions in this list."
    and: [ProposerThresholdFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: ProposerThresholdFilter
    "Checks for any expressions in this list."
    or: [ProposerThresholdFilter!]
    "Filter by the object’s `value` field."
    value: IntFilter
}

input ProposerThresholdsHavingAverageInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingDistinctCountInput {
    value: HavingIntFilter
}

"Conditions for `ProposerThreshold` aggregates."
input ProposerThresholdsHavingInput {
    AND: [ProposerThresholdsHavingInput!]
    OR: [ProposerThresholdsHavingInput!]
    average: ProposerThresholdsHavingAverageInput
    distinctCount: ProposerThresholdsHavingDistinctCountInput
    max: ProposerThresholdsHavingMaxInput
    min: ProposerThresholdsHavingMinInput
    stddevPopulation: ProposerThresholdsHavingStddevPopulationInput
    stddevSample: ProposerThresholdsHavingStddevSampleInput
    sum: ProposerThresholdsHavingSumInput
    variancePopulation: ProposerThresholdsHavingVariancePopulationInput
    varianceSample: ProposerThresholdsHavingVarianceSampleInput
}

input ProposerThresholdsHavingMaxInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingMinInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingStddevPopulationInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingStddevSampleInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingSumInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingVariancePopulationInput {
    value: HavingIntFilter
}

input ProposerThresholdsHavingVarianceSampleInput {
    value: HavingIntFilter
}

input ProposersHavingAverageInput {
    count: HavingIntFilter
}

input ProposersHavingDistinctCountInput {
    count: HavingIntFilter
}

"Conditions for `Proposer` aggregates."
input ProposersHavingInput {
    AND: [ProposersHavingInput!]
    OR: [ProposersHavingInput!]
    average: ProposersHavingAverageInput
    distinctCount: ProposersHavingDistinctCountInput
    max: ProposersHavingMaxInput
    min: ProposersHavingMinInput
    stddevPopulation: ProposersHavingStddevPopulationInput
    stddevSample: ProposersHavingStddevSampleInput
    sum: ProposersHavingSumInput
    variancePopulation: ProposersHavingVariancePopulationInput
    varianceSample: ProposersHavingVarianceSampleInput
}

input ProposersHavingMaxInput {
    count: HavingIntFilter
}

input ProposersHavingMinInput {
    count: HavingIntFilter
}

input ProposersHavingStddevPopulationInput {
    count: HavingIntFilter
}

input ProposersHavingStddevSampleInput {
    count: HavingIntFilter
}

input ProposersHavingSumInput {
    count: HavingIntFilter
}

input ProposersHavingVariancePopulationInput {
    count: HavingIntFilter
}

input ProposersHavingVarianceSampleInput {
    count: HavingIntFilter
}

"A filter to be used against `PublicKey` object types. All fields are combined with a logical ‘and.’"
input PublicKeyFilter {
    "Checks for all expressions in this list."
    and: [PublicKeyFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `compressed` field."
    compressed: StringFilter
    "Filter by the object’s `history` field."
    history: JSONFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: PublicKeyFilter
    "Checks for any expressions in this list."
    or: [PublicKeyFilter!]
    "Filter by the object’s `uncompressed` field."
    uncompressed: StringFilter
}

"Conditions for `PublicKey` aggregates."
input PublicKeysHavingInput {
    AND: [PublicKeysHavingInput!]
    OR: [PublicKeysHavingInput!]
}

"A filter to be used against `Session` object types. All fields are combined with a logical ‘and.’"
input SessionFilter {
    "Checks for all expressions in this list."
    and: [SessionFilter!]
    "Filter by the object’s `authorities` field."
    authorities: JSONFilter
    "Filter by the object’s `bestAuthorities` field."
    bestAuthorities: JSONFilter
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `keyGenThreshold` field."
    keyGenThreshold: JSONFilter
    "Filter by the object’s `nextAuthorities` field."
    nextAuthorities: JSONFilter
    "Filter by the object’s `nextBestAuthorities` field."
    nextBestAuthorities: JSONFilter
    "Negates the expression."
    not: SessionFilter
    "Checks for any expressions in this list."
    or: [SessionFilter!]
    "Filter by the object’s `proposerThreshold` field."
    proposerThreshold: JSONFilter
    "Filter by the object’s `proposers` field."
    proposers: JSONFilter
    "Filter by the object’s `proposersCount` field."
    proposersCount: IntFilter
    "Filter by the object’s `publicKeyId` field."
    publicKeyId: StringFilter
    "Filter by the object’s `signatureThreshold` field."
    signatureThreshold: JSONFilter
}

input SessionsHavingAverageInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

input SessionsHavingDistinctCountInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

"Conditions for `Session` aggregates."
input SessionsHavingInput {
    AND: [SessionsHavingInput!]
    OR: [SessionsHavingInput!]
    average: SessionsHavingAverageInput
    distinctCount: SessionsHavingDistinctCountInput
    max: SessionsHavingMaxInput
    min: SessionsHavingMinInput
    stddevPopulation: SessionsHavingStddevPopulationInput
    stddevSample: SessionsHavingStddevSampleInput
    sum: SessionsHavingSumInput
    variancePopulation: SessionsHavingVariancePopulationInput
    varianceSample: SessionsHavingVarianceSampleInput
}

input SessionsHavingMaxInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

input SessionsHavingMinInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

input SessionsHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

input SessionsHavingStddevSampleInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

input SessionsHavingSumInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

input SessionsHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

input SessionsHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
    proposersCount: HavingIntFilter
}

"A filter to be used against `SignatureThreshold` object types. All fields are combined with a logical ‘and.’"
input SignatureThresholdFilter {
    "Checks for all expressions in this list."
    and: [SignatureThresholdFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `current` field."
    current: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Filter by the object’s `next` field."
    next: IntFilter
    "Negates the expression."
    not: SignatureThresholdFilter
    "Checks for any expressions in this list."
    or: [SignatureThresholdFilter!]
    "Filter by the object’s `pending` field."
    pending: IntFilter
}

input SignatureThresholdsHavingAverageInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingDistinctCountInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"Conditions for `SignatureThreshold` aggregates."
input SignatureThresholdsHavingInput {
    AND: [SignatureThresholdsHavingInput!]
    OR: [SignatureThresholdsHavingInput!]
    average: SignatureThresholdsHavingAverageInput
    distinctCount: SignatureThresholdsHavingDistinctCountInput
    max: SignatureThresholdsHavingMaxInput
    min: SignatureThresholdsHavingMinInput
    stddevPopulation: SignatureThresholdsHavingStddevPopulationInput
    stddevSample: SignatureThresholdsHavingStddevSampleInput
    sum: SignatureThresholdsHavingSumInput
    variancePopulation: SignatureThresholdsHavingVariancePopulationInput
    varianceSample: SignatureThresholdsHavingVarianceSampleInput
}

input SignatureThresholdsHavingMaxInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingMinInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingStddevPopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingStddevSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingSumInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingVariancePopulationInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

input SignatureThresholdsHavingVarianceSampleInput {
    current: HavingIntFilter
    next: HavingIntFilter
    pending: HavingIntFilter
}

"A filter to be used against String fields. All fields are combined with a logical ‘and.’"
input StringFilter {
    "Not equal to the specified value, treating null like an ordinary value."
    distinctFrom: String
    "Not equal to the specified value, treating null like an ordinary value (case-insensitive)."
    distinctFromInsensitive: String
    "Ends with the specified string (case-sensitive)."
    endsWith: String
    "Ends with the specified string (case-insensitive)."
    endsWithInsensitive: String
    "Equal to the specified value."
    equalTo: String
    "Equal to the specified value (case-insensitive)."
    equalToInsensitive: String
    "Greater than the specified value."
    greaterThan: String
    "Greater than the specified value (case-insensitive)."
    greaterThanInsensitive: String
    "Greater than or equal to the specified value."
    greaterThanOrEqualTo: String
    "Greater than or equal to the specified value (case-insensitive)."
    greaterThanOrEqualToInsensitive: String
    "Included in the specified list."
    in: [String!]
    "Included in the specified list (case-insensitive)."
    inInsensitive: [String!]
    "Contains the specified string (case-sensitive)."
    includes: String
    "Contains the specified string (case-insensitive)."
    includesInsensitive: String
    "Is null (if `true` is specified) or is not null (if `false` is specified)."
    isNull: Boolean
    "Less than the specified value."
    lessThan: String
    "Less than the specified value (case-insensitive)."
    lessThanInsensitive: String
    "Less than or equal to the specified value."
    lessThanOrEqualTo: String
    "Less than or equal to the specified value (case-insensitive)."
    lessThanOrEqualToInsensitive: String
    "Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."
    like: String
    "Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."
    likeInsensitive: String
    "Equal to the specified value, treating null like an ordinary value."
    notDistinctFrom: String
    "Equal to the specified value, treating null like an ordinary value (case-insensitive)."
    notDistinctFromInsensitive: String
    "Does not end with the specified string (case-sensitive)."
    notEndsWith: String
    "Does not end with the specified string (case-insensitive)."
    notEndsWithInsensitive: String
    "Not equal to the specified value."
    notEqualTo: String
    "Not equal to the specified value (case-insensitive)."
    notEqualToInsensitive: String
    "Not included in the specified list."
    notIn: [String!]
    "Not included in the specified list (case-insensitive)."
    notInInsensitive: [String!]
    "Does not contain the specified string (case-sensitive)."
    notIncludes: String
    "Does not contain the specified string (case-insensitive)."
    notIncludesInsensitive: String
    "Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."
    notLike: String
    "Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."
    notLikeInsensitive: String
    "Does not start with the specified string (case-sensitive)."
    notStartsWith: String
    "Does not start with the specified string (case-insensitive)."
    notStartsWithInsensitive: String
    "Starts with the specified string (case-sensitive)."
    startsWith: String
    "Starts with the specified string (case-insensitive)."
    startsWithInsensitive: String
}

"A filter to be used against `UnsignedProposalsQueue` object types. All fields are combined with a logical ‘and.’"
input UnsignedProposalsQueueFilter {
    "Checks for all expressions in this list."
    and: [UnsignedProposalsQueueFilter!]
    "Filter by the object’s `blockId` field."
    blockId: StringFilter
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: UnsignedProposalsQueueFilter
    "Checks for any expressions in this list."
    or: [UnsignedProposalsQueueFilter!]
}

"A filter to be used against `UnsignedProposalsQueueItem` object types. All fields are combined with a logical ‘and.’"
input UnsignedProposalsQueueItemFilter {
    "Checks for all expressions in this list."
    and: [UnsignedProposalsQueueItemFilter!]
    "Filter by the object’s `blockNumber` field."
    blockNumber: IntFilter
    "Filter by the object’s `id` field."
    id: StringFilter
    "Negates the expression."
    not: UnsignedProposalsQueueItemFilter
    "Checks for any expressions in this list."
    or: [UnsignedProposalsQueueItemFilter!]
    "Filter by the object’s `proposalId` field."
    proposalId: StringFilter
    "Filter by the object’s `queueId` field."
    queueId: StringFilter
}

input UnsignedProposalsQueueItemsHavingAverageInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingDistinctCountInput {
    blockNumber: HavingIntFilter
}

"Conditions for `UnsignedProposalsQueueItem` aggregates."
input UnsignedProposalsQueueItemsHavingInput {
    AND: [UnsignedProposalsQueueItemsHavingInput!]
    OR: [UnsignedProposalsQueueItemsHavingInput!]
    average: UnsignedProposalsQueueItemsHavingAverageInput
    distinctCount: UnsignedProposalsQueueItemsHavingDistinctCountInput
    max: UnsignedProposalsQueueItemsHavingMaxInput
    min: UnsignedProposalsQueueItemsHavingMinInput
    stddevPopulation: UnsignedProposalsQueueItemsHavingStddevPopulationInput
    stddevSample: UnsignedProposalsQueueItemsHavingStddevSampleInput
    sum: UnsignedProposalsQueueItemsHavingSumInput
    variancePopulation: UnsignedProposalsQueueItemsHavingVariancePopulationInput
    varianceSample: UnsignedProposalsQueueItemsHavingVarianceSampleInput
}

input UnsignedProposalsQueueItemsHavingMaxInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingMinInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingStddevSampleInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingSumInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueueItemsHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingAverageInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingDistinctCountInput {
    blockNumber: HavingIntFilter
}

"Conditions for `UnsignedProposalsQueue` aggregates."
input UnsignedProposalsQueuesHavingInput {
    AND: [UnsignedProposalsQueuesHavingInput!]
    OR: [UnsignedProposalsQueuesHavingInput!]
    average: UnsignedProposalsQueuesHavingAverageInput
    distinctCount: UnsignedProposalsQueuesHavingDistinctCountInput
    max: UnsignedProposalsQueuesHavingMaxInput
    min: UnsignedProposalsQueuesHavingMinInput
    stddevPopulation: UnsignedProposalsQueuesHavingStddevPopulationInput
    stddevSample: UnsignedProposalsQueuesHavingStddevSampleInput
    sum: UnsignedProposalsQueuesHavingSumInput
    variancePopulation: UnsignedProposalsQueuesHavingVariancePopulationInput
    varianceSample: UnsignedProposalsQueuesHavingVarianceSampleInput
}

input UnsignedProposalsQueuesHavingMaxInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingMinInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingStddevPopulationInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingStddevSampleInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingSumInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingVariancePopulationInput {
    blockNumber: HavingIntFilter
}

input UnsignedProposalsQueuesHavingVarianceSampleInput {
    blockNumber: HavingIntFilter
}
