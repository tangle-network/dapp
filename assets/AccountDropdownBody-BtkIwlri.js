import{j as e}from"./jsx-runtime-BbjHj44Y.js";import{R as T,T as f,C as N,P as k,a as D,b as j,D as g}from"./DropdownMenuItem-CysMNRwX.js";import{c}from"./index-BpvXyOxN.js";import{r as s}from"./index-C6mWTJJr.js";import{t as d}from"./bundle-mjs-D696Ktp4.js";import{f as q,H as C}from"./ProposalBadge-aTrZS74o.js";import"./create-icon-BPUPqOkJ.js";import"./ChainIcon-MpKHrVma.js";import"./InformationLine-D6uBLwmF.js";import"./Spinner-C8gHa2rr.js";import"./Alert-CUeVEtwL.js";import"./StatusIndicator-BMH2ux_C.js";import{A as M}from"./Avatar-BFvCMqwp.js";import{T as I}from"./Typography-BXoXAd7x.js";import{i as _,a as A}from"./isSubstrateAddress-Bz2nwvvb.js";import"./index.browser.esm-BZmtMS8Q.js";import"./index-VMVr2VZz.js";const w=s.forwardRef(({children:a,className:r,radixRootProps:t,...n},o)=>e.jsx("div",{...n,className:d("relative inline-block text-left",r),ref:o,children:e.jsx(T,{modal:!1,...t,children:a})}));w.__docgenInfo={description:"The wrapper of Radix `DropdownRoot`",methods:[],displayName:"Dropdown",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""},radixRootProps:{required:!1,tsType:{name:"RdxDropdownMenuProps"},description:"The root radix dropdown props"}}};const O=s.forwardRef(({children:a,className:r,isFullWidth:t,...n},o)=>e.jsx(f,{asChild:!0,children:e.jsx("button",{...n,className:d(c({"block w-full":t}),r),ref:o,children:a})}));O.__docgenInfo={description:"The `DropdownMenu` trigger function, must use inside the `Dropdown` component",methods:[],displayName:"DropdownBasicButton",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""},isFullWidth:{required:!1,tsType:{name:"boolean"},description:"If true, the button will be rendered as a full width button"},hideChevron:{required:!1,tsType:{name:"boolean"},description:""}},composes:["Pick"]};const h=s.forwardRef(({children:a,className:r,size:t,isPortal:n=!0,...o},i)=>{const l=e.jsx(N,{align:"end",...o,sideOffset:t==="sm"?8:0,className:d(c("radix-side-top:animate-slide-up radix-side-bottom:animate-slide-down","min-w-[176px] shadow-md overflow-x-hidden overflow-y-auto",t==="md"?"rounded-b-lg border border-t-0":"rounded-lg border","border-mono-80 dark:border-mono-120","bg-mono-0 dark:bg-mono-180","max-h-[var(--radix-dropdown-menu-content-max-height)]"),r),ref:i,children:a});return n?e.jsx(k,{children:l}):l});h.__docgenInfo={description:"The style wrapper around Radix `Content` and `Portal` component, must use inside the `Dropdown` component",methods:[],displayName:"DropdownBody",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""},isPortal:{required:!1,tsType:{name:"boolean"},description:`If true, the dropdown will be rendered as a portal
@default true`,defaultValue:{value:"true",computed:!1}}},composes:["Pick","DropdownMenuContentProps"]};const b=s.forwardRef(({className:a,icon:r,label:t,size:n,isFullWidth:o,hideChevron:i,...l},p)=>e.jsx(f,{asChild:!0,children:e.jsxs("button",{...l,className:d(c("border rounded-lg uppercase group","transition-none transition-[border-radius]","pl-4 py-2",o&&"inline-block w-full",n==="md"?"min-w-[176px]":"min-w-[96px]","flex items-center justify-between","bg-mono-0 dark:bg-mono-180","border-mono-80 dark:border-mono-120","text-mono-140 dark:text-mono-40","hover:enabled:border-blue-40 dark:hover:enabled:border-blue-70","enabled:radix-state-open:border-blue-40 dark:enabled:radix-state-open:border-blue-70","enabled:radix-state-open:bg-blue-0 dark:enabled:radix-state-open:bg-blue-120",n!=="sm"&&"enabled:radix-state-open:rounded-t-lg",n!=="sm"&&"enabled:radix-state-open:rounded-b-none"),a),ref:p,children:[e.jsxs("div",{className:"flex items-center max-w-full gap-1 overflow-x-hidden",children:[r&&e.jsx("span",{className:"text-inherit",children:r}),t&&e.jsx("span",{className:c("text-inherit",n==="md"?"body1":"body2"),children:t})]}),!i&&e.jsx(q,{className:"mx-2 transition-transform duration-300 ease-in-out enabled:group-radix-state-open:rotate-180"})]})}));b.__docgenInfo={description:"The `DropdownMenu` trigger function, must use inside the `Dropdown` component",methods:[],displayName:"DropdownButton",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""},isFullWidth:{required:!1,tsType:{name:"boolean"},description:"If true, the button will be rendered as a full width button"},hideChevron:{required:!1,tsType:{name:"boolean"},description:""}},composes:["Pick"]};const B=s.memo(({className:a,...r})=>e.jsx(C,{...r,className:d("inline-block","transition-transform duration-300 ease-in-out group-radix-state-open:rotate-90",a)}));B.__docgenInfo={description:"Extract icon to prevent re-render and keep the animation",methods:[],displayName:"AnimatedChevronRight"};const E=s.forwardRef((a,r)=>{const{className:t,icon:n,label:o,menuOptions:i,onChange:l,size:p="md",value:m}=a,y=s.useMemo(()=>{if(n)return s.cloneElement(n,{...n.props,size:p==="md"?"lg":"md",className:d("fill-current dark:fill-current",n.props.className)})},[n,p]),x=s.useMemo(()=>{if(m)return m;if(!o&&!i.length)throw new Error("DropdownMenu without label needs an option list to render");return!o&&i.length>0?i[0].value:o},[o,i,m]);return e.jsxs(w,{className:t,ref:r,children:[e.jsx(b,{label:x,icon:y,size:p}),e.jsx(h,{size:p,children:e.jsx(D,{value:m,onValueChange:l,children:i.map(({icon:v,value:u},R)=>e.jsx(j,{value:u,asChild:!0,children:e.jsx(g,{rightIcon:v,children:u})},`${u}-${R}`))})})]})});E.__docgenInfo={description:"The `DropdownMenu` component\n\n- `size`: The `Dropdown` size\n- `label`: The label to be display, if not provided, the `Dropdown` trigger will display the value property\n- `icon`: The icon before the `Dropdown` label\n- `menuOptions`: Options array to display\n- `value`: Current selected value (default will get the first item in the option list)\n- `onChange`: Callback function to update the value\n\n```jsx\n <DropdownMenu className='mr-3' size='sm' label='Filter' icon={<Filter />} menuOptions={dropdownOptions} />\n <DropdownMenu\n   label='Brand'\n   menuOptions={dropdownOptions}\n   value={value}\n   onChange={(nextVal) => setValue(nextVal)}\n />\n```",methods:[],displayName:"DropdownMenu",props:{size:{required:!1,tsType:{name:"union",raw:"'md' | 'sm'",elements:[{name:"literal",value:"'md'"},{name:"literal",value:"'sm'"}]},description:"The `Dropdown` size"},label:{required:!1,tsType:{name:"string"},description:"The label to be display, if not provided, the `Dropdown` trigger will display the value property"},icon:{required:!1,tsType:{name:"ReactReactElement",raw:"React.ReactElement"},description:"The icon before the `Dropdown` label"},menuOptions:{required:!0,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  /**
   * The item value and the display text
   */
  value: string;
  /**
   * Item icon
   */
  icon?: React.ReactElement;
}`,signature:{properties:[{key:"value",value:{name:"string",required:!0},description:"The item value and the display text"},{key:"icon",value:{name:"ReactReactElement",raw:"React.ReactElement",required:!1},description:"Item icon"}]}}],raw:"Array<DropDownMemuOption>"},description:"Options array to display"},value:{required:!1,tsType:{name:"string"},description:"Current selected value"},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(nextValue: string) => void",signature:{arguments:[{type:{name:"string"},name:"nextValue"}],return:{name:"void"}}},description:"Callback function to update the value"}},composes:["Omit"]};const P=({accountItems:a,className:r,addressShortenFn:t})=>e.jsx(h,{className:d("radix-side-top:mb-2 radix-side-bottom:mt-2 w-[var(--radix-dropdown-menu-trigger-width)]",r),children:e.jsx("ul",{children:a.map(({address:n,name:o,onClick:i})=>e.jsx("li",{onClick:i,children:e.jsxs(g,{textTransform:"",leftIcon:e.jsx(M,{theme:_(n)?"ethereum":A(n)?"substrate":void 0,value:n}),children:[o," ",e.jsx(I,{variant:"mkt-caption",children:t?t(n):n})]})},n))})});P.__docgenInfo={description:"",methods:[],displayName:"AccountDropdownBody",props:{accountItems:{required:!0,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  address: string;
  name: string;
  onClick: () => void;
}`,signature:{properties:[{key:"address",value:{name:"string",required:!0}},{key:"name",value:{name:"string",required:!0}},{key:"onClick",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!0}}]}}],raw:`{
  address: string;
  name: string;
  onClick: () => void;
}[]`},description:""},className:{required:!1,tsType:{name:"string"},description:""},addressShortenFn:{required:!1,tsType:{name:"signature",type:"function",raw:"(address: string) => string",signature:{arguments:[{type:{name:"string"},name:"address"}],return:{name:"string"}}},description:""}}};export{P as A,w as D,b as a,h as b,E as c,O as d,B as e};
