import{j as g}from"./jsx-runtime-BbjHj44Y.js";import{r as a}from"./index-C6mWTJJr.js";import{t as u}from"./bundle-mjs-D696Ktp4.js";const m={blue:{active:"text-blue-90 bg-blue-10 dark:text-blue-30 dark:bg-blue-120",disabled:"bg-blue-10 text-blue-40 dark:bg-blue-120 dark:text-blue-90",selected:"border-solid border-2 border-blue-90 dark:border-blue-30"},green:{active:"bg-green-10 text-green-90 dark:bg-green-120 dark:text-green-50",disabled:"bg-green-10 text-green-40 dark:bg-green-120 dark:text-green-90",selected:"border-solid border-2 border-green-90 dark:border-green-50"},purple:{active:"bg-purple-10 text-purple-100 dark:bg-purple-20 dark:text-purple-100",disabled:"bg-purple-10 text-purple-40 dark:bg-purple-120 dark:text-purple-90",selected:"border-solid border-2 border-purple-90 dark:border-purple-50"},red:{active:"bg-red-10 text-red-90 dark:bg-red-120 dark:text-red-50",disabled:"bg-red-10 text-red-40 dark:bg-red-120 dark:text-red-90",selected:"border-solid border-2 border-red-90 dark:border-red-50"},yellow:{active:"bg-yellow-10 text-yellow-90 dark:bg-yellow-120 dark:text-yellow-50",disabled:"bg-yellow-10 text-yellow-40 dark:bg-yellow-120 dark:text-yellow-90",selected:"border-solid border-2 border-yellow-90 dark:border-yellow-30"},grey:{active:"bg-inherit text-mono-120 dark:inherit dark:text-mono-80",disabled:"bg-mono-200/[5%] text-mono-160 dark:bg-mono-0/[5%] dark:text-mono-0",selected:"border-solid border-2 border-mono-120 dark:border-mono-80"},"dark-grey":{active:"bg-mono-100 dark:bg-mono-140 !text-mono-0",disabled:"!opacity-50",selected:"border-solid border-2 border-mono-120 dark:border-mono-80"}};function k(l,t,o){const{active:e,disabled:r,selected:d}=m[l];return{activeOrDisable:t?r:e,selected:o?d:""}}const x=a.forwardRef((l,t)=>{const{children:o,className:e,color:r="green",isDisabled:d,isSelected:s,...i}=l,n=a.useMemo(()=>"box-border inline-flex items-center gap-2 px-3 py-1.5 rounded-full uppercase text-[12px] leading-[15px] font-bold",[]),b=a.useMemo(()=>{const{activeOrDisable:p,selected:c}=k(r,d,s);return u(n,p,c,e)},[n,r,d,s,e]);return g.jsx("span",{className:b,...i,ref:t,children:o})});x.__docgenInfo={description:'The `Chip` component\n\nProps:\n\n- `color`: The visual style of the badge (default: "green")\n- `isDisabled`: If `true`, the chip will display as disabled state\n\n@example\n\n```jsx\n <Chip>Active</Chip>\n <Chip color="red" isDisabled>Disabled</Chip>\n```',methods:[],displayName:"Chip",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"ReactNode"},description:""},color:{required:!1,tsType:{name:"union",raw:`| 'green'
| 'blue'
| 'purple'
| 'yellow'
| 'red'
| 'grey'
| 'dark-grey'`,elements:[{name:"literal",value:"'green'"},{name:"literal",value:"'blue'"},{name:"literal",value:"'purple'"},{name:"literal",value:"'yellow'"},{name:"literal",value:"'red'"},{name:"literal",value:"'grey'"},{name:"literal",value:"'dark-grey'"}]},description:`The visual style of the badge

@type {("green"|"blue"|"purple"|"yellow"|"red" | "grey" | "dark-grey")}

@default "green"`},isDisabled:{required:!1,tsType:{name:"boolean"},description:"If `true`, the chip will display as disabled state"},isSelected:{required:!1,tsType:{name:"boolean"},description:""}}};export{x as C};
