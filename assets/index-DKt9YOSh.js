function a(n,...e){for(let r=0,t=e.length;r<t;r++){const o=e[r];if(o)if(typeof o.entries=="function")for(const[i,s]of o.entries())n[i]=s;else Object.assign(n,o)}return n}function b(n){return new Promise(e=>{document.readyState==="complete"?e(n()):window.addEventListener("load",()=>e(n()))})}const c=window;c.injectedWeb3=c.injectedWeb3||{};u();let l=null;function u(){return Object.values(c.injectedWeb3).filter(({connect:n,enable:e})=>!!(n||e)).length!==0}function f(n){return Promise.all(Object.entries(c.injectedWeb3).map(([e,{connect:r,enable:t,version:o}])=>Promise.resolve().then(()=>r?r(n):t?t(n).then(i=>a({name:e,version:o||"unknown"},i)):Promise.reject(new Error("No connect(..) or enable(...) hook found"))).catch(({message:i})=>{console.error(`Error initializing ${e}: ${i}`)}))).then(e=>e.filter(r=>!!r))}function h(n,e=[]){if(!n)throw new Error("You must pass a name for your app to the web3Enable function");const r=e.length?Promise.all(e.map(t=>t().catch(()=>!1))):Promise.resolve([!0]);return l=b(()=>r.then(()=>f(n).then(t=>t.map(o=>(o.accounts.subscribe||(o.accounts.subscribe=i=>(o.accounts.get().then(i).catch(console.error),()=>{})),o))).catch(()=>[]).then(t=>{const o=t.map(({name:i,version:s})=>`${i}/${s}`);return u(),console.info(`web3Enable: Enabled ${t.length} extension${t.length!==1?"s":""}: ${o.join(", ")}`),t}))),l}export{h as web3Enable,l as web3EnablePromise};
