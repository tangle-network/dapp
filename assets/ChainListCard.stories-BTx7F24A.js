import{j as s}from"./jsx-runtime-BbjHj44Y.js";import{c as p}from"./chain-config-ChLUb0m2.js";import{C as d,P as e}from"./ChainId-BdsD6Wmj.js";import{C as n}from"./ChainListCard-MwzE6EOy.js";import"./index-C6mWTJJr.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-BEGbV5ZM.js";import"./tangle-DQ1MxYgI.js";import"./isHex-DRjArRUf.js";import"./ProposalBadge-aTrZS74o.js";import"./create-icon-BPUPqOkJ.js";import"./bundle-mjs-D696Ktp4.js";import"./index-BpvXyOxN.js";import"./ChainIcon-MpKHrVma.js";import"./Spinner-C8gHa2rr.js";import"./StatusIndicator-BMH2ux_C.js";import"./iframe-CzYK-pcq.js";import"./InformationLine-D6uBLwmF.js";import"./Alert-CUeVEtwL.js";import"./Typography-BXoXAd7x.js";import"./Alert-gGoSOTPY.js";import"./Chip-CU1xpYxs.js";import"./Input-oMzDo86x.js";import"./index-DBTS1piU.js";import"./index-CLAazc5K.js";import"./index-D-pqSeBO.js";import"./index-D0XHPngQ.js";import"./index-BsRll5Wv.js";import"./index-C6Rh8DRz.js";import"./index-D5RmOefV.js";import"./index-CrkKVscG.js";import"./index-ucBY_b0w.js";import"./index-v-BSH-Rc.js";import"./index-DLKox03N.js";import"./index-MLLxzWXI.js";import"./ListCardWrapper-0Mq64WGO.js";import"./index-BdQq_4o_.js";import"./Button-bTMyXnUe.js";import"./Tooltip-BHOFDjF6.js";import"./index-SK0NaOuZ.js";import"./ChainOrTokenButton-B3p2-KpI.js";import"./IconButton-DI6br7aE.js";import"./LoadingPill-B9InIXuZ.js";import"./WalletButton-C4PPuQwO.js";import"./index.browser.esm-BZmtMS8Q.js";import"./index-C-EFqv7j.js";import"./___vite-browser-external_commonjs-proxy-DRaEfepn.js";import"./index-VMVr2VZz.js";import"./shortenHex-B699xSHv.js";import"./shortenString-JLwGCdNy.js";import"./ListItem-DTjKuS8s.js";const nt={title:"Design System/Templates/ChainListCard",component:n},i={render:()=>s.jsx(n,{activeTypedChainId:+Object.keys(p)[0],chainType:"source",chains:Object.entries(p).map(([t,r])=>({typedChainId:+t,name:r.name,tag:r.tag,needSwitchWallet:r.chainType!==d.EVM,isDisabled:+t===e.Polkadot||+t===e.Sepolia||+t===e.OptimismTestnet}))})};var o,m,a;i.parameters={...i.parameters,docs:{...(o=i.parameters)==null?void 0:o.docs,source:{originalSource:`{
  render: () => <ChainListCard activeTypedChainId={+Object.keys(chainsConfig)[0]} chainType="source" chains={Object.entries(chainsConfig).map(([typedChainId, chain]) => ({
    typedChainId: +typedChainId,
    name: chain.name,
    tag: chain.tag,
    needSwitchWallet: chain.chainType !== ChainType.EVM,
    isDisabled: +typedChainId === PresetTypedChainId.Polkadot || +typedChainId === PresetTypedChainId.Sepolia || +typedChainId === PresetTypedChainId.OptimismTestnet
  }))} />
}`,...(a=(m=i.parameters)==null?void 0:m.docs)==null?void 0:a.source}}};const st=["Default"];export{i as Default,st as __namedExportsOrder,nt as default};
