import{j as n}from"./jsx-runtime-BbjHj44Y.js";import{g as I}from"./create-icon-BPUPqOkJ.js";import{c}from"./index-BpvXyOxN.js";import{t as y}from"./bundle-mjs-D696Ktp4.js";import{S as L}from"./Spinner-C8gHa2rr.js";import{r as E}from"./index-C6mWTJJr.js";import{T as C,a as P,b as z}from"./Tooltip-BHOFDjF6.js";const f=e=>{const{children:t=n.jsx(L,{size:"md",darkMode:e.darkMode}),className:a,hasLabel:r=!1,placement:s="start"}=e,l=y("flex items-center",r?"relative":"absolute",r?s==="start"?"mr-2":"ml-2":void 0,a);return n.jsx("div",{className:l,children:t})};f.__docgenInfo={description:"",methods:[],displayName:"ButtonSpinner",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""},hasLabel:{required:!1,tsType:{name:"boolean"},description:`Indicates if the button has a label or not
@default false`},placement:{required:!1,tsType:{name:"union",raw:"'start' | 'end'",elements:[{name:"literal",value:"'start'"},{name:"literal",value:"'end'"}]},description:"It determines the placement of the spinner when `isLoading` is `true`"}}};function S(e){return!e||e.trim()==="#"}function J({href:e,isDisabled:t,onClick:a,rel:r,role:s,tabIndex:l=0,tagName:o,target:d,type:p}){o||(e!=null||d!=null||r!=null?o="a":o="button");const m={tagName:o};if(o==="button")return[{type:p||"button",disabled:t},m];const u=i=>{if((t||o==="a"&&S(e))&&i.preventDefault(),t){i.stopPropagation();return}a==null||a(i)},b=i=>{i.key===" "&&(i.preventDefault(),u(i))};return o==="a"&&(e||(e="#"),t&&(e=void 0)),[{role:s??"button",disabled:void 0,tabIndex:t?void 0:l,href:e,target:o==="a"?d:void 0,"aria-disabled":t||void 0,rel:o==="a"?r:void 0,onClick:u,onKeyDown:b},m]}const R={primary:{base:{common:"rounded-full px-9 py-2 bg-purple-40 border-2 border-transparent text-mono-0 font-bold dark:bg-purple-50 dark:border-2 dark:border-purple-50",hover:"hover:bg-purple-50 dark:hover:bg-purple-60 dark:hover:border-purple-60",active:"active:bg-purple-60 dark:active:bg-purple-70 dark:active:border-purple-70",disabled:"disabled:bg-mono-80 dark:disabled:bg-purple-110 dark:disabled:border-transparent dark:disabled:text-blue-60"},md:"body1",sm:"body3"},secondary:{base:{common:"rounded-full px-9 py-2 bg-mono-0 border border-mono-200 text-mono-200 font-bold dark:bg-mono-180 dark:border-mono-0 dark:text-mono-0",hover:"hover:border-mono-180 hover:text-mono-180 hover:bg-mono-20 dark:hover:border-mono-20 dark:hover:text-mono-20 dark:hover:border-mono-20 dark:hover:bg-mono-170",active:"active:bg-mono-40 active:text-mono-180 dark:active:text-mono-20 dark:active:bg-mono-160",disabled:"disabled:border-mono-100 disabled:text-mono-100 disabled:bg-mono-20 dark:disabled:border-mono-120 dark:disabled:text-mono-120 dark:disabled:bg-mono-160"},md:"body1",sm:"body3"},utility:{base:{common:"rounded-lg px-3 py-2 bg-blue-0 text-blue-60 dark:bg-blue-120 dark:text-blue-40 font-bold border border-transparent",hover:"hover:bg-blue-10 dark:hover:bg-blue-110 dark:hover:text-blue-30",active:"active:bg-blue-10 active:border-blue-40 dark:active:border-blue-110 dark:active:text-blue-30",disabled:"disabled:text-blue-30 disabled:border-transparent dark:disabled:bg-blue-120 dark:disabled:text-blue-90 dark:disabled:opacity-50"},md:"body1",sm:"body4 uppercase"},link:{base:{common:"text-blue-60 dark:text-blue-50 font-bold",hover:"hover:border-blue-70 dark:hover:text-blue-30",active:"active:text-blue-80 dark:active:text-blue-20",disabled:"disabled:text-blue-30 dark:disabled:text-blue-20"},md:"body1",sm:"body4 uppercase"}};function M(e,t){const a="box-border flex justify-center items-center disabled:pointer-events-none text-center disabled:pointer-events-none",{active:r,common:s,disabled:l,hover:o}=R[e].base;return y(R[e][t],a,s,o,r,l)}const A=E.forwardRef((e,t)=>{const{as:a,children:r,className:s,isDisabled:l,isFullWidth:o,isLoading:d,leftIcon:p,loadingText:m,rightIcon:u,size:b="md",spinner:i,spinnerPlacement:g="start",variant:h="primary",isJustIcon:q,disabledTooltip:v,...x}=e,[w,{tagName:j}]=J({tagName:a,isDisabled:l,...x}),N=y("max-w-max",c({"w-full max-w-none justify-center":o}),M(h,b),q&&h==="utility"?"p-2":"",s),k={children:r,leftIcon:p,rightIcon:u,variant:h},T=n.jsxs(j,{...x,...w,disabled:w.disabled||d,className:c(N),ref:t,children:[d&&g==="start"&&n.jsx(f,{hasLabel:!!m,children:i}),d?m||n.jsx("span",{className:"opacity-0",children:n.jsx(B,{...k})}):n.jsx(B,{...k}),d&&g==="end"&&n.jsx(f,{hasLabel:!!m,placement:"end",children:i})]});return v===void 0||!l?T:n.jsxs(C,{children:[n.jsx(P,{children:T}),n.jsx(z,{children:v})]})});function B(e){const{children:t,leftIcon:a,rightIcon:r,variant:s}=e;return n.jsxs(n.Fragment,{children:[a&&n.jsx("span",{className:c(t?s==="link"?"mr-1":"mr-2":null,"block !text-inherit","grow-0 shrink-0",I(a.props.size)),children:a}),n.jsx("span",{className:c("block !text-inherit whitespace-nowrap"),children:t}),r&&n.jsx("span",{className:c(t?s==="link"?"ml-1":"ml-2":null,"block !text-inherit","grow-0 shrink-0",I(r.props.size)),children:r})]})}A.__docgenInfo={description:'The Button Component\n\nProps:\n\n- `isLoading`: If `true`, the button will show a spinner\n- `isDisabled`: If `true`, the button will be disabled\n- `loadingText`: The label to show in the button when `isLoading` is true. If no text is passed, it only shows the spinner\n- `variant`: The button variant (default `primary`)\n- `leftIcon`: If added, the button will show an icon before the button\'s label\n- `rightIcon`:If added, the button will show an icon after the button\'s label\n- `spinner`: Replace the spinner component when `isLoading` is set to `true`\n- `spinnerPlacement`: It determines the placement of the spinner when `isLoading` is `true`\n- `size`: The button size\n\n@example\n\n```jsx\n <Button variant="secondary">Button</Button>\n <Button variant="utility" isLoading>Button</Button>\n```',methods:[],displayName:"Button",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""},as:{required:!1,tsType:{name:"union",raw:"keyof JSX.IntrinsicElements | JSXElementConstructor<any>",elements:[{name:"JSX.IntrinsicElements"},{name:"JSXElementConstructor",elements:[{name:"any"}],raw:"JSXElementConstructor<any>"}]},description:`Control the underlying rendered element directly by passing in a valid
component type`},href:{required:!1,tsType:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]},description:"Optionally specify an href to render a `<a>` tag styled as a button"},target:{required:!1,tsType:{name:"union",raw:"HTMLAttributeAnchorTarget | undefined",elements:[{name:"HTMLAttributeAnchorTarget"},{name:"undefined"}]},description:"Anchor target, when rendering an anchor as a button"},rel:{required:!1,tsType:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]},description:""},isLoading:{required:!1,tsType:{name:"boolean"},description:"If `true`, the button will show a spinner"},isDisabled:{required:!1,tsType:{name:"boolean"},description:"If `true`, the button will be disabled"},loadingText:{required:!1,tsType:{name:"string"},description:"The label to show in the button when `isLoading` is true.\n\nIf no value is passed, only the spinner will be shown."},variant:{required:!1,tsType:{name:"union",raw:"'primary' | 'secondary' | 'utility' | 'link'",elements:[{name:"literal",value:"'primary'"},{name:"literal",value:"'secondary'"},{name:"literal",value:"'utility'"},{name:"literal",value:"'link'"}]},description:`The button variant
@default "primary"`},leftIcon:{required:!1,tsType:{name:"ReactReactElement",raw:"React.ReactElement<IconBase>",elements:[{name:"IconBase"}]},description:`If added, the button will show an icon before the button's label
@type React.ReactElement`},rightIcon:{required:!1,tsType:{name:"ReactReactElement",raw:"React.ReactElement<IconBase>",elements:[{name:"IconBase"}]},description:"If added, the button will show an icon after the button's label"},spinner:{required:!1,tsType:{name:"ReactReactElement",raw:"React.ReactElement<IconBase>",elements:[{name:"IconBase"}]},description:"Replace the spinner component when `isLoading` is set to `true`\n@type React.ReactElement"},spinnerPlacement:{required:!1,tsType:{name:"union",raw:"'start' | 'end'",elements:[{name:"literal",value:"'start'"},{name:"literal",value:"'end'"}]},description:`It determines the placement of the spinner when isLoading is true
@default "start"`},size:{required:!1,tsType:{name:"union",raw:"'sm' | 'md'",elements:[{name:"literal",value:"'sm'"},{name:"literal",value:"'md'"}]},description:`The button size
@default "md"`},isFullWidth:{required:!1,tsType:{name:"boolean"},description:"If `true`, the button will display as full width"},isJustIcon:{required:!1,tsType:{name:"boolean"},description:"If `true`, the size of the button will be adjusted to fit the icon based on the variant"},disabledTooltip:{required:!1,tsType:{name:"string"},description:`A tooltip to display when the button is disabled.

Useful for explaining why the button is disabled.`}},composes:["ButtonBase"]};export{A as B};
