import{j as r}from"./jsx-runtime-BbjHj44Y.js";import{r as e}from"./index-C6mWTJJr.js";import{t}from"./bundle-mjs-D696Ktp4.js";import{T as b}from"./Typography-BXoXAd7x.js";import{C as f}from"./Chip-CU1xpYxs.js";const h=e.forwardRef((o,n)=>{const{children:i,className:s}=o,a=e.useMemo(()=>"inline-flex pointer-events-none !text-mono-120 dark:!text-mono-80 font-bold mx-2",[]),c=e.useMemo(()=>t(a,s),[a,s]);return r.jsx("span",{className:c,ref:n,children:i})});h.__docgenInfo={description:"",methods:[],displayName:"BreadcrumbsSeparator",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""}}};const N=e.forwardRef((o,n)=>{const{separator:i,children:s,className:a}=o,d=e.Children.toArray(s).map((p,u)=>u===0?p:r.jsxs(e.Fragment,{children:[r.jsx(h,{children:i}),p]},u)),m=e.useMemo(()=>"flex items-center",[]),l=e.useMemo(()=>t(m,a),[m,a]);return r.jsx("div",{className:l,ref:n,children:d})}),g={separator:"/"};N.defaultProps=g;N.__docgenInfo={description:"The `Breadcrumbs` component\n\n- `separator`: `Optional`. The separator between the breadcrumbs. Default is `/`\n\n```jsx\n // Example\n <Breadcrumbs>\n   <BreadcrumbsItem icon={<GridFillIcon />}>Tangle Explorer</BreadcrumbsItem>\n   <BreadcrumbsItem icon={<KeyIcon />}>Keys Overview</BreadcrumbsItem>\n   <BreadcrumbsItem icon={<ShieldKeyholeLineIcon />} isLast>Keygen details</BreadcrumbsItem>\n <Breadcrumbs />\n```",methods:[],displayName:"Breadcrumbs",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""},separator:{required:!1,tsType:{name:"union",raw:"string | React.ReactNode",elements:[{name:"string"},{name:"ReactReactNode",raw:"React.ReactNode"}]},description:"",defaultValue:{value:"'/'",computed:!1}}}};const x=e.forwardRef((o,n)=>{const{isLast:i=!1,icon:s,children:a,className:c,textClassName:d}=o,m=e.useMemo(()=>"flex items-center gap-x-2 w-fit",[]),l=e.useMemo(()=>t(m,c),[m,c]);return i?r.jsxs(f,{color:"grey",className:t("mb-[0.4px] bg-[#9CA0B01A] dark:bg-[rgba(255,255,255,0.1)]",l),ref:n,children:[s,r.jsx(b,{variant:"label",className:t("capitalize !font-semibold dark:text-mono-0",d),children:a})]}):r.jsxs(f,{color:"grey",className:t(l,"cursor-pointer dark:bg-[rgba(255,255,255,0.05)]"),ref:n,children:[s,r.jsx(b,{variant:"label",className:t("capitalize !font-semibold text-mono-120 dark:text-mono-60",d),children:a})]})});x.__docgenInfo={description:"The `BreadcrumbsItem` component\n\n- `icon`: `Optional`. The icon to appear before the component's children\n- `isLast`: `Optional`. If `true` the breadcrumb item will be highlighted indicating it's the last item\n\n```jsx\n // Example (not a last item)\n <BreadcrumbsItem icon={<GridFillIcon />}>Tangle Explorer</BreadcrumbsItem>\n\n // Example (is a last item)\n <BreadcrumbsItem icon={<GridFillIcon />} isLast>Tangle Explorer</BreadcrumbsItem>\n```",methods:[],displayName:"BreadcrumbsItem",props:{className:{required:!1,tsType:{name:"string"},description:"The tailwindcss className to override the style"},darkMode:{required:!1,tsType:{name:"boolean"},description:"Control dark mode using `js`, if it's empty, the component will control dark mode in `css`"},children:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:""},isLast:{required:!1,tsType:{name:"boolean"},description:""},icon:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},textClassName:{required:!1,tsType:{name:"string"},description:""}}};export{N as B,x as a};
